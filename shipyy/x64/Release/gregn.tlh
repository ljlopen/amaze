// Created by Microsoft (R) C/C++ Compiler Version 14.12.25831.0 (9c937bfc).
//
// f:\w\vs2017\amaze\shipyy\x64\release\gregn.tlh
//
// C++ source equivalent of Win32 type library ..\gregn.tlb
// compiler-generated file created 06/01/18 at 13:13:43 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("4018f953-1bfe-441e-8a04-dc8ba1ff060e"))
/* LIBID */ __gregn6Lib;
struct __declspec(uuid("330f80f5-4568-4f70-bfcb-683d3b90febb"))
/* dispinterface */ _IGridppReportEvents;
struct __declspec(uuid("f803ae1d-b578-490a-a1fe-38976ad2b625"))
/* dual interface */ IGRGroup;
struct __declspec(uuid("07120975-b963-4f85-9b4d-0ac979febb5d"))
/* dual interface */ IGRObject;
struct __declspec(uuid("cb11f828-a97b-4bc3-9b7a-9d2ddeb1c229"))
/* dual interface */ IGRDetailGrid;
struct __declspec(uuid("23f65787-d22b-4ca6-ba49-d22b63ca353a"))
/* dual interface */ IGRColumnContent;
struct __declspec(uuid("c765e825-5f52-44cb-aab6-fa89376da4c0"))
/* dual interface */ IGRColumnSection;
struct __declspec(uuid("77fd1006-7067-41ff-a712-0f356a6ace8c"))
/* dual interface */ IGRSection;
enum tagGRSectionType;
struct __declspec(uuid("d4708b2f-dc00-4ef6-9559-a5dd9e86047c"))
/* dual interface */ IGRFont;
struct __declspec(uuid("48636e6a-758e-46c0-b37a-c2a2cac9469a"))
/* dual interface */ IGRControls;
struct __declspec(uuid("07120975-b963-4f75-9b4d-0ac979febb5d"))
/* dual interface */ IGRControl;
enum tagGRControlType;
enum tagGRBackStyle;
struct __declspec(uuid("fcdb44d7-4e0b-4eb6-a1e2-092689e8a482"))
/* dual interface */ IGRBorder;
struct __declspec(uuid("c9ef8e78-8e3a-428c-93c5-f52e146cb6ff"))
/* dual interface */ IGRPen;
enum tagGRPenStyle;
enum tagGRBorderStyle;
enum tagGRAnchorStyle;
enum tagGRDockStyle;
enum tagGRCenterStyle;
enum tagGRAlignColumnSideStyle;
enum tagGRShiftMode;
enum tagGRPrintType;
enum tagGRDisplayCursor;
struct __declspec(uuid("6a246ac9-1715-40b6-a483-de9f3e8da43c"))
/* dual interface */ IGRTextBox;
struct __declspec(uuid("4c56923d-4012-4d28-8283-1b294c5c2a06"))
/* dual interface */ IGRTextFormat;
enum tagGRTextAlign;
enum tagGRTextOrientation;
enum tagGRFieldType;
struct __declspec(uuid("e66ebbf5-ed8d-44e7-8a6c-e6579adcc7d4"))
/* dual interface */ IGRChart;
struct __declspec(uuid("1d1e02b3-e1bd-4c84-95f8-bb19bbb481f0"))
/* dual interface */ IGRChartAxis;
enum tagGRLockType;
struct __declspec(uuid("a1c0e90d-b75a-4ffd-a542-54c9e44785a6"))
/* dual interface */ IGRChartSeriesCollection;
struct __declspec(uuid("ca0a5cbe-7eec-44fd-abfd-fc65bfed8618"))
/* dual interface */ IGRChartSeries;
enum tagGRChartType;
enum tagGRPointMarkerStyle;
struct __declspec(uuid("93cd76f7-5439-437f-8fa5-a650f2ca773c"))
/* dual interface */ IGRRecordset;
struct __declspec(uuid("f00ce27d-d1e3-4ef6-9877-bf3233ebf551"))
/* dual interface */ IGRFields;
struct __declspec(uuid("04cea260-dd00-4954-a81f-f0a201343cb9"))
/* dual interface */ IGRField;
struct __declspec(uuid("45f9b62d-9e33-484a-bb3c-bd58007bdaa2"))
/* dual interface */ IGRBinaryObject;
struct __declspec(uuid("b4af4881-7230-4ae0-8d3a-02f96f339454"))
/* dual interface */ IGRStaticBox;
struct __declspec(uuid("c04a6143-7500-41ef-8062-bd89a0a92d40"))
/* dual interface */ IGRShapeBox;
enum tagGRShapeBoxType;
enum tagGRLineType;
struct __declspec(uuid("28845384-ed9f-4d2e-986e-d52ac37a108f"))
/* dual interface */ IGRSystemVarBox;
enum tagGRSystemVarType;
struct __declspec(uuid("fe9aa791-4c55-4e06-a592-08d8df88a941"))
/* dual interface */ IGRFieldBox;
struct __declspec(uuid("24de1ebe-5d9c-40ec-a11a-21af7d0c0d36"))
/* dual interface */ IGRSummaryBox;
enum tagGRSummaryFun;
struct __declspec(uuid("c04a6148-7500-41ef-8062-bd89a0a92d40"))
/* dual interface */ IGRPictureBox;
enum tagGRPictureAlignment;
enum tagGRPictureSizeMode;
enum tagGRPictureTransparentMode;
enum tagGRPictureRotateMode;
struct __declspec(uuid("17807bd9-44bc-4550-b104-c2a074786bff"))
/* dual interface */ IGRPicture;
enum tagGRPictureType;
enum tagGRSystemImage;
struct __declspec(uuid("c04a6148-7511-41ef-8062-bd89a0a92d40"))
/* dual interface */ IGRRichTextBox;
struct __declspec(uuid("39a2c13a-d695-44bd-8339-a94fa64cb62b"))
/* dual interface */ IGRMemoBox;
struct __declspec(uuid("cdaa7f5b-e100-49b7-93f2-6b66fc93be55"))
/* dual interface */ IGRSubReport;
struct __declspec(uuid("4fa44042-1421-46de-9aca-a44753ff06c6"))
/* dual interface */ IGridppReport;
struct __declspec(uuid("7fc1d3a0-693f-486e-bdf3-02e98f50f9f3"))
/* dual interface */ IGRPageHeader;
struct __declspec(uuid("aacdaa8b-5ebb-4cc7-bcb9-c300fe7184a5"))
/* dual interface */ IGRPageFooter;
struct __declspec(uuid("d40307c2-9342-4c0d-9734-a103418186fe"))
/* dual interface */ IGRParameters;
struct __declspec(uuid("23af6c8a-0f15-45e3-a10d-9373bb15ac86"))
/* dual interface */ IGRParameter;
enum tagGRParameterDataType;
struct __declspec(uuid("6fa2be8f-b674-49a9-a081-fe3968ae8d8d"))
/* dual interface */ IGRReportHeaders;
struct __declspec(uuid("f82df93f-5ff2-40a6-b50b-016666ec08ca"))
/* dual interface */ IGRReportHeader;
struct __declspec(uuid("53e18537-559d-4ef2-94c3-47a1ef38100f"))
/* dual interface */ IGRReportSection;
enum tagGRNewPageStyle;
struct __declspec(uuid("ce4b64d4-5b5c-4b74-8470-1cc62f8e9fc9"))
/* dual interface */ IGRReportFooters;
struct __declspec(uuid("b2cc2c43-cf42-4e38-bdbb-5c04df11793f"))
/* dual interface */ IGRReportFooter;
struct __declspec(uuid("01056f48-f4ab-4d9f-be45-614f3313717d"))
/* dual interface */ IGRImageList;
struct __declspec(uuid("17b23325-7316-4098-9fe3-b5a1c24db296"))
/* dual interface */ IGRPrinter;
enum tagGRPrintRangeType;
enum tagGRPrintPageType;
enum tagGRDuplexKind;
enum tagGRPaperOrientation;
enum tagGRPaperKind;
enum tagGRPaperSourceKind;
enum tagGRSheetPages;
enum tagGRCollateKind;
struct __declspec(uuid("5eb6e1e6-00b9-4469-ab22-ee4375d70e39"))
/* dual interface */ IGRGraphics;
struct __declspec(uuid("fe08c5a0-22b5-4664-9daa-4bb97c2c0771"))
/* dual interface */ IGRUtility;
struct __declspec(uuid("95eb847d-6550-4fc7-a123-de050e0328aa"))
/* dual interface */ IGRDateTime;
enum tagGRStorageFormat;
enum tagGRTextEncodeMode;
enum tagGRUnit;
enum tagGRScriptType;
enum tagGRReportDisplayMode;
struct __declspec(uuid("72a79692-2f9e-4fec-92cc-6b4a7375a3d6"))
/* dual interface */ IGRColumn;
struct __declspec(uuid("83cc68ef-b558-45bb-8023-6c4f3bdada7b"))
/* dual interface */ IGRColumnTitleCell;
struct __declspec(uuid("e2f421d7-73fa-462f-9bf5-7da3e512ca00"))
/* dual interface */ IGRColumnCell;
struct __declspec(uuid("e5561733-9cd9-4d47-ae6b-3cb10a3d6772"))
/* dual interface */ IGRCellBase;
struct __declspec(uuid("08513fc1-ccce-4603-8dd1-35ba1ca8d1cd"))
/* dual interface */ IGRColumnTitle;
struct __declspec(uuid("97502458-7024-4194-9598-5b62001d8c1a"))
/* dual interface */ IGRColumnTitleCells;
enum tagGRRepeatStyle;
struct __declspec(uuid("bb12aebd-5839-4a5e-9944-65b6798381c8"))
/* dual interface */ IGRColumnContentCell;
enum tagGRPrintGenerateStyle;
enum tagGRExportType;
struct __declspec(uuid("5bcb27bb-9750-4b28-9384-77801fb0d4eb"))
/* dual interface */ IGRSharePrintSetupObject;
enum tagGRSharePrintSetupOption;
struct __declspec(uuid("60eb191f-5e63-41e7-807f-c66ec7a8ef26"))
/* dual interface */ IGRExportOption;
struct __declspec(uuid("ebf161f0-f347-441a-9c0d-0aca7824793b"))
/* dual interface */ IGRE2CellOption;
struct __declspec(uuid("60eb191f-5e63-41e7-808f-c66ec7a8ef26"))
/* dual interface */ IGRE2XLSOption;
struct __declspec(uuid("3bb506ab-425b-43b0-bc82-28a61fccf686"))
/* dual interface */ IGRE2TXTOption;
struct __declspec(uuid("f5d15e31-fa9a-42be-be9c-8688e7d9d6a0"))
/* dual interface */ IGRE2HTMOption;
struct __declspec(uuid("f4aa885f-af9c-4032-a65a-f3dfd458c289"))
/* dual interface */ IGRE2RTFOption;
struct __declspec(uuid("273631dd-1cac-49e9-92ee-584f48921a1e"))
/* dual interface */ IGRE2PDFOption;
enum tagGRPDFDocPermission;
struct __declspec(uuid("f623a5e8-4ae4-494e-975b-3c5404428625"))
/* dual interface */ IGRE2CSVOption;
struct __declspec(uuid("81727f33-8d8c-45dc-b525-07abdc5fb652"))
/* dual interface */ IGRE2IMGOption;
enum tagGRExportImageType;
enum tagGRDocType;
struct __declspec(uuid("c4aca069-b92c-401a-b175-354e00d538d9"))
/* dual interface */ IGRLine;
struct __declspec(uuid("530a8e53-dfd5-4b95-a4f3-636e00d801d8"))
/* dual interface */ IGRBarcode;
enum tagGRBarcodeType;
enum tagGRStringAlignment;
enum tagGRBarcodeCaptionPosition;
enum tagGRBarcodeDirection;
enum tagGRDtmxEncoding;
enum tagGRDtmxMatrixSize;
struct __declspec(uuid("5f9d573a-8350-4a94-bb9f-2d0fa787ec7c"))
/* dual interface */ IGRFreeGrid;
struct __declspec(uuid("8fe11b07-22dc-4691-85d7-0469364b4b46"))
/* dual interface */ IGRFreeGridColumn;
struct __declspec(uuid("5dabf9ad-2396-4c11-bfd7-a5ee39772954"))
/* dual interface */ IGRFreeGridRow;
struct __declspec(uuid("cd0a6964-d013-4db6-96c4-5b1de0db8f1c"))
/* dual interface */ IGRFreeGridCell;
struct __declspec(uuid("af39550b-2a23-418a-acec-812c70ea5a62"))
/* dual interface */ IGRColumnContentCells;
struct __declspec(uuid("42f6af5f-5fc4-4f44-9812-1fbd9224ce2c"))
/* dual interface */ IGRColumns;
struct __declspec(uuid("488b2328-67c0-42d1-a133-303ff60d8ae2"))
/* dual interface */ IGRGroups;
struct __declspec(uuid("c3112650-36d2-4928-9d6c-c0a21ccc1eba"))
/* dual interface */ IGRCrossTab;
enum tagGRPeriodType;
enum tagGRPageColumnDirection;
enum tagGRColumnPrintAdaptMethod;
struct __declspec(uuid("5c2fc87f-12f8-4a09-8a4a-792671c03c74"))
/* dual interface */ IGRGroupHeader;
struct __declspec(uuid("36971202-d715-4afc-83d4-7c0ddd8872e8"))
/* dual interface */ IGRGroupSection;
enum tagGRNewPageColumnStyle;
enum tagGROCGroupHeaderVAlign;
enum tagGRGrpKpTogetherStyle;
struct __declspec(uuid("b753063d-aeba-4e5e-b53a-f89b68f1f622"))
/* dual interface */ IGRGroupFooter;
struct __declspec(uuid("0574abeb-b0da-465d-9eb7-286c00f3628f"))
/* dual interface */ IGRPrintViewer;
enum tagGRViewerBorderStyle;
enum tagGRPreviewEditMode;
enum tagGRPrintViewMode;
enum tagGRToolControlType;
enum tagGRPrintViewerOption;
struct __declspec(uuid("2564dce8-fedb-4eb6-b7f9-5026f7f1041e"))
/* dispinterface */ _IGRDisplayViewerEvents;
enum tagGRShiftState;
enum tagGRMouseButton;
enum tagGRToolControlType2;
struct __declspec(uuid("a9e920a1-c722-4a81-9fcf-4d5ebffa21f4"))
/* dispinterface */ _IGRPrintViewerEvents;
struct /* coclass */ GridppReport;
struct /* coclass */ GRDisplayViewer;
struct __declspec(uuid("fba070ab-385f-4988-b7a1-ce6b72799b48"))
/* dual interface */ IGRDisplayViewer;
enum tagGRDisplayViewerOption;
struct /* coclass */ GRDisplayViewerProps;
struct /* coclass */ GRPrintViewer;
struct /* coclass */ GRPrintViewerProps;
typedef enum tagGRSectionType GRSectionType;
typedef enum tagGRControlType GRControlType;
typedef enum tagGRBackStyle GRBackStyle;
typedef enum tagGRPenStyle GRPenStyle;
typedef enum tagGRBorderStyle GRBorderStyles;
typedef enum tagGRAnchorStyle GRAnchorStyles;
typedef enum tagGRDockStyle GRDockStyle;
typedef enum tagGRCenterStyle GRCenterStyle;
typedef enum tagGRAlignColumnSideStyle GRAlignColumnStyle;
typedef enum tagGRShiftMode GRShiftMode;
typedef enum tagGRPrintType GRPrintType;
typedef enum tagGRDisplayCursor GRDisplayCursor;
typedef enum tagGRTextAlign GRTextAlign;
typedef enum tagGRTextOrientation GRTextOrientation;
typedef enum tagGRFieldType GRFieldType;
typedef enum tagGRLockType GRLockType;
typedef enum tagGRChartType GRChartType;
typedef enum tagGRPointMarkerStyle GRPointMarkerStyle;
#if !defined(_WIN64)
typedef __w64 long LONG_PTR;
#else
typedef __int64 LONG_PTR;
#endif
typedef enum tagGRShapeBoxType GRShapeType;
typedef enum tagGRLineType GRLineType;
typedef enum tagGRSystemVarType GRSystemVarType;
typedef enum tagGRSummaryFun GRSummaryFun;
typedef enum tagGRPictureAlignment GRPictureAlignment;
typedef enum tagGRPictureSizeMode GRPictureSizeMode;
typedef enum tagGRPictureTransparentMode GRPictureTransparentMode;
typedef enum tagGRPictureRotateMode GRPictureRotateMode;
typedef enum tagGRPictureType GRPictureType;
typedef enum tagGRSystemImage GRSystemImage;
typedef enum tagGRParameterDataType GRParameterDataType;
typedef enum tagGRNewPageStyle GRNewPageStyle;
typedef enum tagGRPrintRangeType GRPrintRangeType;
typedef enum tagGRPrintPageType GRPrintPageType;
typedef enum tagGRDuplexKind GRDuplexKind;
typedef enum tagGRPaperOrientation GRPaperOrientation;
typedef enum tagGRPaperKind GRPaperKind;
typedef enum tagGRPaperSourceKind GRPaperSourceKind;
typedef enum tagGRSheetPages GRSheetPages;
typedef enum tagGRCollateKind GRCollateKind;
typedef enum tagGRStorageFormat GRStorageFormat;
typedef enum tagGRTextEncodeMode GRTextEncodeMode;
typedef enum tagGRUnit GRUnit;
typedef enum tagGRScriptType GRScriptType;
typedef enum tagGRReportDisplayMode GRReportDisplayMode;
typedef enum tagGRRepeatStyle GRRepeatStyle;
typedef enum tagGRPrintGenerateStyle GRPrintGenerateStyle;
typedef enum tagGRExportType GRExportType;
typedef enum tagGRSharePrintSetupOption GRSharePrintSetupOption;
typedef enum tagGRPDFDocPermission GRPDFDocPermission;
typedef enum tagGRExportImageType GRExportImageType;
typedef enum tagGRDocType GRDocType;
typedef enum tagGRBarcodeType GRBarcodeType;
typedef enum tagGRStringAlignment GRStringAlignment;
typedef enum tagGRBarcodeCaptionPosition GRBarcodeCaptionPosition;
typedef enum tagGRBarcodeDirection GRBarcodeDirection;
typedef enum tagGRDtmxEncoding GRDtmxEncoding;
typedef enum tagGRDtmxMatrixSize GRDtmxMatrixSize;
typedef enum tagGRPeriodType GRPeriodType;
typedef enum tagGRPageColumnDirection GRPageColumnDirection;
typedef enum tagGRColumnPrintAdaptMethod GRColumnPrintAdaptMethod;
typedef enum tagGRNewPageColumnStyle GRNewPageColumnStyle;
typedef enum tagGROCGroupHeaderVAlign GROCGroupHeaderVAlign;
typedef enum tagGRGrpKpTogetherStyle GRGrpKpTogetherStyle;
typedef enum tagGRViewerBorderStyle GRViewerBorderStyle;
typedef enum tagGRPreviewEditMode GRPreviewEditMode;
typedef enum tagGRPrintViewMode GRPrintViewMode;
typedef enum tagGRToolControlType GRToolControlType;
typedef enum tagGRPrintViewerOption GRPrintViewerOption;
typedef enum tagGRShiftState GRShiftStates;
typedef enum tagGRMouseButton GRMouseButton;
typedef enum tagGRToolControlType2 GRToolControlType2;
typedef enum tagGRDisplayViewerOption GRDisplayViewerOption;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_IGridppReportEvents, __uuidof(_IGridppReportEvents));
_COM_SMARTPTR_TYPEDEF(IGRObject, __uuidof(IGRObject));
_COM_SMARTPTR_TYPEDEF(IGRFont, __uuidof(IGRFont));
_COM_SMARTPTR_TYPEDEF(IGRPen, __uuidof(IGRPen));
_COM_SMARTPTR_TYPEDEF(IGRBorder, __uuidof(IGRBorder));
_COM_SMARTPTR_TYPEDEF(IGRTextFormat, __uuidof(IGRTextFormat));
_COM_SMARTPTR_TYPEDEF(IGRChartAxis, __uuidof(IGRChartAxis));
_COM_SMARTPTR_TYPEDEF(IGRChartSeries, __uuidof(IGRChartSeries));
_COM_SMARTPTR_TYPEDEF(IGRChartSeriesCollection, __uuidof(IGRChartSeriesCollection));
_COM_SMARTPTR_TYPEDEF(IGRParameter, __uuidof(IGRParameter));
_COM_SMARTPTR_TYPEDEF(IGRParameters, __uuidof(IGRParameters));
_COM_SMARTPTR_TYPEDEF(IGRPrinter, __uuidof(IGRPrinter));
_COM_SMARTPTR_TYPEDEF(IGRDateTime, __uuidof(IGRDateTime));
_COM_SMARTPTR_TYPEDEF(IGRSharePrintSetupObject, __uuidof(IGRSharePrintSetupObject));
_COM_SMARTPTR_TYPEDEF(_IGRDisplayViewerEvents, __uuidof(_IGRDisplayViewerEvents));
_COM_SMARTPTR_TYPEDEF(_IGRPrintViewerEvents, __uuidof(_IGRPrintViewerEvents));
_COM_SMARTPTR_TYPEDEF(IGRGroup, __uuidof(IGRGroup));
_COM_SMARTPTR_TYPEDEF(IGRGroups, __uuidof(IGRGroups));
_COM_SMARTPTR_TYPEDEF(IGRDetailGrid, __uuidof(IGRDetailGrid));
_COM_SMARTPTR_TYPEDEF(IGRSection, __uuidof(IGRSection));
_COM_SMARTPTR_TYPEDEF(IGRColumnSection, __uuidof(IGRColumnSection));
_COM_SMARTPTR_TYPEDEF(IGRPageHeader, __uuidof(IGRPageHeader));
_COM_SMARTPTR_TYPEDEF(IGRPageFooter, __uuidof(IGRPageFooter));
_COM_SMARTPTR_TYPEDEF(IGRReportSection, __uuidof(IGRReportSection));
_COM_SMARTPTR_TYPEDEF(IGRReportHeader, __uuidof(IGRReportHeader));
_COM_SMARTPTR_TYPEDEF(IGRReportHeaders, __uuidof(IGRReportHeaders));
_COM_SMARTPTR_TYPEDEF(IGRReportFooter, __uuidof(IGRReportFooter));
_COM_SMARTPTR_TYPEDEF(IGRReportFooters, __uuidof(IGRReportFooters));
_COM_SMARTPTR_TYPEDEF(IGRGroupSection, __uuidof(IGRGroupSection));
_COM_SMARTPTR_TYPEDEF(IGRGroupHeader, __uuidof(IGRGroupHeader));
_COM_SMARTPTR_TYPEDEF(IGRGroupFooter, __uuidof(IGRGroupFooter));
_COM_SMARTPTR_TYPEDEF(IGRColumnContent, __uuidof(IGRColumnContent));
_COM_SMARTPTR_TYPEDEF(IGRControls, __uuidof(IGRControls));
_COM_SMARTPTR_TYPEDEF(IGRCellBase, __uuidof(IGRCellBase));
_COM_SMARTPTR_TYPEDEF(IGRFreeGridCell, __uuidof(IGRFreeGridCell));
_COM_SMARTPTR_TYPEDEF(IGRControl, __uuidof(IGRControl));
_COM_SMARTPTR_TYPEDEF(IGRTextBox, __uuidof(IGRTextBox));
_COM_SMARTPTR_TYPEDEF(IGRStaticBox, __uuidof(IGRStaticBox));
_COM_SMARTPTR_TYPEDEF(IGRShapeBox, __uuidof(IGRShapeBox));
_COM_SMARTPTR_TYPEDEF(IGRSystemVarBox, __uuidof(IGRSystemVarBox));
_COM_SMARTPTR_TYPEDEF(IGRFieldBox, __uuidof(IGRFieldBox));
_COM_SMARTPTR_TYPEDEF(IGRSummaryBox, __uuidof(IGRSummaryBox));
_COM_SMARTPTR_TYPEDEF(IGRRichTextBox, __uuidof(IGRRichTextBox));
_COM_SMARTPTR_TYPEDEF(IGRMemoBox, __uuidof(IGRMemoBox));
_COM_SMARTPTR_TYPEDEF(IGRLine, __uuidof(IGRLine));
_COM_SMARTPTR_TYPEDEF(IGRBarcode, __uuidof(IGRBarcode));
_COM_SMARTPTR_TYPEDEF(IGRChart, __uuidof(IGRChart));
_COM_SMARTPTR_TYPEDEF(IGRRecordset, __uuidof(IGRRecordset));
_COM_SMARTPTR_TYPEDEF(IGRCrossTab, __uuidof(IGRCrossTab));
_COM_SMARTPTR_TYPEDEF(IGRFields, __uuidof(IGRFields));
_COM_SMARTPTR_TYPEDEF(IGRField, __uuidof(IGRField));
_COM_SMARTPTR_TYPEDEF(IGRBinaryObject, __uuidof(IGRBinaryObject));
_COM_SMARTPTR_TYPEDEF(IGRPicture, __uuidof(IGRPicture));
_COM_SMARTPTR_TYPEDEF(IGRPictureBox, __uuidof(IGRPictureBox));
_COM_SMARTPTR_TYPEDEF(IGRImageList, __uuidof(IGRImageList));
_COM_SMARTPTR_TYPEDEF(IGRGraphics, __uuidof(IGRGraphics));
_COM_SMARTPTR_TYPEDEF(IGRUtility, __uuidof(IGRUtility));
_COM_SMARTPTR_TYPEDEF(IGRSubReport, __uuidof(IGRSubReport));
_COM_SMARTPTR_TYPEDEF(IGridppReport, __uuidof(IGridppReport));
_COM_SMARTPTR_TYPEDEF(IGRPrintViewer, __uuidof(IGRPrintViewer));
_COM_SMARTPTR_TYPEDEF(IGRColumn, __uuidof(IGRColumn));
_COM_SMARTPTR_TYPEDEF(IGRColumnCell, __uuidof(IGRColumnCell));
_COM_SMARTPTR_TYPEDEF(IGRColumnContentCell, __uuidof(IGRColumnContentCell));
_COM_SMARTPTR_TYPEDEF(IGRColumnContentCells, __uuidof(IGRColumnContentCells));
_COM_SMARTPTR_TYPEDEF(IGRColumns, __uuidof(IGRColumns));
_COM_SMARTPTR_TYPEDEF(IGRColumnTitleCell, __uuidof(IGRColumnTitleCell));
_COM_SMARTPTR_TYPEDEF(IGRColumnTitleCells, __uuidof(IGRColumnTitleCells));
_COM_SMARTPTR_TYPEDEF(IGRColumnTitle, __uuidof(IGRColumnTitle));
_COM_SMARTPTR_TYPEDEF(IGRDisplayViewer, __uuidof(IGRDisplayViewer));
_COM_SMARTPTR_TYPEDEF(IGRExportOption, __uuidof(IGRExportOption));
_COM_SMARTPTR_TYPEDEF(IGRE2CellOption, __uuidof(IGRE2CellOption));
_COM_SMARTPTR_TYPEDEF(IGRE2XLSOption, __uuidof(IGRE2XLSOption));
_COM_SMARTPTR_TYPEDEF(IGRE2TXTOption, __uuidof(IGRE2TXTOption));
_COM_SMARTPTR_TYPEDEF(IGRE2HTMOption, __uuidof(IGRE2HTMOption));
_COM_SMARTPTR_TYPEDEF(IGRE2RTFOption, __uuidof(IGRE2RTFOption));
_COM_SMARTPTR_TYPEDEF(IGRE2PDFOption, __uuidof(IGRE2PDFOption));
_COM_SMARTPTR_TYPEDEF(IGRE2CSVOption, __uuidof(IGRE2CSVOption));
_COM_SMARTPTR_TYPEDEF(IGRE2IMGOption, __uuidof(IGRE2IMGOption));
_COM_SMARTPTR_TYPEDEF(IGRFreeGrid, __uuidof(IGRFreeGrid));
_COM_SMARTPTR_TYPEDEF(IGRFreeGridColumn, __uuidof(IGRFreeGridColumn));
_COM_SMARTPTR_TYPEDEF(IGRFreeGridRow, __uuidof(IGRFreeGridRow));

//
// Type library items
//

struct __declspec(uuid("330f80f5-4568-4f70-bfcb-683d3b90febb"))
_IGridppReportEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Initialize ( );
    HRESULT FetchRecord ( );
    HRESULT BeforePostRecord ( );
    HRESULT BeforeSort (
        _bstr_t SortFields );
    HRESULT RuntimeError (
        long ErrorID,
        _bstr_t ErrorMsg );
    HRESULT ProcessBegin ( );
    HRESULT ProcessEnd ( );
    HRESULT GroupBegin (
        struct IGRGroup * pSender );
    HRESULT GroupEnd (
        struct IGRGroup * pSender );
    HRESULT ProcessRecord ( );
    HRESULT GeneratePagesBegin ( );
    HRESULT GeneratePagesEnd ( );
    HRESULT PageProcessRecord ( );
    HRESULT PageStart ( );
    HRESULT PageEnd ( );
    HRESULT SectionFormat (
        struct IGRSection * pSender );
    HRESULT FieldGetDisplayText (
        struct IGRField * pSender );
    HRESULT TextBoxGetDisplayText (
        struct IGRTextBox * pSender );
    HRESULT ControlCustomDraw (
        struct IGRControl * pSender,
        struct IGRGraphics * pGraphics );
    HRESULT ChartRequestData (
        struct IGRChart * pSender );
    HRESULT PrintBegin ( );
    HRESULT PrintEnd ( );
    HRESULT PrintPage (
        long PageNo );
    HRESULT PrintAborted ( );
    HRESULT ExportBegin (
        struct IGRExportOption * pOptionObject );
    HRESULT ExportEnd (
        struct IGRExportOption * pOptionObject );
    HRESULT ShowPreviewWnd (
        struct IGRPrintViewer * pPrintViewer );
    HRESULT ShowDesignerWnd (
        IDispatch * pDesigner );
    HRESULT HyperlinkClick (
        struct IGRControl * pSender,
        _bstr_t HyperlinkText,
        VARIANT_BOOL FromPreviewPage );
};

struct __declspec(uuid("07120975-b963-4f85-9b4d-0ac979febb5d"))
IGRObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t pVal );
    HRESULT Assign (
        IDispatch * Object );
    HRESULT _ObjSave ( );
    HRESULT _ObjLoad ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ IDispatch * Object ) = 0;
      virtual HRESULT __stdcall raw__ObjSave ( ) = 0;
      virtual HRESULT __stdcall raw__ObjLoad ( ) = 0;
};

enum tagGRSectionType
{
    grstPageHeader = 1,
    grstReportHeader = 2,
    grstReportFooter = 3,
    grstPageFooter = 4,
    grstColumnTitle = 5,
    grstColumnContent = 6,
    grstGroupHeader = 7,
    grstGroupFooter = 8
};

struct __declspec(uuid("d4708b2f-dc00-4ef6-9559-a5dd9e86047c"))
IGRFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOleFont,put=PutOleFont))
    IFontPtr OleFont;
    __declspec(property(get=GetUsingOleFont))
    IFontPtr UsingOleFont;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPoint,put=PutPoint))
    double Point;
    __declspec(property(get=GetCharset,put=PutCharset))
    long Charset;
    __declspec(property(get=GetWeight,put=PutWeight))
    long Weight;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    VARIANT_BOOL Strikethrough;

    //
    // Wrapper methods for error-handling
    //

    IFontPtr GetOleFont ( );
    void PutOleFont (
        struct IFont * pVal );
    IFontPtr GetUsingOleFont ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    double GetPoint ( );
    void PutPoint (
        double pVal );
    long GetCharset ( );
    void PutCharset (
        long pVal );
    long GetWeight ( );
    void PutWeight (
        long pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetStrikethrough ( );
    void PutStrikethrough (
        VARIANT_BOOL pVal );
    IGRFontPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OleFont (
        /*[out,retval]*/ struct IFont * * pVal ) = 0;
      virtual HRESULT __stdcall put_OleFont (
        /*[in]*/ struct IFont * pVal ) = 0;
      virtual HRESULT __stdcall get_UsingOleFont (
        /*[out,retval]*/ struct IFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Charset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Charset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Strikethrough (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Strikethrough (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
};

enum tagGRControlType
{
    grctStaticBox = 1,
    grctShapeBox = 2,
    grctSystemVarBox = 3,
    grctFieldBox = 4,
    grctSummaryBox = 5,
    grctRichTextBox = 6,
    grctPictureBox = 7,
    grctMemoBox = 8,
    grctSubReport = 9,
    grctLine = 10,
    grctChart = 11,
    grctBarcode = 12,
    grctFreeGrid = 13
};

enum tagGRBackStyle
{
    grbkNormal = 1,
    grbkTransparent = 2
};

struct __declspec(uuid("c9ef8e78-8e3a-428c-93c5-f52e146cb6ff"))
IGRPen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    GRPenStyle Style;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    GRPenStyle GetStyle ( );
    void PutStyle (
        GRPenStyle pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ GRPenStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ GRPenStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

enum tagGRPenStyle
{
    grpsSolid = 0,
    grpsDash = 1,
    grpsDot = 2,
    grpsDashDot = 3,
    grpsDashDotDot = 4
};

struct __declspec(uuid("fcdb44d7-4e0b-4eb6-a1e2-092689e8a482"))
IGRBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IGRPenPtr Pen;
    __declspec(property(get=GetStyles,put=PutStyles))
    GRBorderStyles Styles;
    __declspec(property(get=GetInnerIndent,put=PutInnerIndent))
    long InnerIndent;
    __declspec(property(get=GetInnerPen))
    IGRPenPtr InnerPen;
    __declspec(property(get=GetInnerStyles,put=PutInnerStyles))
    GRBorderStyles InnerStyles;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetShadowWidth,put=PutShadowWidth))
    long ShadowWidth;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;

    //
    // Wrapper methods for error-handling
    //

    IGRPenPtr GetPen ( );
    GRBorderStyles GetStyles ( );
    void PutStyles (
        GRBorderStyles pVal );
    long GetInnerIndent ( );
    void PutInnerIndent (
        long pVal );
    IGRPenPtr GetInnerPen ( );
    GRBorderStyles GetInnerStyles ( );
    void PutInnerStyles (
        GRBorderStyles pVal );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL pVal );
    long GetShadowWidth ( );
    void PutShadowWidth (
        long pVal );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_Styles (
        /*[out,retval]*/ GRBorderStyles * pVal ) = 0;
      virtual HRESULT __stdcall put_Styles (
        /*[in]*/ GRBorderStyles pVal ) = 0;
      virtual HRESULT __stdcall get_InnerIndent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerIndent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InnerPen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_InnerStyles (
        /*[out,retval]*/ GRBorderStyles * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerStyles (
        /*[in]*/ GRBorderStyles pVal ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

enum tagGRBorderStyle
{
    grbsDrawLeft = 1,
    grbsDrawTop = 2,
    grbsDrawRight = 4,
    grbsDrawBottom = 8
};

enum tagGRAnchorStyle
{
    grasLeft = 1,
    grasTop = 2,
    grasRight = 4,
    grasBottom = 8
};

enum tagGRDockStyle
{
    grdsNone = 0,
    grdsLeft = 1,
    grdsTop = 2,
    grdsRight = 3,
    grdsBottom = 4,
    grdsFill = 5
};

enum tagGRCenterStyle
{
    grcsNone = 0,
    grcsHorizontal = 1,
    grcsVertical = 2,
    grcsBoth = 3
};

enum tagGRAlignColumnSideStyle
{
    gracsLeft = 1,
    gracsRight = 2,
    gracsBoth = 3
};

enum tagGRShiftMode
{
    grsmNever = 0,
    grsmAlways = 1,
    grsmWhenOverLapped = 2
};

enum tagGRPrintType
{
    grptForm = 1,
    grptContent = 2
};

enum tagGRDisplayCursor
{
    grdcDefault = 0,
    grdcArrow = 1,
    grdcMagnify = 2,
    grdcFinger = 3,
    grdcAffirm = 4,
    grdcNegative = 5
};

enum tagGRTextAlign
{
    grtaTopLeft = 17,
    grtaTopCenter = 18,
    grtaTopRight = 20,
    grtaTopJustiy = 144,
    grtaBottomLeft = 65,
    grtaBottomCenter = 66,
    grtaBottomRight = 68,
    grtaBottomJustiy = 192,
    grtaMiddleLeft = 33,
    grtaMiddleCenter = 34,
    grtaMiddleRight = 36,
    grtaMiddleJustiy = 160
};

struct __declspec(uuid("4c56923d-4012-4d28-8283-1b294c5c2a06"))
IGRTextFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetEndEllipsis,put=PutEndEllipsis))
    VARIANT_BOOL EndEllipsis;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    GRTextAlign TextAlign;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    GRTextOrientation TextOrientation;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    double TextAngle;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    double CharacterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetFontWidthRatio,put=PutFontWidthRatio))
    double FontWidthRatio;
    __declspec(property(get=GetFirstCharIndent,put=PutFirstCharIndent))
    long FirstCharIndent;
    __declspec(property(get=GetParagraphSpacing,put=PutParagraphSpacing))
    double ParagraphSpacing;
    __declspec(property(get=GetHtmlTags,put=PutHtmlTags))
    VARIANT_BOOL HtmlTags;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEndEllipsis ( );
    void PutEndEllipsis (
        VARIANT_BOOL pVal );
    GRTextAlign GetTextAlign ( );
    void PutTextAlign (
        GRTextAlign pVal );
    GRTextOrientation GetTextOrientation ( );
    void PutTextOrientation (
        GRTextOrientation pVal );
    double GetTextAngle ( );
    void PutTextAngle (
        double pVal );
    double GetCharacterSpacing ( );
    void PutCharacterSpacing (
        double pVal );
    double GetLineSpacing ( );
    void PutLineSpacing (
        double pVal );
    double GetFontWidthRatio ( );
    void PutFontWidthRatio (
        double pVal );
    long GetFirstCharIndent ( );
    void PutFirstCharIndent (
        long pVal );
    double GetParagraphSpacing ( );
    void PutParagraphSpacing (
        double pVal );
    VARIANT_BOOL GetHtmlTags ( );
    void PutHtmlTags (
        VARIANT_BOOL pVal );
    IGRTextFormatPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EndEllipsis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EndEllipsis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ GRTextAlign * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ GRTextAlign pVal ) = 0;
      virtual HRESULT __stdcall get_TextOrientation (
        /*[out,retval]*/ GRTextOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOrientation (
        /*[in]*/ GRTextOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CharacterSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CharacterSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FontWidthRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FontWidthRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FirstCharIndent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstCharIndent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ParagraphSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParagraphSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HtmlTags (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HtmlTags (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IGRTextFormat * * pVal ) = 0;
};

enum tagGRTextOrientation
{
    grtoDefault = 0,
    grtoU2DL2R0 = 5,
    grtoD2UL2R1 = 22,
    grtoU2DR2L0 = 9,
    grtoU2DR2L1 = 25,
    grtoInvert = 58,
    grtoL2RD2U0 = 38,
    grtoL2RD2U1 = 54
};

enum tagGRFieldType
{
    grftString = 1,
    grftInteger = 2,
    grftFloat = 3,
    grftCurrency = 4,
    grftBoolean = 5,
    grftDateTime = 6,
    grftBinary = 7
};

struct __declspec(uuid("1d1e02b3-e1bd-4c84-95f8-bb19bbb481f0"))
IGRChartAxis : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetSpace,put=PutSpace))
    double Space;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    double TextAngle;
    __declspec(property(get=GetTextVisible,put=PutTextVisible))
    VARIANT_BOOL TextVisible;
    __declspec(property(get=GetTextFormat,put=PutTextFormat))
    _bstr_t TextFormat;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetLineVisible,put=PutLineVisible))
    VARIANT_BOOL LineVisible;
    __declspec(property(get=GetCoordLineVisible,put=PutCoordLineVisible))
    VARIANT_BOOL CoordLineVisible;
    __declspec(property(get=GetLinePen))
    IGRPenPtr LinePen;
    __declspec(property(get=GetCoordLinePen))
    IGRPenPtr CoordLinePen;
    __declspec(property(get=GetMarginBeginWeight,put=PutMarginBeginWeight))
    long MarginBeginWeight;
    __declspec(property(get=GetMarginEndWeight,put=PutMarginEndWeight))
    long MarginEndWeight;
    __declspec(property(get=GetScaleCount))
    long ScaleCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    double GetMax ( );
    void PutMax (
        double pVal );
    double GetMin ( );
    void PutMin (
        double pVal );
    double GetSpace ( );
    void PutSpace (
        double pVal );
    double GetTextAngle ( );
    void PutTextAngle (
        double pVal );
    VARIANT_BOOL GetTextVisible ( );
    void PutTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetTextFormat ( );
    void PutTextFormat (
        _bstr_t pVal );
    VARIANT_BOOL GetLineVisible ( );
    void PutLineVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCoordLineVisible ( );
    void PutCoordLineVisible (
        VARIANT_BOOL pVal );
    IGRPenPtr GetLinePen ( );
    IGRPenPtr GetCoordLinePen ( );
    long GetMarginBeginWeight ( );
    void PutMarginBeginWeight (
        long pVal );
    long GetMarginEndWeight ( );
    void PutMarginEndWeight (
        long pVal );
    long GetScaleCount ( );
    HRESULT AddCustomScale (
        double ScaleVal,
        _bstr_t Text );
    HRESULT EmptyCustomScale ( );
    _bstr_t GetScaleText (
        long Index );
    double GetScaleValue (
        long Index );
    HRESULT AddCustomCoordLine (
        double ScaleVal,
        _bstr_t Text,
        double LineWidth,
        OLE_COLOR LineColor,
        GRPenStyle LineStyle );
    HRESULT EmptyCustomCoordLine ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Space (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Space (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextFormat (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFormat (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CoordLineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordLineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_CoordLinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_MarginBeginWeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MarginBeginWeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MarginEndWeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MarginEndWeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddCustomScale (
        /*[in]*/ double ScaleVal,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_EmptyCustomScale ( ) = 0;
      virtual HRESULT __stdcall raw_GetScaleText (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetScaleValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddCustomCoordLine (
        /*[in]*/ double ScaleVal,
        /*[in]*/ BSTR Text,
        /*[in]*/ double LineWidth,
        /*[in]*/ OLE_COLOR LineColor,
        /*[in]*/ GRPenStyle LineStyle ) = 0;
      virtual HRESULT __stdcall raw_EmptyCustomCoordLine ( ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

enum tagGRLockType
{
    grltNone = 0,
    grltInherited = 1,
    grltObject = 2,
    grltData = 3,
    grltDataAction = 4,
    grltAll = 5
};

enum tagGRChartType
{
    grctBarChart = 1,
    grctPieChart = 2,
    grctLineChart = 3,
    grctStackedBarChart = 4,
    grctXYScatterChart = 5,
    grctXYLineChart = 6,
    grctCurveLineChart = 7,
    grctXYCurveLineChart = 8,
    grctBubble = 9,
    grctStackedBar100Chart = 10,
    grctColumnChart = 11,
    grctStackedColumnChart = 12,
    grctStackedColumn100Chart = 13,
    grctStepBarChart = 4
};

struct __declspec(uuid("ca0a5cbe-7eec-44fd-abfd-fc65bfed8618"))
IGRChartSeries : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetChartType,put=PutChartType))
    GRChartType ChartType;
    __declspec(property(get=GetByY2Axis,put=PutByY2Axis))
    VARIANT_BOOL ByY2Axis;
    __declspec(property(get=GetSeriesName,put=PutSeriesName))
    _bstr_t SeriesName;
    __declspec(property(get=GetXValueField,put=PutXValueField))
    _bstr_t XValueField;
    __declspec(property(get=GetYValueField,put=PutYValueField))
    _bstr_t YValueField;
    __declspec(property(get=GetZValueField,put=PutZValueField))
    _bstr_t ZValueField;
    __declspec(property(get=GetLabelText,put=PutLabelText))
    _bstr_t LabelText;
    __declspec(property(get=GetLabelTextAngle,put=PutLabelTextAngle))
    double LabelTextAngle;
    __declspec(property(get=GetLabelAsGroup,put=PutLabelAsGroup))
    VARIANT_BOOL LabelAsGroup;
    __declspec(property(get=GetLabelInBar,put=PutLabelInBar))
    VARIANT_BOOL LabelInBar;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;
    __declspec(property(get=GetBorderPen))
    IGRPenPtr BorderPen;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    OLE_COLOR FillColor;
    __declspec(property(get=GetFillColorAuto,put=PutFillColorAuto))
    VARIANT_BOOL FillColorAuto;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    GRPointMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerColor,put=PutMarkerColor))
    OLE_COLOR MarkerColor;
    __declspec(property(get=GetMarkerColorAuto,put=PutMarkerColorAuto))
    VARIANT_BOOL MarkerColorAuto;
    __declspec(property(get=GetMarkerPen))
    IGRPenPtr MarkerPen;
    __declspec(property(get=GetMarkerLegendShow,put=PutMarkerLegendShow))
    VARIANT_BOOL MarkerLegendShow;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRChartType GetChartType ( );
    void PutChartType (
        GRChartType pVal );
    VARIANT_BOOL GetByY2Axis ( );
    void PutByY2Axis (
        VARIANT_BOOL pVal );
    _bstr_t GetSeriesName ( );
    void PutSeriesName (
        _bstr_t pVal );
    _bstr_t GetXValueField ( );
    void PutXValueField (
        _bstr_t pVal );
    _bstr_t GetYValueField ( );
    void PutYValueField (
        _bstr_t pVal );
    _bstr_t GetZValueField ( );
    void PutZValueField (
        _bstr_t pVal );
    _bstr_t GetLabelText ( );
    void PutLabelText (
        _bstr_t pVal );
    double GetLabelTextAngle ( );
    void PutLabelTextAngle (
        double pVal );
    VARIANT_BOOL GetLabelAsGroup ( );
    void PutLabelAsGroup (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLabelInBar ( );
    void PutLabelInBar (
        VARIANT_BOOL pVal );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t pVal );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t pVal );
    IGRPenPtr GetBorderPen ( );
    OLE_COLOR GetFillColor ( );
    void PutFillColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillColorAuto ( );
    void PutFillColorAuto (
        VARIANT_BOOL pVal );
    GRPointMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        GRPointMarkerStyle pVal );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long pVal );
    OLE_COLOR GetMarkerColor ( );
    void PutMarkerColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetMarkerColorAuto ( );
    void PutMarkerColorAuto (
        VARIANT_BOOL pVal );
    IGRPenPtr GetMarkerPen ( );
    VARIANT_BOOL GetMarkerLegendShow ( );
    void PutMarkerLegendShow (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ GRChartType * pVal ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ GRChartType pVal ) = 0;
      virtual HRESULT __stdcall get_ByY2Axis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ByY2Axis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_XValueField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_XValueField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_YValueField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_YValueField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ZValueField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ZValueField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelTextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelTextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LabelAsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelAsGroup (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelInBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelInBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TooltipText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TooltipText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderPen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillColorAuto (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColorAuto (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ GRPointMarkerStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ GRPointMarkerStyle pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColorAuto (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerColorAuto (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerPen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerLegendShow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerLegendShow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("a1c0e90d-b75a-4ffd-a542-54c9e44785a6"))
IGRChartSeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRChartSeriesPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRChartSeriesPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRChartSeriesPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRChartSeriesPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRChartSeries * * ppChartSeries ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRChartSeries * * ppChartSeries ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRChartSeries * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

enum tagGRPointMarkerStyle
{
    grpmsNone = -1,
    grpmsSquare = 0,
    grpmsSquareCheck = 1,
    grpmsSquareCross = 2,
    grpmsCircle = 3,
    grpmsCirclePoint = 4,
    grpmsCircleCross = 5,
    grpmsDimond = 6,
    grpmsTriangle = 7,
    grpmsCross = 8,
    grpmsCross4 = 9,
    grpmsStar4 = 10,
    grpmsStar5 = 11,
    grpmsStar6 = 12,
    grpmsStar10 = 13
};

enum tagGRShapeBoxType
{
    grsbtCircle = 1,
    grsbtEllipse = 2,
    grsbtRectangle = 3,
    grsbtRoundRect = 4,
    grsbtRoundSquare = 5,
    grsbtSquare = 6,
    grsbtLine = 7
};

enum tagGRLineType
{
    grltTopLeftToBottomRight = 0,
    grltBottomLeftToTopRight = 1,
    grltTopLeftToTopRight = 2,
    grltMiddleLeftToMiddleRight = 3,
    grltBottomLeftToBottomRight = 4,
    grltTopLeftToBottomLeft = 5,
    grltTopCenterToBottomCenter = 6,
    grltTopRightToBottomRight = 7
};

enum tagGRSystemVarType
{
    grsvCurrentDateTime = 1,
    grsvPageCount = 2,
    grsvPageNumber = 3,
    grsvRecordNo = 4,
    grsvRowNo = 8,
    grsvRecordCount = 19,
    grsvGroupNo = 20,
    grsvGroupCount = 21,
    grsvGroupRowNo = 22,
    grsvGroupRowCount = 23,
    grsvGroupPageNo = 24,
    grsvGroupPageCount = 25,
    grsvGroupOrderNo = 9,
    grsvGroup1RowNo = 5,
    grsvGroup2RowNo = 6,
    grsvGroup3RowNo = 7,
    grsvGroup1PageNumber = 10,
    grsvGroup2PageNumber = 11,
    grsvGroup3PageNumber = 12,
    grsvGroup1PageCount = 13,
    grsvGroup2PageCount = 14,
    grsvGroup3PageCount = 15,
    grsvGroup1OrderNo = 16,
    grsvGroup2OrderNo = 17,
    grsvGroup3OrderNo = 18
};

enum tagGRSummaryFun
{
    grsfSum = 1,
    grsfAvg = 2,
    grsfCount = 3,
    grsfMin = 4,
    grsfMax = 5,
    grsfVar = 6,
    grsfVarP = 7,
    grsfStdDev = 8,
    grsfStdDevP = 9,
    grsfAveDev = 10,
    grsfDevSq = 11,
    grsfCountBlank = 12,
    grsfCountA = 13,
    grsfDistinct = 14,
    grsfAvgA = 15,
    grsfMinN = 16,
    grsfMaxN = 17,
    grsfStrMin = 18,
    grsfStrMax = 19,
    grsfVarA = 20,
    grsfVarPA = 21,
    grsfStdDevA = 22,
    grsfStdDevPA = 23,
    grsfAveDevA = 24,
    grsfDevSqA = 25,
    grsfSumAbs = 26,
    grsfSumAcc = 27,
    grsfGroupSumAcc = 28
};

enum tagGRPictureAlignment
{
    grpaTopLeft = 1,
    grpaTopRight = 2,
    grpaCenter = 3,
    grpaBottomLeft = 4,
    grpaBottomRight = 5
};

enum tagGRPictureSizeMode
{
    grpsmClip = 1,
    grpsmStretch = 2,
    grpsmZoom = 3,
    grpsmEnsureFullView = 4,
    grpsmTile = 5
};

enum tagGRPictureTransparentMode
{
    grptmNone = 0,
    grptmOverlying = 1,
    grptmBackground = 2
};

enum tagGRPictureRotateMode
{
    grprmNone = 0,
    grprmLeft = 1,
    grprmRight = 2,
    grprmFlip = 3,
    grprmMirror = 4
};

enum tagGRPictureType
{
    grptUnknown = 0,
    grptBMP = 1,
    grptGIF = 2,
    grptJPEG = 3,
    grptPNG = 4,
    grptICON = 5,
    grptTIFF = 6,
    grptWMF = 10,
    grptEMF = -1
};

enum tagGRSystemImage
{
    grsiChecked = -1,
    grsiUnchecked = -2,
    grsi3DChecked = -3,
    grsi3DUnchecked = -4,
    grsiAffirm = -5,
    grsiNegative = -6,
    grsiArrowDown = -7,
    grsiArrowUp = -8
};

struct __declspec(uuid("23af6c8a-0f15-45e3-a10d-9373bb15ac86"))
IGRParameter : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetDataType,put=PutDataType))
    GRParameterDataType DataType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetAsInteger,put=PutAsInteger))
    long AsInteger;
    __declspec(property(get=GetAsFloat,put=PutAsFloat))
    double AsFloat;
    __declspec(property(get=GetAsString,put=PutAsString))
    _bstr_t AsString;
    __declspec(property(get=GetAsBoolean,put=PutAsBoolean))
    VARIANT_BOOL AsBoolean;
    __declspec(property(get=GetAsDateTime,put=PutAsDateTime))
    DATE AsDateTime;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetDisplayText))
    _bstr_t DisplayText;
    __declspec(property(get=GetIsNull))
    VARIANT_BOOL IsNull;

    //
    // Wrapper methods for error-handling
    //

    GRParameterDataType GetDataType ( );
    void PutDataType (
        GRParameterDataType pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pVal );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    long GetAsInteger ( );
    void PutAsInteger (
        long pVal );
    double GetAsFloat ( );
    void PutAsFloat (
        double pVal );
    _bstr_t GetAsString ( );
    void PutAsString (
        _bstr_t pVal );
    VARIANT_BOOL GetAsBoolean ( );
    void PutAsBoolean (
        VARIANT_BOOL pVal );
    DATE GetAsDateTime ( );
    void PutAsDateTime (
        DATE pVal );
    _bstr_t GetDisplayText ( );
    VARIANT_BOOL GetIsNull ( );
    HRESULT Clear ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ GRParameterDataType * pVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ GRParameterDataType pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsInteger (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AsInteger (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AsFloat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AsFloat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AsString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsBoolean (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AsBoolean (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AsDateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_AsDateTime (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsNull (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("d40307c2-9342-4c0d-9734-a103418186fe"))
IGRParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRParameterPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRParameterPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRParameterPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRParameterPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRParameter * * ppParameter ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRParameter * * ppParameter ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRParameter * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

enum tagGRParameterDataType
{
    grptString = 1,
    grptInteger = 2,
    grptFloat = 3,
    grptBoolean = 5,
    grptDateTime = 6
};

enum tagGRNewPageStyle
{
    grnpsNone = 1,
    grnpsBefore = 2,
    grnpsAfter = 3,
    grnpsBeforeAfter = 4
};

enum tagGRPrintRangeType
{
    grprtAllPages = 1,
    grprtCurrentPage = 2,
    grprtSelectionPages = 3
};

enum tagGRPrintPageType
{
    grpptAllSelectionPages = 1,
    grpptOddSelectionPages = 2,
    grpptEvenSelectionPages = 3
};

enum tagGRDuplexKind
{
    grdkDefault = 0,
    grdkSimplex = 1,
    grdkHorizontal = 3,
    grdkVertical = 2
};

enum tagGRPaperOrientation
{
    grpoDefault = 0,
    grpoPortrait = 1,
    grpoLandscape = 2
};

enum tagGRPaperKind
{
    grpkDefault = 255,
    grpkCustom = 256,
    grpkLetter = 1,
    grpkLegal = 5,
    grpk10X14 = 16,
    grpk11X17 = 17,
    grpk12X11 = 90,
    grpkA3 = 8,
    grpkA4 = 9,
    grpkA4Small = 10,
    grpkA5 = 11,
    grpkA6 = 70,
    grpkB4 = 12,
    grpkB5 = 13,
    grpkB6 = 88,
    grpkCSheet = 24,
    grpkDSheet = 25,
    grpkEnvelope9 = 19,
    grpkEnvelope10 = 20,
    grpkEnvelope11 = 21,
    grpkEnvelope12 = 22,
    grpkEnvelope14 = 23,
    grpkEnvelopeC5 = 28,
    grpkEnvelopeC3 = 29,
    grpkEnvelopeC4 = 30,
    grpkEnvelopeC6 = 31,
    grpkEnvelopeC65 = 32,
    grpkEnvelopeB4 = 33,
    grpkEnvelopeB5 = 34,
    grpkEnvelopeB6 = 35,
    grpkEnvelopeDL = 27,
    grpkEnvelopeItaly = 36,
    grpkEnvelopeMonarch = 37,
    grpkEnvelopePersonal = 38,
    grpkESheet = 26,
    grpkExecutive = 7,
    grpkFanfold = 39,
    grpkFolio = 14,
    grpkLedger = 4,
    grpkLetterSmall = 2,
    grpkNote = 18,
    grpkP16K = 93,
    grpkP32K = 94,
    grpkQuarto = 15,
    grpkStatement = 6,
    grpkTabloid = 3
};

enum tagGRPaperSourceKind
{
    grpskDefault = 0,
    grpskAutomaticFeed = 7,
    grpskCassette = 14,
    grpskCustom = 256,
    grpskEnvelope = 5,
    grpskFormSource = 15,
    grpskLargeCapacity = 11,
    grpskLargeFormat = 10,
    grpskLower = 2,
    grpskManual = 4,
    grpskManualFeed = 6,
    grpskMiddle = 3,
    grpskSmallFormat = 9,
    grpskTractorFeed = 8,
    grpskUpper = 1
};

enum tagGRSheetPages
{
    grsp1Pages = 1,
    grsp2Pages = 2,
    grsp4Pages = 4,
    grsp6Pages = 6,
    grsp8Pages = 8,
    grsp16Pages = 16
};

struct __declspec(uuid("17b23325-7316-4098-9fe3-b5a1c24db296"))
IGRPrinter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintRangeType,put=PutPrintRangeType))
    GRPrintRangeType PrintRangeType;
    __declspec(property(get=GetPrintPageType,put=PutPrintPageType))
    GRPrintPageType PrintPageType;
    __declspec(property(get=GetSelectionPrintPages,put=PutSelectionPrintPages))
    _bstr_t SelectionPrintPages;
    __declspec(property(get=GetPageCount,put=PutPageCount))
    long PageCount;
    __declspec(property(get=GetCurPageNo,put=PutCurPageNo))
    long CurPageNo;
    __declspec(property(get=GetCopies,put=PutCopies))
    long Copies;
    __declspec(property(get=GetCollate,put=PutCollate))
    VARIANT_BOOL Collate;
    __declspec(property(get=GetDuplex,put=PutDuplex))
    GRDuplexKind Duplex;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPaperWidth,put=PutPaperWidth))
    double PaperWidth;
    __declspec(property(get=GetPaperLength,put=PutPaperLength))
    double PaperLength;
    __declspec(property(get=GetPaperOrientation,put=PutPaperOrientation))
    GRPaperOrientation PaperOrientation;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    long PaperSize;
    __declspec(property(get=GetPaperKind,put=PutPaperKind))
    GRPaperKind PaperKind;
    __declspec(property(get=GetPaperName,put=PutPaperName))
    _bstr_t PaperName;
    __declspec(property(get=GetPrinterName,put=PutPrinterName))
    _bstr_t PrinterName;
    __declspec(property(get=GetPaperSource,put=PutPaperSource))
    GRPaperSourceKind PaperSource;
    __declspec(property(get=GetPrintOffsetX,put=PutPrintOffsetX))
    double PrintOffsetX;
    __declspec(property(get=GetPrintOffsetY,put=PutPrintOffsetY))
    double PrintOffsetY;
    __declspec(property(get=GetPrintOffsetSaveToLocal,put=PutPrintOffsetSaveToLocal))
    VARIANT_BOOL PrintOffsetSaveToLocal;
    __declspec(property(get=GetSheetPages,put=PutSheetPages))
    GRSheetPages SheetPages;
    __declspec(property(get=GetSheetPaperSize,put=PutSheetPaperSize))
    long SheetPaperSize;
    __declspec(property(get=GetCanCollate))
    VARIANT_BOOL CanCollate;
    __declspec(property(get=GetCanDuplex))
    VARIANT_BOOL CanDuplex;
    __declspec(property(get=GetOnline))
    VARIANT_BOOL Online;
    __declspec(property(get=GetSupportCustomPaper))
    VARIANT_BOOL SupportCustomPaper;
    __declspec(property(get=GetDesignLeftMargin,put=PutDesignLeftMargin))
    double DesignLeftMargin;
    __declspec(property(get=GetDesignRightMargin,put=PutDesignRightMargin))
    double DesignRightMargin;
    __declspec(property(get=GetDesignTopMargin,put=PutDesignTopMargin))
    double DesignTopMargin;
    __declspec(property(get=GetDesignBottomMargin,put=PutDesignBottomMargin))
    double DesignBottomMargin;
    __declspec(property(get=GetDesignPaperWidth,put=PutDesignPaperWidth))
    double DesignPaperWidth;
    __declspec(property(get=GetDesignPaperLength,put=PutDesignPaperLength))
    double DesignPaperLength;
    __declspec(property(get=GetDesignPaperOrientation,put=PutDesignPaperOrientation))
    GRPaperOrientation DesignPaperOrientation;
    __declspec(property(get=GetDesignPaperSource,put=PutDesignPaperSource))
    GRPaperSourceKind DesignPaperSource;
    __declspec(property(get=GetDesignPrintCollate,put=PutDesignPrintCollate))
    GRCollateKind DesignPrintCollate;
    __declspec(property(get=GetDesignPrintDuplex,put=PutDesignPrintDuplex))
    GRDuplexKind DesignPrintDuplex;
    __declspec(property(get=GetDesignPaperName,put=PutDesignPaperName))
    _bstr_t DesignPaperName;
    __declspec(property(get=GetDesignPaperSize,put=PutDesignPaperSize))
    long DesignPaperSize;
    __declspec(property(get=GetDesignPaperKind,put=PutDesignPaperKind))
    GRPaperKind DesignPaperKind;
    __declspec(property(get=GetDesignPrinterName,put=PutDesignPrinterName))
    _bstr_t DesignPrinterName;

    //
    // Wrapper methods for error-handling
    //

    GRPrintRangeType GetPrintRangeType ( );
    void PutPrintRangeType (
        GRPrintRangeType pVal );
    GRPrintPageType GetPrintPageType ( );
    void PutPrintPageType (
        GRPrintPageType pVal );
    _bstr_t GetSelectionPrintPages ( );
    void PutSelectionPrintPages (
        _bstr_t pVal );
    long GetPageCount ( );
    void PutPageCount (
        long pVal );
    long GetCurPageNo ( );
    void PutCurPageNo (
        long pVal );
    long GetCopies ( );
    void PutCopies (
        long pVal );
    VARIANT_BOOL GetCollate ( );
    void PutCollate (
        VARIANT_BOOL pVal );
    GRDuplexKind GetDuplex ( );
    void PutDuplex (
        GRDuplexKind pVal );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double pVal );
    double GetRightMargin ( );
    void PutRightMargin (
        double pVal );
    double GetTopMargin ( );
    void PutTopMargin (
        double pVal );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double pVal );
    double GetPaperWidth ( );
    void PutPaperWidth (
        double pVal );
    double GetPaperLength ( );
    void PutPaperLength (
        double pVal );
    GRPaperOrientation GetPaperOrientation ( );
    void PutPaperOrientation (
        GRPaperOrientation pVal );
    long GetPaperSize ( );
    void PutPaperSize (
        long pVal );
    GRPaperKind GetPaperKind ( );
    void PutPaperKind (
        GRPaperKind pVal );
    _bstr_t GetPaperName ( );
    void PutPaperName (
        _bstr_t pVal );
    _bstr_t GetPrinterName ( );
    void PutPrinterName (
        _bstr_t pVal );
    GRPaperSourceKind GetPaperSource ( );
    void PutPaperSource (
        GRPaperSourceKind pVal );
    double GetPrintOffsetX ( );
    void PutPrintOffsetX (
        double pVal );
    double GetPrintOffsetY ( );
    void PutPrintOffsetY (
        double pVal );
    VARIANT_BOOL GetPrintOffsetSaveToLocal ( );
    void PutPrintOffsetSaveToLocal (
        VARIANT_BOOL pVal );
    GRSheetPages GetSheetPages ( );
    void PutSheetPages (
        GRSheetPages pVal );
    long GetSheetPaperSize ( );
    void PutSheetPaperSize (
        long pVal );
    VARIANT_BOOL GetCanCollate ( );
    VARIANT_BOOL GetCanDuplex ( );
    VARIANT_BOOL GetOnline ( );
    VARIANT_BOOL GetSupportCustomPaper ( );
    double GetDesignLeftMargin ( );
    void PutDesignLeftMargin (
        double pVal );
    double GetDesignRightMargin ( );
    void PutDesignRightMargin (
        double pVal );
    double GetDesignTopMargin ( );
    void PutDesignTopMargin (
        double pVal );
    double GetDesignBottomMargin ( );
    void PutDesignBottomMargin (
        double pVal );
    double GetDesignPaperWidth ( );
    void PutDesignPaperWidth (
        double pVal );
    double GetDesignPaperLength ( );
    void PutDesignPaperLength (
        double pVal );
    GRPaperOrientation GetDesignPaperOrientation ( );
    void PutDesignPaperOrientation (
        GRPaperOrientation pVal );
    GRPaperSourceKind GetDesignPaperSource ( );
    void PutDesignPaperSource (
        GRPaperSourceKind pVal );
    GRCollateKind GetDesignPrintCollate ( );
    void PutDesignPrintCollate (
        GRCollateKind pVal );
    GRDuplexKind GetDesignPrintDuplex ( );
    void PutDesignPrintDuplex (
        GRDuplexKind pVal );
    _bstr_t GetDesignPaperName ( );
    void PutDesignPaperName (
        _bstr_t pVal );
    long GetDesignPaperSize ( );
    void PutDesignPaperSize (
        long pVal );
    GRPaperKind GetDesignPaperKind ( );
    void PutDesignPaperKind (
        GRPaperKind pVal );
    _bstr_t GetDesignPrinterName ( );
    void PutDesignPrinterName (
        _bstr_t pVal );
    VARIANT_BOOL PrintDialog ( );
    VARIANT_BOOL PrinterSetupDialog ( );
    VARIANT_BOOL PageSetupDialog ( );
    HRESULT _OpenPrinter ( );
    HRESULT _ClosePrinter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PrintRangeType (
        /*[out,retval]*/ GRPrintRangeType * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintRangeType (
        /*[in]*/ GRPrintRangeType pVal ) = 0;
      virtual HRESULT __stdcall get_PrintPageType (
        /*[out,retval]*/ GRPrintPageType * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintPageType (
        /*[in]*/ GRPrintPageType pVal ) = 0;
      virtual HRESULT __stdcall get_SelectionPrintPages (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SelectionPrintPages (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PageCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CurPageNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CurPageNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Copies (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Copies (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duplex (
        /*[out,retval]*/ GRDuplexKind * pVal ) = 0;
      virtual HRESULT __stdcall put_Duplex (
        /*[in]*/ GRDuplexKind pVal ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperOrientation (
        /*[out,retval]*/ GRPaperOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperOrientation (
        /*[in]*/ GRPaperOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaperKind (
        /*[out,retval]*/ GRPaperKind * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperKind (
        /*[in]*/ GRPaperKind pVal ) = 0;
      virtual HRESULT __stdcall get_PaperName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrinterName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrinterName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaperSource (
        /*[out,retval]*/ GRPaperSourceKind * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperSource (
        /*[in]*/ GRPaperSourceKind pVal ) = 0;
      virtual HRESULT __stdcall get_PrintOffsetX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintOffsetX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PrintOffsetY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintOffsetY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PrintOffsetSaveToLocal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintOffsetSaveToLocal (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SheetPages (
        /*[out,retval]*/ GRSheetPages * pVal ) = 0;
      virtual HRESULT __stdcall put_SheetPages (
        /*[in]*/ GRSheetPages pVal ) = 0;
      virtual HRESULT __stdcall get_SheetPaperSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SheetPaperSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CanCollate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanDuplex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Online (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SupportCustomPaper (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DesignLeftMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignLeftMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignRightMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignRightMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignTopMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignTopMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignBottomMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignBottomMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperOrientation (
        /*[out,retval]*/ GRPaperOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperOrientation (
        /*[in]*/ GRPaperOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperSource (
        /*[out,retval]*/ GRPaperSourceKind * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperSource (
        /*[in]*/ GRPaperSourceKind pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPrintCollate (
        /*[out,retval]*/ GRCollateKind * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPrintCollate (
        /*[in]*/ GRCollateKind pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPrintDuplex (
        /*[out,retval]*/ GRDuplexKind * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPrintDuplex (
        /*[in]*/ GRDuplexKind pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperKind (
        /*[out,retval]*/ GRPaperKind * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperKind (
        /*[in]*/ GRPaperKind pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPrinterName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPrinterName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PrintDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_PrinterSetupDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_PageSetupDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw__OpenPrinter ( ) = 0;
      virtual HRESULT __stdcall raw__ClosePrinter ( ) = 0;
};

enum tagGRCollateKind
{
    grckDefault = 0,
    grckCollate = 1,
    grckNotCollate = 2
};

struct __declspec(uuid("95eb847d-6550-4fc7-a123-de050e0328aa"))
IGRDateTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetYear))
    long Year;
    __declspec(property(get=GetMonth))
    long Month;
    __declspec(property(get=GetDay))
    long Day;
    __declspec(property(get=GetHour))
    long Hour;
    __declspec(property(get=GetMinute))
    long Minute;
    __declspec(property(get=GetSecond))
    long Second;
    __declspec(property(get=GetDayOfWeek))
    long DayOfWeek;
    __declspec(property(get=GetDayOfYear))
    long DayOfYear;
    __declspec(property(get=GetAsFloat,put=PutAsFloat))
    double AsFloat;

    //
    // Wrapper methods for error-handling
    //

    long GetYear ( );
    long GetMonth ( );
    long GetDay ( );
    long GetHour ( );
    long GetMinute ( );
    long GetSecond ( );
    long GetDayOfWeek ( );
    long GetDayOfYear ( );
    double GetAsFloat ( );
    void PutAsFloat (
        double pVal );
    HRESULT ValueFromDate (
        long Year,
        long Month,
        long Day );
    HRESULT ValueFromDateTime (
        long Year,
        long Month,
        long Day,
        long Hour,
        long Minute,
        long Second );
    _bstr_t Format (
        _bstr_t Format );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Year (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Month (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Day (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Hour (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Minute (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Second (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DayOfWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DayOfYear (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AsFloat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AsFloat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ValueFromDate (
        /*[in]*/ long Year,
        /*[in]*/ long Month,
        /*[in]*/ long Day ) = 0;
      virtual HRESULT __stdcall raw_ValueFromDateTime (
        /*[in]*/ long Year,
        /*[in]*/ long Month,
        /*[in]*/ long Day,
        /*[in]*/ long Hour,
        /*[in]*/ long Minute,
        /*[in]*/ long Second ) = 0;
      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ BSTR Format,
        /*[out,retval]*/ BSTR * Text ) = 0;
};

enum tagGRStorageFormat
{
    grsfText = 1,
    grsfBinary = 2,
    grsfBinBase64 = 3,
    grsfXML = 4
};

enum tagGRTextEncodeMode
{
    grtemAnsi = 1,
    grtemUTF8 = 2,
    grtemUnicode = 3,
    grtemUTF8Pure = 4,
    grtemUTF8WithHead = 2
};

enum tagGRUnit
{
    grmuCm = 1,
    grmuInch = 2
};

enum tagGRScriptType
{
    grstJScript = 1,
    grstVBScript = 2
};

enum tagGRReportDisplayMode
{
    grrdmScreenView = 1,
    grrdmPrintGenerate = 2,
    grrdmIdle = 3
};

enum tagGRRepeatStyle
{
    grrsNone = 1,
    grrsOnPage = 2,
    grrsOnPageColumn = 4,
    grrsOnGroupHeader = 8,
    grrsOnGroupHeaderPage = 10
};

enum tagGRPrintGenerateStyle
{
    grpgsOnlyForm = 1,
    grpgsOnlyContent = 2,
    grpgsAll = 3,
    grpgsPreviewAll = 4
};

enum tagGRExportType
{
    gretXLS = 1,
    gretTXT = 2,
    gretHTM = 3,
    gretRTF = 4,
    gretPDF = 5,
    gretCSV = 6,
    gretIMG = 7
};

struct __declspec(uuid("5bcb27bb-9750-4b28-9384-77801fb0d4eb"))
IGRSharePrintSetupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPaperWidth,put=PutPaperWidth))
    double PaperWidth;
    __declspec(property(get=GetPaperLength,put=PutPaperLength))
    double PaperLength;
    __declspec(property(get=GetPaperOrientation,put=PutPaperOrientation))
    GRPaperOrientation PaperOrientation;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    long PaperSize;
    __declspec(property(get=GetPaperName,put=PutPaperName))
    _bstr_t PaperName;
    __declspec(property(get=GetPrinterName,put=PutPrinterName))
    _bstr_t PrinterName;
    __declspec(property(get=GetPaperSource,put=PutPaperSource))
    GRPaperSourceKind PaperSource;
    __declspec(property(get=GetUnit,put=PutUnit))
    GRUnit Unit;
    __declspec(property(get=GetPaperKind,put=PutPaperKind))
    GRPaperKind PaperKind;

    //
    // Wrapper methods for error-handling
    //

    double GetLeftMargin ( );
    void PutLeftMargin (
        double pVal );
    double GetRightMargin ( );
    void PutRightMargin (
        double pVal );
    double GetTopMargin ( );
    void PutTopMargin (
        double pVal );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double pVal );
    double GetPaperWidth ( );
    void PutPaperWidth (
        double pVal );
    double GetPaperLength ( );
    void PutPaperLength (
        double pVal );
    GRPaperOrientation GetPaperOrientation ( );
    void PutPaperOrientation (
        GRPaperOrientation pVal );
    long GetPaperSize ( );
    void PutPaperSize (
        long pVal );
    _bstr_t GetPaperName ( );
    void PutPaperName (
        _bstr_t pVal );
    _bstr_t GetPrinterName ( );
    void PutPrinterName (
        _bstr_t pVal );
    GRPaperSourceKind GetPaperSource ( );
    void PutPaperSource (
        GRPaperSourceKind pVal );
    GRUnit GetUnit ( );
    void PutUnit (
        GRUnit pVal );
    GRPaperKind GetPaperKind ( );
    void PutPaperKind (
        GRPaperKind pVal );
    VARIANT_BOOL PrintDialog ( );
    VARIANT_BOOL PrinterSetupDialog ( );
    VARIANT_BOOL PageSetupDialog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaperOrientation (
        /*[out,retval]*/ GRPaperOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperOrientation (
        /*[in]*/ GRPaperOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaperName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrinterName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrinterName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PaperSource (
        /*[out,retval]*/ GRPaperSourceKind * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperSource (
        /*[in]*/ GRPaperSourceKind pVal ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ GRUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_Unit (
        /*[in]*/ GRUnit pVal ) = 0;
      virtual HRESULT __stdcall get_PaperKind (
        /*[out,retval]*/ GRPaperKind * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperKind (
        /*[in]*/ GRPaperKind pVal ) = 0;
      virtual HRESULT __stdcall raw_PrintDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_PrinterSetupDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_PageSetupDialog (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
};

enum tagGRSharePrintSetupOption
{
    grspsoPaperMargin = 1,
    grspsoPaperKind = 2,
    grspsoPaperOrientation = 4,
    grspsoPaperSource = 8,
    grspsoSelectedPrinter = 16
};

enum tagGRPDFDocPermission
{
    grpdpPrint = 1,
    grpdpEditAll = 2,
    grpdpCopy = 3,
    grpdpEdit = 4
};

enum tagGRExportImageType
{
    greitBMP = 1,
    greitPNG = 2,
    greitJPEG = 3,
    greitGIF = 4,
    greitTIFF = 5
};

enum tagGRDocType
{
    grdtObject = 1,
    grdtJSON = 2
};

enum tagGRBarcodeType
{
    grbtCode25Intlv = 1,
    grbtCode25Ind = 2,
    grbtCode25Matrix = 3,
    grbtCode39 = 4,
    grbtCode39X = 5,
    grbtCode128A = 6,
    grbtCode128B = 7,
    grbtCode128C = 8,
    grbtCode93 = 9,
    grbtCode93X = 10,
    grbtCodeMSI = 11,
    grbtCodePostNet = 12,
    grbtCodeCodabar = 13,
    grbtCodeEAN8 = 14,
    grbtCodeEAN13 = 15,
    grbtCodeUPC_A = 16,
    grbtCodeUPC_E0 = 17,
    grbtCodeUPC_E1 = 18,
    grbtCodeUPC_Supp2 = 19,
    grbtCodeUPC_Supp5 = 20,
    grbtCodeEAN128A = 21,
    grbtCodeEAN128B = 22,
    grbtCodeEAN128C = 23,
    grbtCode128Auto = 24,
    grbtPDF417 = 50,
    grbtQRCode = 51,
    grbtDataMatrix = 52,
    grbtCodeEAN128Auto = 25,
    grbtITF_14 = 26
};

enum tagGRStringAlignment
{
    grsaNear = 1,
    grsaCenter = 2,
    grsaFar = 3
};

enum tagGRBarcodeCaptionPosition
{
    grbcpNone = 1,
    grbcpAbove = 2,
    grbcpBelow = 3
};

enum tagGRBarcodeDirection
{
    grbdLeftToRight = 1,
    grbdRightToLeft = 2,
    grbdTopToBottom = 3,
    grbdBottomToTop = 4
};

enum tagGRDtmxEncoding
{
    grdtmxeAuto = 2,
    grdtmxeAscii = 3,
    grdtmxeC40 = 4,
    grdtmxeText = 5,
    grdtmxeX12 = 6,
    grdtmxeEdifact = 7,
    grdtmxeBase256 = 8
};

enum tagGRDtmxMatrixSize
{
    grdtmxmsAuto = 2,
    grdtmxms10x10 = 4,
    grdtmxms12x12 = 5,
    grdtmxms14x14 = 6,
    grdtmxms16x16 = 7,
    grdtmxms18x18 = 8,
    grdtmxms20x20 = 9,
    grdtmxms22x22 = 10,
    grdtmxms24x24 = 11,
    grdtmxms26x26 = 12,
    grdtmxms32x32 = 13,
    grdtmxms36x36 = 14,
    grdtmxms40x40 = 15,
    grdtmxms44x44 = 16,
    grdtmxms48x48 = 17,
    grdtmxms52x52 = 18,
    grdtmxms64x64 = 19,
    grdtmxms72x72 = 20,
    grdtmxms80x80 = 21,
    grdtmxms88x88 = 22,
    grdtmxms96x96 = 23,
    grdtmxms104x104 = 24,
    grdtmxms120x120 = 25,
    grdtmxms132x132 = 26,
    grdtmxms144x144 = 27,
    grdtmxms8x18 = 28,
    grdtmxms8x32 = 29,
    grdtmxms12x26 = 30,
    grdtmxms12x36 = 31,
    grdtmxms16x36 = 32,
    grdtmxms16x48 = 33
};

enum tagGRPeriodType
{
    grptNone = 0,
    grptDay = 1,
    grptWeek = 2,
    grptThirdMonth = 3,
    grptHalfMonth = 4,
    grptMonth = 5,
    grptQuarter = 6,
    grptHalfYear = 7,
    grptYear = 8,
    grptCalendar = 9
};

enum tagGRPageColumnDirection
{
    grpcdDownAcross = 1,
    grpcdAcrossDown = 2,
    grpcdDownAcrossEqual = 3
};

enum tagGRColumnPrintAdaptMethod
{
    grcpamDiscard = 1,
    grcpamWrap = 2,
    grcpamResizeToFit = 3,
    grcpamShrinkToFit = 4,
    grcpamToNewPage = 5,
    grcpamToNewPageEx = 6,
    grcpamToNewPageRFC = 7,
    grcpamToNewPageRFCEx = 8,
    grcpamWrapExcludeGroup = 9
};

enum tagGRNewPageColumnStyle
{
    grncsNone = 1,
    grncsBefore = 2,
    grncsAfter = 3,
    grncsBeforeAfter = 4
};

enum tagGROCGroupHeaderVAlign
{
    grbaTop = 1,
    grbaBottom = 2,
    grbaMiddle = 3
};

enum tagGRGrpKpTogetherStyle
{
    grgktsNone = 1,
    grgktsFirstDetail = 2,
    grgktsAll = 3
};

enum tagGRViewerBorderStyle
{
    grvbsFixed3D = 1,
    grvbsFixedSingle = 2,
    grvbsNone = 3
};

enum tagGRPreviewEditMode
{
    grpemDisable = 1,
    grpemClickToEdit = 2,
    grpemDblClickToEdit = 3
};

enum tagGRPrintViewMode
{
    grpvmContinuousPage = 1,
    grpvmSinglePage = 2,
    grpvmMultiPage = 3
};

enum tagGRToolControlType
{
    grtctSep = 1,
    grtctPrint = 2,
    grtctPageSetup = 3,
    grtctPrinterSetup = 4,
    grtctExport = 5,
    grtctMail = 6,
    grtctSaveDocument = 7,
    grtctContinuousPage = 8,
    grtctSinglePage = 9,
    grtctMultiPage = 10,
    grtctZoomIn = 11,
    grtctZoomOut = 12,
    grtctZoomPercent = 13,
    grtctPriorPage = 14,
    grtctNextPage = 15,
    grtctFirstPage = 16,
    grtctLastPage = 17,
    grtctCurPageNo = 18,
    grtctClose = 19,
    grtctClip = 20,
    grtctRefresh = 21,
    grtctBookmark = 22,
    grtctFindTextBox = 30,
    grtctFind = 31,
    grtctFindAgain = 32,
    grtctFindDlg = 33,
    grtctExportXLS = 50,
    grtctExportTXT = 51,
    grtctExportHTM = 52,
    grtctExportRTF = 53,
    grtctExportPDF = 54,
    grtctExportCSV = 55,
    grtctExportIMG = 56,
    grtctExportXLSBtn = 60,
    grtctExportPDFBtn = 61,
    grtctMailXLS = 65,
    grtctMailTXT = 66,
    grtctMailHTM = 67,
    grtctMailRTF = 68,
    grtctMailPDF = 69,
    grtctMailCSV = 70,
    grtctMailIMG = 71,
    grtctMailSaveDocument = 72
};

enum tagGRPrintViewerOption
{
    grpvoShowContentMenu = 1,
    grpvoDblClickSwitchViewMode = 2
};

struct __declspec(uuid("2564dce8-fedb-4eb6-b7f9-5026f7f1041e"))
_IGRDisplayViewerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT KeyDown (
        GRShiftStates Shift,
        long Key );
    HRESULT KeyPress (
        char Key );
    HRESULT KeyUp (
        GRShiftStates Shift,
        long Key );
    HRESULT MouseDown (
        GRMouseButton Button,
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT MouseUp (
        GRMouseButton Button,
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT MouseMove (
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT ControlClick (
        struct IGRControl * pSender );
    HRESULT ControlDblClick (
        struct IGRControl * pSender );
    HRESULT SectionClick (
        struct IGRSection * pSender );
    HRESULT SectionDblClick (
        struct IGRSection * pSender );
    HRESULT ContentCellClick (
        struct IGRColumnContentCell * pSender );
    HRESULT ContentCellDblClick (
        struct IGRColumnContentCell * pSender );
    HRESULT TitleCellClick (
        struct IGRColumnTitleCell * pSender );
    HRESULT TitleCellDblClick (
        struct IGRColumnTitleCell * pSender );
    HRESULT ChartClickSeries (
        struct IGRChart * pSender,
        long SeriesIndex,
        long GroupIndex );
    HRESULT ChartDblClickSeries (
        struct IGRChart * pSender,
        long SeriesIndex,
        long GroupIndex );
    HRESULT ChartClickLegend (
        struct IGRChart * pSender,
        long SeriesIndex,
        long GroupIndex );
    HRESULT ChartDblClickLegend (
        struct IGRChart * pSender,
        long SeriesIndex,
        long GroupIndex );
    HRESULT ColumnLayoutChange ( );
    HRESULT SelectionCellChange (
        long OldRow,
        long OldCol );
    HRESULT StatusChange ( );
    HRESULT CloseButtonClick ( );
    HRESULT CustomButtonClick (
        long BtnID );
    HRESULT ToolbarCommandClick (
        GRToolControlType2 ControlType );
    HRESULT BatchFetchRecord ( );
};

enum tagGRShiftState
{
    grssShift = 1,
    grssAlt = 2,
    grssCtrl = 4,
    grssLeft = 8,
    grssRight = 16,
    grssMiddle = 32,
    grssDouble = 64
};

enum tagGRMouseButton
{
    grmbLeft = 1,
    grmbRight = 2,
    grmbMiddle = 3
};

enum tagGRToolControlType2
{
    grdtctSep = 1,
    grdtctPrint = 2,
    grdtctPageSetup = 3,
    grdtctPrinterSetup = 4,
    grdtctPrintPreview = 40,
    grdtctPostLayout = 41,
    grdtctShowPreviewLine = 42,
    grdtctFindTextBox = 30,
    grdtctFind = 31,
    grdtctFindAgain = 32,
    grdtctFindDlg = 33,
    grdtctPriorPage = 14,
    grdtctNextPage = 15,
    grdtctFirstPage = 16,
    grdtctLastPage = 17,
    grdtctCurPageNo = 18,
    grdtctDividePage = 25,
    grdtctClip = 20,
    grdtctExport = 5,
    grdtctMail = 6,
    grdtctSaveDocument = 7,
    grdtctClose = 19,
    grdtctRefresh = 21,
    grdtctExportXLS = 50,
    grdtctExportTXT = 51,
    grdtctExportHTM = 52,
    grdtctExportRTF = 53,
    grdtctExportPDF = 54,
    grdtctExportCSV = 55,
    grdtctExportIMG = 56,
    grdtctExportXLSBtn = 60,
    grdtctExportPDFBtn = 61,
    grdtctMailXLS = 65,
    grdtctMailTXT = 66,
    grdtctMailHTM = 67,
    grdtctMailRTF = 68,
    grdtctMailPDF = 69,
    grdtctMailCSV = 70,
    grdtctMailIMG = 71,
    grdtctColumnVisible = 80
};

struct __declspec(uuid("a9e920a1-c722-4a81-9fcf-4d5ebffa21f4"))
_IGRPrintViewerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT KeyDown (
        GRShiftStates Shift,
        long Key );
    HRESULT KeyPress (
        char Key );
    HRESULT KeyUp (
        GRShiftStates Shift,
        long Key );
    HRESULT MouseDown (
        GRMouseButton Button,
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT MouseUp (
        GRMouseButton Button,
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT MouseMove (
        GRShiftStates Shift,
        long xPos,
        long yPos );
    HRESULT CurPageChange (
        long NewCurPageNo );
    HRESULT StatusChange ( );
    HRESULT RulerClick (
        VARIANT_BOOL IsHorzRuler );
    HRESULT RulerDblClick (
        VARIANT_BOOL IsHorzRuler );
    HRESULT PageClick ( );
    HRESULT PageDblClick ( );
    HRESULT CloseButtonClick ( );
    HRESULT CustomButtonClick (
        long BtnID );
    HRESULT ToolbarCommandClick (
        GRToolControlType ControlType );
};

struct __declspec(uuid("f9364159-6aed-4f9c-8baf-d7c7ed6160a8"))
GridppReport;
    // [ default ] interface IGridppReport
    // [ default, source ] dispinterface _IGridppReportEvents

struct __declspec(uuid("1b5ea181-a38d-4f42-88b2-6af74cf6d6c0"))
GRDisplayViewer;
    // [ default ] interface IGRDisplayViewer
    // [ default, source ] dispinterface _IGRDisplayViewerEvents

enum tagGRDisplayViewerOption
{
    grdvoShowContentMenu = 1
};

struct __declspec(uuid("7fd5dc62-ded0-4138-9c48-55f0a0fe7b66"))
GRDisplayViewerProps;
    // [ default ] interface IUnknown

struct __declspec(uuid("44cbb5de-5afb-4c3d-8f3f-0f70ca5372ad"))
GRPrintViewer;
    // [ default ] interface IGRPrintViewer
    // [ default, source ] dispinterface _IGRPrintViewerEvents

struct __declspec(uuid("6ca58cb2-2ad1-4ad0-b3cc-5f5c000bbdee"))
GRPrintViewerProps;
    // [ default ] interface IUnknown

struct __declspec(uuid("f803ae1d-b578-490a-a1fe-38976ad2b625"))
IGRGroup : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IGRDetailGridPtr Parent;
    __declspec(property(get=GetHeader))
    IGRGroupHeaderPtr Header;
    __declspec(property(get=GetFooter))
    IGRGroupFooterPtr Footer;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetByFields,put=PutByFields))
    _bstr_t ByFields;
    __declspec(property(get=GetPageGroup,put=PutPageGroup))
    VARIANT_BOOL PageGroup;
    __declspec(property(get=GetLimitsPerPage,put=PutLimitsPerPage))
    long LimitsPerPage;
    __declspec(property(get=GetSortSummaryBox,put=PutSortSummaryBox))
    _bstr_t SortSummaryBox;
    __declspec(property(get=GetSortAsc,put=PutSortAsc))
    VARIANT_BOOL SortAsc;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetGroupBeginScript,put=PutGroupBeginScript))
    _bstr_t GroupBeginScript;
    __declspec(property(get=GetGroupEndScript,put=PutGroupEndScript))
    _bstr_t GroupEndScript;
    __declspec(property(get=Get_Dataset))
    IGRRecordsetPtr _Dataset;

    //
    // Wrapper methods for error-handling
    //

    IGRDetailGridPtr GetParent ( );
    IGRGroupHeaderPtr GetHeader ( );
    IGRGroupFooterPtr GetFooter ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetByFields ( );
    void PutByFields (
        _bstr_t pVal );
    VARIANT_BOOL GetPageGroup ( );
    void PutPageGroup (
        VARIANT_BOOL pVal );
    long GetLimitsPerPage ( );
    void PutLimitsPerPage (
        long pVal );
    _bstr_t GetSortSummaryBox ( );
    void PutSortSummaryBox (
        _bstr_t pVal );
    VARIANT_BOOL GetSortAsc ( );
    void PutSortAsc (
        VARIANT_BOOL pVal );
    _bstr_t GetGroupBeginScript ( );
    void PutGroupBeginScript (
        _bstr_t pVal );
    _bstr_t GetGroupEndScript ( );
    void PutGroupEndScript (
        _bstr_t pVal );
    IGRRecordsetPtr Get_Dataset ( );
    HRESULT _BeginOneGroup ( );
    HRESULT _EndOneGroup ( );
    HRESULT _ProcessGroupRecord ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IGRDetailGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct IGRGroupHeader * * pVal ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct IGRGroupFooter * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ByFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ByFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageGroup (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LimitsPerPage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LimitsPerPage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SortSummaryBox (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SortSummaryBox (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SortAsc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SortAsc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GroupBeginScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupBeginScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GroupEndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupEndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get__Dataset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall raw__BeginOneGroup ( ) = 0;
      virtual HRESULT __stdcall raw__EndOneGroup ( ) = 0;
      virtual HRESULT __stdcall raw__ProcessGroupRecord ( ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("488b2328-67c0-42d1-a133-303ff60d8ae2"))
IGRGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRGroupPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRGroupPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRGroupPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRGroupPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRGroup * * ppObject ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRGroup * * ppObject ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRGroup * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("cb11f828-a97b-4bc3-9b7a-9d2ddeb1c229"))
IGRDetailGrid : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnContent))
    IGRColumnContentPtr ColumnContent;
    __declspec(property(get=GetColumnTitle))
    IGRColumnTitlePtr ColumnTitle;
    __declspec(property(get=GetColumns))
    IGRColumnsPtr Columns;
    __declspec(property(get=GetGroups))
    IGRGroupsPtr Groups;
    __declspec(property(get=GetRecordset))
    IGRRecordsetPtr Recordset;
    __declspec(property(get=GetCrossTab))
    IGRCrossTabPtr CrossTab;
    __declspec(property(get=GetMasterRecordset))
    IGRRecordsetPtr MasterRecordset;
    __declspec(property(get=GetBorderStyles,put=PutBorderStyles))
    GRBorderStyles BorderStyles;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetIsCrossTab,put=PutIsCrossTab))
    VARIANT_BOOL IsCrossTab;
    __declspec(property(get=GetHasMasterRecordset,put=PutHasMasterRecordset))
    VARIANT_BOOL HasMasterRecordset;
    __declspec(property(get=GetRelationFields,put=PutRelationFields))
    _bstr_t RelationFields;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetColLineColor,put=PutColLineColor))
    OLE_COLOR ColLineColor;
    __declspec(property(get=GetFont))
    IGRFontPtr Font;
    __declspec(property(get=GetBorder))
    IGRBorderPtr Border;
    __declspec(property(get=GetColLinePen))
    IGRPenPtr ColLinePen;
    __declspec(property(get=GetRowLinePen))
    IGRPenPtr RowLinePen;
    __declspec(property(get=GetColLineWidth,put=PutColLineWidth))
    double ColLineWidth;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetShowColLine,put=PutShowColLine))
    VARIANT_BOOL ShowColLine;
    __declspec(property(get=GetShowRowLine,put=PutShowRowLine))
    VARIANT_BOOL ShowRowLine;
    __declspec(property(get=GetRowLineColor,put=PutRowLineColor))
    OLE_COLOR RowLineColor;
    __declspec(property(get=GetRowLineWidth,put=PutRowLineWidth))
    double RowLineWidth;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetNewPage,put=PutNewPage))
    GRNewPageStyle NewPage;
    __declspec(property(get=GetFixCols,put=PutFixCols))
    long FixCols;
    __declspec(property(get=GetCenterView,put=PutCenterView))
    VARIANT_BOOL CenterView;
    __declspec(property(get=GetGrowToBottom,put=PutGrowToBottom))
    VARIANT_BOOL GrowToBottom;
    __declspec(property(get=GetBorderPrintType,put=PutBorderPrintType))
    GRPrintType BorderPrintType;
    __declspec(property(get=GetGridLinePrintType,put=PutGridLinePrintType))
    GRPrintType GridLinePrintType;
    __declspec(property(get=GetPageColumnDirection,put=PutPageColumnDirection))
    GRPageColumnDirection PageColumnDirection;
    __declspec(property(get=GetPageColumnCount,put=PutPageColumnCount))
    long PageColumnCount;
    __declspec(property(get=GetPageColumnSpacing,put=PutPageColumnSpacing))
    double PageColumnSpacing;
    __declspec(property(get=GetPageColumnGroupNA,put=PutPageColumnGroupNA))
    VARIANT_BOOL PageColumnGroupNA;
    __declspec(property(get=GetPrintAdaptMethod,put=PutPrintAdaptMethod))
    GRColumnPrintAdaptMethod PrintAdaptMethod;
    __declspec(property(get=GetPrintAdaptRepeat,put=PutPrintAdaptRepeat))
    VARIANT_BOOL PrintAdaptRepeat;
    __declspec(property(get=GetPrintAdaptFitText,put=PutPrintAdaptFitText))
    VARIANT_BOOL PrintAdaptFitText;
    __declspec(property(get=GetPrintAdaptRFCStep,put=PutPrintAdaptRFCStep))
    long PrintAdaptRFCStep;
    __declspec(property(get=GetPrintAdaptTryToOnePage,put=PutPrintAdaptTryToOnePage))
    VARIANT_BOOL PrintAdaptTryToOnePage;
    __declspec(property(get=GetAppendBlankRow,put=PutAppendBlankRow))
    VARIANT_BOOL AppendBlankRow;
    __declspec(property(get=GetAppendBlankRowAtLast,put=PutAppendBlankRowAtLast))
    VARIANT_BOOL AppendBlankRowAtLast;
    __declspec(property(get=GetAppendBlankCol,put=PutAppendBlankCol))
    VARIANT_BOOL AppendBlankCol;
    __declspec(property(get=GetAppendBlankColWidth,put=PutAppendBlankColWidth))
    double AppendBlankColWidth;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnContentPtr GetColumnContent ( );
    IGRColumnTitlePtr GetColumnTitle ( );
    IGRColumnsPtr GetColumns ( );
    IGRGroupsPtr GetGroups ( );
    IGRRecordsetPtr GetRecordset ( );
    IGRCrossTabPtr GetCrossTab ( );
    IGRRecordsetPtr GetMasterRecordset ( );
    VARIANT_BOOL GetIsCrossTab ( );
    void PutIsCrossTab (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasMasterRecordset ( );
    void PutHasMasterRecordset (
        VARIANT_BOOL pVal );
    _bstr_t GetRelationFields ( );
    void PutRelationFields (
        _bstr_t pVal );
    IGRFontPtr GetFont ( );
    IGRBorderPtr GetBorder ( );
    IGRPenPtr GetColLinePen ( );
    IGRPenPtr GetRowLinePen ( );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetShowColLine ( );
    void PutShowColLine (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowRowLine ( );
    void PutShowRowLine (
        VARIANT_BOOL pVal );
    GRNewPageStyle GetNewPage ( );
    void PutNewPage (
        GRNewPageStyle pVal );
    long GetFixCols ( );
    void PutFixCols (
        long pVal );
    VARIANT_BOOL GetCenterView ( );
    void PutCenterView (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGrowToBottom ( );
    void PutGrowToBottom (
        VARIANT_BOOL pVal );
    GRPrintType GetBorderPrintType ( );
    void PutBorderPrintType (
        GRPrintType pVal );
    GRPrintType GetGridLinePrintType ( );
    void PutGridLinePrintType (
        GRPrintType pVal );
    GRPageColumnDirection GetPageColumnDirection ( );
    void PutPageColumnDirection (
        GRPageColumnDirection pVal );
    long GetPageColumnCount ( );
    void PutPageColumnCount (
        long pVal );
    double GetPageColumnSpacing ( );
    void PutPageColumnSpacing (
        double pVal );
    VARIANT_BOOL GetPageColumnGroupNA ( );
    void PutPageColumnGroupNA (
        VARIANT_BOOL pVal );
    GRColumnPrintAdaptMethod GetPrintAdaptMethod ( );
    void PutPrintAdaptMethod (
        GRColumnPrintAdaptMethod pVal );
    VARIANT_BOOL GetPrintAdaptRepeat ( );
    void PutPrintAdaptRepeat (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintAdaptFitText ( );
    void PutPrintAdaptFitText (
        VARIANT_BOOL pVal );
    long GetPrintAdaptRFCStep ( );
    void PutPrintAdaptRFCStep (
        long pVal );
    VARIANT_BOOL GetPrintAdaptTryToOnePage ( );
    void PutPrintAdaptTryToOnePage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppendBlankRow ( );
    void PutAppendBlankRow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppendBlankRowAtLast ( );
    void PutAppendBlankRowAtLast (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppendBlankCol ( );
    void PutAppendBlankCol (
        VARIANT_BOOL pVal );
    double GetAppendBlankColWidth ( );
    void PutAppendBlankColWidth (
        double pVal );
    IGRColumnPtr AddColumn (
        _bstr_t Name,
        _bstr_t Title,
        _bstr_t DataField,
        double Width );
    HRESULT ClearColumns ( );
    IGRColumnTitleCellPtr FindGroupTitleCell (
        _bstr_t Name );
    IGRColumnTitleCellPtr AddGroupTitle (
        _bstr_t Name,
        _bstr_t Title );
    HRESULT ClearGroupTitles ( );
    HRESULT ColumnMoveToEnd (
        const _variant_t & ColumnIndex );
    HRESULT ColumnMoveTo (
        _bstr_t ColumnName,
        _bstr_t NewGroupTitleCellName,
        long NewShowOrderNo );
    HRESULT StartNewGroup (
        const _variant_t & GroupIndex );
    IGRColumnPtr ColumnByShowOrder (
        long OrderNo );
    GRBorderStyles GetBorderStyles ( );
    void PutBorderStyles (
        GRBorderStyles pVal );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double pVal );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pVal );
    OLE_COLOR GetColLineColor ( );
    void PutColLineColor (
        OLE_COLOR pVal );
    double GetColLineWidth ( );
    void PutColLineWidth (
        double pVal );
    OLE_COLOR GetRowLineColor ( );
    void PutRowLineColor (
        OLE_COLOR pVal );
    double GetRowLineWidth ( );
    void PutRowLineWidth (
        double pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColumnContent (
        /*[out,retval]*/ struct IGRColumnContent * * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnTitle (
        /*[out,retval]*/ struct IGRColumnTitle * * pVal ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct IGRColumns * * pVal ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct IGRGroups * * pVal ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall get_CrossTab (
        /*[out,retval]*/ struct IGRCrossTab * * pVal ) = 0;
      virtual HRESULT __stdcall get_MasterRecordset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCrossTab (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCrossTab (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasMasterRecordset (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMasterRecordset (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RelationFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RelationFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IGRBorder * * pVal ) = 0;
      virtual HRESULT __stdcall get_ColLinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_RowLinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowColLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowColLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowRowLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowRowLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NewPage (
        /*[out,retval]*/ GRNewPageStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_NewPage (
        /*[in]*/ GRNewPageStyle pVal ) = 0;
      virtual HRESULT __stdcall get_FixCols (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FixCols (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CenterView (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterView (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GrowToBottom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GrowToBottom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BorderPrintType (
        /*[out,retval]*/ GRPrintType * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderPrintType (
        /*[in]*/ GRPrintType pVal ) = 0;
      virtual HRESULT __stdcall get_GridLinePrintType (
        /*[out,retval]*/ GRPrintType * pVal ) = 0;
      virtual HRESULT __stdcall put_GridLinePrintType (
        /*[in]*/ GRPrintType pVal ) = 0;
      virtual HRESULT __stdcall get_PageColumnDirection (
        /*[out,retval]*/ GRPageColumnDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_PageColumnDirection (
        /*[in]*/ GRPageColumnDirection pVal ) = 0;
      virtual HRESULT __stdcall get_PageColumnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PageColumnCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PageColumnSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageColumnSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageColumnGroupNA (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageColumnGroupNA (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAdaptMethod (
        /*[out,retval]*/ GRColumnPrintAdaptMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAdaptMethod (
        /*[in]*/ GRColumnPrintAdaptMethod pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAdaptRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAdaptRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAdaptFitText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAdaptFitText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAdaptRFCStep (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAdaptRFCStep (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAdaptTryToOnePage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAdaptTryToOnePage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankRow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankRow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankRowAtLast (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankRowAtLast (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankCol (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankCol (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankColWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankColWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddColumn (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Title,
        BSTR DataField,
        /*[in]*/ double Width,
        /*[out,retval]*/ struct IGRColumn * * ppColumn ) = 0;
      virtual HRESULT __stdcall raw_ClearColumns ( ) = 0;
      virtual HRESULT __stdcall raw_FindGroupTitleCell (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppTitle ) = 0;
      virtual HRESULT __stdcall raw_AddGroupTitle (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppTitle ) = 0;
      virtual HRESULT __stdcall raw_ClearGroupTitles ( ) = 0;
      virtual HRESULT __stdcall raw_ColumnMoveToEnd (
        /*[in]*/ VARIANT ColumnIndex ) = 0;
      virtual HRESULT __stdcall raw_ColumnMoveTo (
        /*[in]*/ BSTR ColumnName,
        /*[in]*/ BSTR NewGroupTitleCellName,
        /*[in]*/ long NewShowOrderNo ) = 0;
      virtual HRESULT __stdcall raw_StartNewGroup (
        /*[in]*/ VARIANT GroupIndex ) = 0;
      virtual HRESULT __stdcall raw_ColumnByShowOrder (
        /*[in]*/ long OrderNo,
        /*[out,retval]*/ struct IGRColumn * * ppColumn ) = 0;
      virtual HRESULT __stdcall get_BorderStyles (
        /*[out,retval]*/ GRBorderStyles * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderStyles (
        /*[in]*/ GRBorderStyles pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColLineWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColLineWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowLineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_RowLineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RowLineWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RowLineWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("77fd1006-7067-41ff-a712-0f356a6ace8c"))
IGRSection : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSectionType))
    GRSectionType SectionType;
    __declspec(property(get=GetParent))
    IUnknownPtr Parent;
    __declspec(property(get=GetFont))
    IGRFontPtr Font;
    __declspec(property(get=GetControls))
    IGRControlsPtr Controls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetCanShrink,put=PutCanShrink))
    VARIANT_BOOL CanShrink;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetBookmarkText,put=PutBookmarkText))
    _bstr_t BookmarkText;
    __declspec(property(get=GetFormatScript,put=PutFormatScript))
    _bstr_t FormatScript;

    //
    // Wrapper methods for error-handling
    //

    GRSectionType GetSectionType ( );
    IUnknownPtr GetParent ( );
    IGRFontPtr GetFont ( );
    IGRControlsPtr GetControls ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanShrink ( );
    void PutCanShrink (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pVal );
    _bstr_t GetBookmarkText ( );
    void PutBookmarkText (
        _bstr_t pVal );
    _bstr_t GetFormatScript ( );
    void PutFormatScript (
        _bstr_t pVal );
    HRESULT _HasSectionFormatScript ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SectionType (
        /*[out,retval]*/ GRSectionType * pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct IGRControls * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CanGrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanGrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_KeepTogether (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_KeepTogether (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BookmarkText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BookmarkText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FormatScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FormatScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw__HasSectionFormatScript ( ) = 0;
};

struct __declspec(uuid("c765e825-5f52-44cb-aab6-fa89376da4c0"))
IGRColumnSection : IGRSection
{
    //
    // Property data
    //

    __declspec(property(get=GetDetailGrid))
    IGRDetailGridPtr DetailGrid;
    __declspec(property(get=GetCursor,put=PutCursor))
    GRDisplayCursor Cursor;

    //
    // Wrapper methods for error-handling
    //

    IGRDetailGridPtr GetDetailGrid ( );
    GRDisplayCursor GetCursor ( );
    void PutCursor (
        GRDisplayCursor pVal );
    HRESULT SetCellsBackColor (
        OLE_COLOR BackColor );
    HRESULT SetCellsForeColor (
        OLE_COLOR ForeColor );
    HRESULT LoadCursorFile (
        _bstr_t PathFile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DetailGrid (
        /*[out,retval]*/ struct IGRDetailGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ GRDisplayCursor * pVal ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ GRDisplayCursor pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCellsBackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall raw_SetCellsForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall raw_LoadCursorFile (
        /*[in]*/ BSTR PathFile ) = 0;
};

struct __declspec(uuid("7fc1d3a0-693f-486e-bdf3-02e98f50f9f3"))
IGRPageHeader : IGRSection
{
    //
    // Property data
    //

    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("aacdaa8b-5ebb-4cc7-bcb9-c300fe7184a5"))
IGRPageFooter : IGRSection
{
    //
    // Property data
    //

    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("53e18537-559d-4ef2-94c3-47a1ef38100f"))
IGRReportSection : IGRSection
{
    //
    // Property data
    //

    __declspec(property(get=GetRepeatOnPage,put=PutRepeatOnPage))
    VARIANT_BOOL RepeatOnPage;
    __declspec(property(get=GetCenterWithDetailGrid,put=PutCenterWithDetailGrid))
    VARIANT_BOOL CenterWithDetailGrid;
    __declspec(property(get=GetNewPage,put=PutNewPage))
    GRNewPageStyle NewPage;

    //
    // Wrapper methods for error-handling
    //

    GRNewPageStyle GetNewPage ( );
    void PutNewPage (
        GRNewPageStyle pVal );
    VARIANT_BOOL GetRepeatOnPage ( );
    void PutRepeatOnPage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCenterWithDetailGrid ( );
    void PutCenterWithDetailGrid (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NewPage (
        /*[out,retval]*/ GRNewPageStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_NewPage (
        /*[in]*/ GRNewPageStyle pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatOnPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatOnPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CenterWithDetailGrid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterWithDetailGrid (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f82df93f-5ff2-40a6-b50b-016666ec08ca"))
IGRReportHeader : IGRReportSection
{
    //
    // Property data
    //

    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("6fa2be8f-b674-49a9-a081-fe3968ae8d8d"))
IGRReportHeaders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRReportHeaderPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRReportHeaderPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRReportHeaderPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRReportHeaderPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRReportHeader * * ppItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRReportHeader * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRReportHeader * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("b2cc2c43-cf42-4e38-bdbb-5c04df11793f"))
IGRReportFooter : IGRReportSection
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintAtBottom,put=PutPrintAtBottom))
    VARIANT_BOOL PrintAtBottom;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetAppendBlankRowExclude,put=PutAppendBlankRowExclude))
    VARIANT_BOOL AppendBlankRowExclude;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPrintAtBottom ( );
    void PutPrintAtBottom (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppendBlankRowExclude ( );
    void PutAppendBlankRowExclude (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PrintAtBottom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAtBottom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankRowExclude (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankRowExclude (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("ce4b64d4-5b5c-4b74-8470-1cc62f8e9fc9"))
IGRReportFooters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRReportFooterPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRReportFooterPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRReportFooterPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRReportFooterPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRReportFooter * * ppItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRReportFooter * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRReportFooter * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("36971202-d715-4afc-83d4-7c0ddd8872e8"))
IGRGroupSection : IGRSection
{
    //
    // Property data
    //

    __declspec(property(get=GetGroup))
    IGRGroupPtr Group;
    __declspec(property(get=GetNewPage,put=PutNewPage))
    GRNewPageStyle NewPage;
    __declspec(property(get=GetPrintGridBorder,put=PutPrintGridBorder))
    VARIANT_BOOL PrintGridBorder;
    __declspec(property(get=GetHNewPageFixed,put=PutHNewPageFixed))
    VARIANT_BOOL HNewPageFixed;
    __declspec(property(get=GetNewPageColumn,put=PutNewPageColumn))
    GRNewPageColumnStyle NewPageColumn;
    __declspec(property(get=GetRepeatOnPage,put=PutRepeatOnPage))
    VARIANT_BOOL RepeatOnPage;

    //
    // Wrapper methods for error-handling
    //

    IGRGroupPtr GetGroup ( );
    GRNewPageStyle GetNewPage ( );
    void PutNewPage (
        GRNewPageStyle pVal );
    VARIANT_BOOL GetPrintGridBorder ( );
    void PutPrintGridBorder (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHNewPageFixed ( );
    void PutHNewPageFixed (
        VARIANT_BOOL pVal );
    GRNewPageColumnStyle GetNewPageColumn ( );
    void PutNewPageColumn (
        GRNewPageColumnStyle pVal );
    VARIANT_BOOL GetRepeatOnPage ( );
    void PutRepeatOnPage (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ struct IGRGroup * * pVal ) = 0;
      virtual HRESULT __stdcall get_NewPage (
        /*[out,retval]*/ GRNewPageStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_NewPage (
        /*[in]*/ GRNewPageStyle pVal ) = 0;
      virtual HRESULT __stdcall get_PrintGridBorder (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintGridBorder (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HNewPageFixed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HNewPageFixed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NewPageColumn (
        /*[out,retval]*/ GRNewPageColumnStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_NewPageColumn (
        /*[in]*/ GRNewPageColumnStyle pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatOnPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatOnPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("5c2fc87f-12f8-4a09-8a4a-792671c03c74"))
IGRGroupHeader : IGRGroupSection
{
    //
    // Property data
    //

    __declspec(property(get=GetOccupyColumn,put=PutOccupyColumn))
    VARIANT_BOOL OccupyColumn;
    __declspec(property(get=GetOccupiedColumns,put=PutOccupiedColumns))
    _bstr_t OccupiedColumns;
    __declspec(property(get=GetVAlign,put=PutVAlign))
    GROCGroupHeaderVAlign VAlign;
    __declspec(property(get=GetSameAsColumn,put=PutSameAsColumn))
    VARIANT_BOOL SameAsColumn;
    __declspec(property(get=GetIncludeFooter,put=PutIncludeFooter))
    VARIANT_BOOL IncludeFooter;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetGroupKeepTogether,put=PutGroupKeepTogether))
    GRGrpKpTogetherStyle GroupKeepTogether;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetOccupyColumn ( );
    void PutOccupyColumn (
        VARIANT_BOOL pVal );
    _bstr_t GetOccupiedColumns ( );
    void PutOccupiedColumns (
        _bstr_t pVal );
    GROCGroupHeaderVAlign GetVAlign ( );
    void PutVAlign (
        GROCGroupHeaderVAlign pVal );
    VARIANT_BOOL GetSameAsColumn ( );
    void PutSameAsColumn (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeFooter ( );
    void PutIncludeFooter (
        VARIANT_BOOL pVal );
    GRGrpKpTogetherStyle GetGroupKeepTogether ( );
    void PutGroupKeepTogether (
        GRGrpKpTogetherStyle pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OccupyColumn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OccupyColumn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OccupiedColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OccupiedColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VAlign (
        /*[out,retval]*/ GROCGroupHeaderVAlign * pVal ) = 0;
      virtual HRESULT __stdcall put_VAlign (
        /*[in]*/ GROCGroupHeaderVAlign pVal ) = 0;
      virtual HRESULT __stdcall get_SameAsColumn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SameAsColumn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeFooter (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeFooter (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GroupKeepTogether (
        /*[out,retval]*/ GRGrpKpTogetherStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupKeepTogether (
        /*[in]*/ GRGrpKpTogetherStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("b753063d-aeba-4e5e-b53a-f89b68f1f622"))
IGRGroupFooter : IGRGroupSection
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintAtBottom,put=PutPrintAtBottom))
    VARIANT_BOOL PrintAtBottom;
    __declspec(property(get=GetAppendBlankRowExclude,put=PutAppendBlankRowExclude))
    VARIANT_BOOL AppendBlankRowExclude;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPrintAtBottom ( );
    void PutPrintAtBottom (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppendBlankRowExclude ( );
    void PutAppendBlankRowExclude (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PrintAtBottom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAtBottom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppendBlankRowExclude (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppendBlankRowExclude (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("23f65787-d22b-4ca6-ba49-d22b63ca353a"))
IGRColumnContent : IGRColumnSection
{
    //
    // Property data
    //

    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetContentCells))
    IGRColumnContentCellsPtr ContentCells;
    __declspec(property(get=GetAlternatingBackColor,put=PutAlternatingBackColor))
    OLE_COLOR AlternatingBackColor;
    __declspec(property(get=GetRowsPerPage,put=PutRowsPerPage))
    long RowsPerPage;
    __declspec(property(get=GetRowsIncludeGroup,put=PutRowsIncludeGroup))
    VARIANT_BOOL RowsIncludeGroup;
    __declspec(property(get=GetAdjustRowHeight,put=PutAdjustRowHeight))
    VARIANT_BOOL AdjustRowHeight;
    __declspec(property(get=GetGrowToNextRow,put=PutGrowToNextRow))
    VARIANT_BOOL GrowToNextRow;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnContentCellsPtr GetContentCells ( );
    OLE_COLOR GetAlternatingBackColor ( );
    void PutAlternatingBackColor (
        OLE_COLOR pVal );
    long GetRowsPerPage ( );
    void PutRowsPerPage (
        long pVal );
    VARIANT_BOOL GetRowsIncludeGroup ( );
    void PutRowsIncludeGroup (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAdjustRowHeight ( );
    void PutAdjustRowHeight (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGrowToNextRow ( );
    void PutGrowToNextRow (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ContentCells (
        /*[out,retval]*/ struct IGRColumnContentCells * * pVal ) = 0;
      virtual HRESULT __stdcall get_AlternatingBackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlternatingBackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RowsPerPage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowsPerPage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowsIncludeGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RowsIncludeGroup (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AdjustRowHeight (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AdjustRowHeight (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GrowToNextRow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GrowToNextRow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("48636e6a-758e-46c0-b37a-c2a2cac9469a"))
IGRControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRControlPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRControlPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRControlPtr Add (
        GRControlType ControlType );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRControlPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRControl * * ppdoc ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ GRControlType ControlType,
        /*[out,retval]*/ struct IGRControl * * ppControl ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRControl * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("e5561733-9cd9-4d47-ae6b-3cb10a3d6772"))
IGRCellBase : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    IGRBorderPtr Border;
    __declspec(property(get=GetTextFormat))
    IGRTextFormatPtr TextFormat;
    __declspec(property(get=GetFont))
    IGRFontPtr Font;
    __declspec(property(get=GetControls))
    IGRControlsPtr Controls;
    __declspec(property(get=GetFreeCell,put=PutFreeCell))
    VARIANT_BOOL FreeCell;
    __declspec(property(get=GetBorderCustom,put=PutBorderCustom))
    VARIANT_BOOL BorderCustom;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetPaddingLeft,put=PutPaddingLeft))
    long PaddingLeft;
    __declspec(property(get=GetPaddingRight,put=PutPaddingRight))
    long PaddingRight;
    __declspec(property(get=GetPaddingTop,put=PutPaddingTop))
    long PaddingTop;
    __declspec(property(get=GetPaddingBottom,put=PutPaddingBottom))
    long PaddingBottom;
    __declspec(property(get=GetShowMoneyLabel,put=PutShowMoneyLabel))
    VARIANT_BOOL ShowMoneyLabel;
    __declspec(property(get=GetShowMoneyLine,put=PutShowMoneyLine))
    VARIANT_BOOL ShowMoneyLine;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetCanShrink,put=PutCanShrink))
    VARIANT_BOOL CanShrink;
    __declspec(property(get=GetPrintType,put=PutPrintType))
    GRPrintType PrintType;
    __declspec(property(get=GetCursor,put=PutCursor))
    GRDisplayCursor Cursor;
    __declspec(property(get=GetShrinkFontToFit,put=PutShrinkFontToFit))
    VARIANT_BOOL ShrinkFontToFit;
    __declspec(property(get=GetGetDisplayTextScript,put=PutGetDisplayTextScript))
    _bstr_t GetDisplayTextScript;
    __declspec(property(get=Get_CursorHandle))
    OLE_HANDLE _CursorHandle;

    //
    // Wrapper methods for error-handling
    //

    IGRBorderPtr GetBorder ( );
    IGRTextFormatPtr GetTextFormat ( );
    IGRFontPtr GetFont ( );
    IGRControlsPtr GetControls ( );
    VARIANT_BOOL GetFreeCell ( );
    void PutFreeCell (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBorderCustom ( );
    void PutBorderCustom (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanShrink ( );
    void PutCanShrink (
        VARIANT_BOOL pVal );
    GRPrintType GetPrintType ( );
    void PutPrintType (
        GRPrintType pVal );
    GRDisplayCursor GetCursor ( );
    void PutCursor (
        GRDisplayCursor pVal );
    VARIANT_BOOL GetShrinkFontToFit ( );
    void PutShrinkFontToFit (
        VARIANT_BOOL pVal );
    long GetPaddingLeft ( );
    void PutPaddingLeft (
        long pVal );
    long GetPaddingRight ( );
    void PutPaddingRight (
        long pVal );
    long GetPaddingTop ( );
    void PutPaddingTop (
        long pVal );
    long GetPaddingBottom ( );
    void PutPaddingBottom (
        long pVal );
    VARIANT_BOOL GetShowMoneyLabel ( );
    void PutShowMoneyLabel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowMoneyLine ( );
    void PutShowMoneyLine (
        VARIANT_BOOL pVal );
    HRESULT LoadCursorFile (
        _bstr_t PathFile );
    OLE_HANDLE Get_CursorHandle ( );
    _bstr_t GetGetDisplayTextScript ( );
    void PutGetDisplayTextScript (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IGRBorder * * pVal ) = 0;
      virtual HRESULT __stdcall get_TextFormat (
        /*[out,retval]*/ struct IGRTextFormat * * pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct IGRControls * * pVal ) = 0;
      virtual HRESULT __stdcall get_FreeCell (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FreeCell (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BorderCustom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderCustom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_CanGrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanGrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintType (
        /*[out,retval]*/ GRPrintType * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintType (
        /*[in]*/ GRPrintType pVal ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ GRDisplayCursor * pVal ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ GRDisplayCursor pVal ) = 0;
      virtual HRESULT __stdcall get_ShrinkFontToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShrinkFontToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingLeft (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingRight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingRight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingTop (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingTop (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingBottom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingBottom (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadCursorFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall get__CursorHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get_GetDisplayTextScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GetDisplayTextScript (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("cd0a6964-d013-4db6-96c4-5b1de0db8f1c"))
IGRFreeGridCell : IGRCellBase
{
    //
    // Property data
    //

    __declspec(property(get=GetColSpan,put=PutColSpan))
    long ColSpan;
    __declspec(property(get=GetRowSpan,put=PutRowSpan))
    long RowSpan;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetDataName,put=PutDataName))
    _bstr_t DataName;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    long GetColSpan ( );
    void PutColSpan (
        long pVal );
    long GetRowSpan ( );
    void PutRowSpan (
        long pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetDataName ( );
    void PutDataName (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColSpan (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColSpan (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowSpan (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowSpan (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DataName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("07120975-b963-4f75-9b4d-0ac979febb5d"))
IGRControl : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=Get_ControlHandle))
    OLE_HANDLE _ControlHandle;
    __declspec(property(get=GetControlType))
    GRControlType ControlType;
    __declspec(property(get=GetFont))
    IGRFontPtr Font;
    __declspec(property(get=GetParent))
    IUnknownPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    GRBackStyle BackStyle;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetBorder))
    IGRBorderPtr Border;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderStyles,put=PutBorderStyles))
    GRBorderStyles BorderStyles;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetPaddingLeft,put=PutPaddingLeft))
    long PaddingLeft;
    __declspec(property(get=GetPaddingRight,put=PutPaddingRight))
    long PaddingRight;
    __declspec(property(get=GetPaddingTop,put=PutPaddingTop))
    long PaddingTop;
    __declspec(property(get=GetPaddingBottom,put=PutPaddingBottom))
    long PaddingBottom;
    __declspec(property(get=GetAnchor,put=PutAnchor))
    GRAnchorStyles Anchor;
    __declspec(property(get=GetDock,put=PutDock))
    GRDockStyle Dock;
    __declspec(property(get=GetCenter,put=PutCenter))
    GRCenterStyle Center;
    __declspec(property(get=GetAlignColumn,put=PutAlignColumn))
    _bstr_t AlignColumn;
    __declspec(property(get=GetAlignColumnEx,put=PutAlignColumnEx))
    _bstr_t AlignColumnEx;
    __declspec(property(get=GetAlignColumnSide,put=PutAlignColumnSide))
    GRAlignColumnStyle AlignColumnSide;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetShiftMode,put=PutShiftMode))
    GRShiftMode ShiftMode;
    __declspec(property(get=GetPrintType,put=PutPrintType))
    GRPrintType PrintType;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCursor,put=PutCursor))
    GRDisplayCursor Cursor;
    __declspec(property(get=GetCustomDraw,put=PutCustomDraw))
    VARIANT_BOOL CustomDraw;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetCustomDrawScript,put=PutCustomDrawScript))
    _bstr_t CustomDrawScript;
    __declspec(property(get=GetAsTextBox))
    IGRTextBoxPtr AsTextBox;
    __declspec(property(get=GetAsChart))
    IGRChartPtr AsChart;
    __declspec(property(get=GetAsStaticBox))
    IGRStaticBoxPtr AsStaticBox;
    __declspec(property(get=GetAsShapeBox))
    IGRShapeBoxPtr AsShapeBox;
    __declspec(property(get=GetAsSystemVarBox))
    IGRSystemVarBoxPtr AsSystemVarBox;
    __declspec(property(get=GetAsFieldBox))
    IGRFieldBoxPtr AsFieldBox;
    __declspec(property(get=GetAsSummaryBox))
    IGRSummaryBoxPtr AsSummaryBox;
    __declspec(property(get=GetAsPictureBox))
    IGRPictureBoxPtr AsPictureBox;
    __declspec(property(get=GetAsRichTextBox))
    IGRRichTextBoxPtr AsRichTextBox;
    __declspec(property(get=GetAsMemoBox))
    IGRMemoBoxPtr AsMemoBox;
    __declspec(property(get=GetAsSubReport))
    IGRSubReportPtr AsSubReport;
    __declspec(property(get=GetAsLine))
    IGRLinePtr AsLine;
    __declspec(property(get=GetAsBarcode))
    IGRBarcodePtr AsBarcode;
    __declspec(property(get=GetAsFreeGrid))
    IGRFreeGridPtr AsFreeGrid;
    __declspec(property(get=Get_RealViewBackColor))
    OLE_COLOR _RealViewBackColor;
    __declspec(property(get=Get_CursorHandle))
    OLE_HANDLE _CursorHandle;

    //
    // Wrapper methods for error-handling
    //

    GRControlType GetControlType ( );
    IGRFontPtr GetFont ( );
    IUnknownPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    GRBackStyle GetBackStyle ( );
    void PutBackStyle (
        GRBackStyle pVal );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR pVal );
    IGRBorderPtr GetBorder ( );
    double GetLeft ( );
    void PutLeft (
        double pVal );
    double GetTop ( );
    void PutTop (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    long GetPaddingLeft ( );
    void PutPaddingLeft (
        long pVal );
    long GetPaddingRight ( );
    void PutPaddingRight (
        long pVal );
    long GetPaddingTop ( );
    void PutPaddingTop (
        long pVal );
    long GetPaddingBottom ( );
    void PutPaddingBottom (
        long pVal );
    GRAnchorStyles GetAnchor ( );
    void PutAnchor (
        GRAnchorStyles pVal );
    GRDockStyle GetDock ( );
    void PutDock (
        GRDockStyle pVal );
    GRCenterStyle GetCenter ( );
    void PutCenter (
        GRCenterStyle pVal );
    _bstr_t GetAlignColumn ( );
    void PutAlignColumn (
        _bstr_t pVal );
    _bstr_t GetAlignColumnEx ( );
    void PutAlignColumnEx (
        _bstr_t pVal );
    GRAlignColumnStyle GetAlignColumnSide ( );
    void PutAlignColumnSide (
        GRAlignColumnStyle pVal );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL pVal );
    GRShiftMode GetShiftMode ( );
    void PutShiftMode (
        GRShiftMode pVal );
    GRPrintType GetPrintType ( );
    void PutPrintType (
        GRPrintType pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    GRDisplayCursor GetCursor ( );
    void PutCursor (
        GRDisplayCursor pVal );
    VARIANT_BOOL GetCustomDraw ( );
    void PutCustomDraw (
        VARIANT_BOOL pVal );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pVal );
    _bstr_t GetCustomDrawScript ( );
    void PutCustomDrawScript (
        _bstr_t pVal );
    IGRTextBoxPtr GetAsTextBox ( );
    IGRChartPtr GetAsChart ( );
    IGRStaticBoxPtr GetAsStaticBox ( );
    IGRShapeBoxPtr GetAsShapeBox ( );
    IGRSystemVarBoxPtr GetAsSystemVarBox ( );
    IGRFieldBoxPtr GetAsFieldBox ( );
    IGRSummaryBoxPtr GetAsSummaryBox ( );
    IGRPictureBoxPtr GetAsPictureBox ( );
    IGRRichTextBoxPtr GetAsRichTextBox ( );
    IGRMemoBoxPtr GetAsMemoBox ( );
    IGRSubReportPtr GetAsSubReport ( );
    IGRLinePtr GetAsLine ( );
    IGRBarcodePtr GetAsBarcode ( );
    IGRFreeGridPtr GetAsFreeGrid ( );
    HRESULT SetBounds (
        double Left,
        double Top,
        double Right,
        double Bottom );
    HRESULT BringToFront ( );
    HRESULT SendToBack ( );
    HRESULT LoadCursorFile (
        _bstr_t PathFile );
    HRESULT DrawDefault ( );
    OLE_COLOR Get_RealViewBackColor ( );
    OLE_HANDLE Get_CursorHandle ( );
    OLE_HANDLE Get_ControlHandle ( );
    HRESULT _HasCustomDrawScript ( );
    HRESULT _Draw (
        OLE_HANDLE pDrawDevice,
        OLE_HANDLE pDrawRect );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double pVal );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pVal );
    GRBorderStyles GetBorderStyles ( );
    void PutBorderStyles (
        GRBorderStyles pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlType (
        /*[out,retval]*/ GRControlType * pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ GRBackStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ GRBackStyle pVal ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IGRBorder * * pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingLeft (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingRight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingRight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingTop (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingTop (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PaddingBottom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaddingBottom (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Anchor (
        /*[out,retval]*/ GRAnchorStyles * pVal ) = 0;
      virtual HRESULT __stdcall put_Anchor (
        /*[in]*/ GRAnchorStyles pVal ) = 0;
      virtual HRESULT __stdcall get_Dock (
        /*[out,retval]*/ GRDockStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Dock (
        /*[in]*/ GRDockStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ GRCenterStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ GRCenterStyle pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumnEx (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumnEx (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumnSide (
        /*[out,retval]*/ GRAlignColumnStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumnSide (
        /*[in]*/ GRAlignColumnStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShiftMode (
        /*[out,retval]*/ GRShiftMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ShiftMode (
        /*[in]*/ GRShiftMode pVal ) = 0;
      virtual HRESULT __stdcall get_PrintType (
        /*[out,retval]*/ GRPrintType * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintType (
        /*[in]*/ GRPrintType pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ GRDisplayCursor * pVal ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ GRDisplayCursor pVal ) = 0;
      virtual HRESULT __stdcall get_CustomDraw (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomDraw (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HyperlinkText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HyperlinkText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CustomDrawScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomDrawScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsTextBox (
        /*[out,retval]*/ struct IGRTextBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsChart (
        /*[out,retval]*/ struct IGRChart * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsStaticBox (
        /*[out,retval]*/ struct IGRStaticBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsShapeBox (
        /*[out,retval]*/ struct IGRShapeBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsSystemVarBox (
        /*[out,retval]*/ struct IGRSystemVarBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsFieldBox (
        /*[out,retval]*/ struct IGRFieldBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsSummaryBox (
        /*[out,retval]*/ struct IGRSummaryBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsPictureBox (
        /*[out,retval]*/ struct IGRPictureBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsRichTextBox (
        /*[out,retval]*/ struct IGRRichTextBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsMemoBox (
        /*[out,retval]*/ struct IGRMemoBox * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsSubReport (
        /*[out,retval]*/ struct IGRSubReport * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsLine (
        /*[out,retval]*/ struct IGRLine * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsBarcode (
        /*[out,retval]*/ struct IGRBarcode * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsFreeGrid (
        /*[out,retval]*/ struct IGRFreeGrid * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetBounds (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_LoadCursorFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_DrawDefault ( ) = 0;
      virtual HRESULT __stdcall get__RealViewBackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall get__CursorHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get__ControlHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall raw__HasCustomDrawScript ( ) = 0;
      virtual HRESULT __stdcall raw__Draw (
        /*[in]*/ OLE_HANDLE pDrawDevice,
        /*[in]*/ OLE_HANDLE pDrawRect ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderStyles (
        /*[out,retval]*/ GRBorderStyles * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderStyles (
        /*[in]*/ GRBorderStyles pVal ) = 0;
};

struct __declspec(uuid("6a246ac9-1715-40b6-a483-de9f3e8da43c"))
IGRTextBox : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=Get_ExportXlsFormat))
    _bstr_t _ExportXlsFormat;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetEndEllipsis,put=PutEndEllipsis))
    VARIANT_BOOL EndEllipsis;
    __declspec(property(get=GetTextFormat))
    IGRTextFormatPtr TextFormat;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    GRTextAlign TextAlign;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetCanShrink,put=PutCanShrink))
    VARIANT_BOOL CanShrink;
    __declspec(property(get=GetShrinkFontToFit,put=PutShrinkFontToFit))
    VARIANT_BOOL ShrinkFontToFit;
    __declspec(property(get=GetSpanToNewPage,put=PutSpanToNewPage))
    VARIANT_BOOL SpanToNewPage;
    __declspec(property(get=GetShowMoneyLabel,put=PutShowMoneyLabel))
    VARIANT_BOOL ShowMoneyLabel;
    __declspec(property(get=GetShowMoneyLine,put=PutShowMoneyLine))
    VARIANT_BOOL ShowMoneyLine;
    __declspec(property(get=GetDisplayText,put=PutDisplayText))
    _bstr_t DisplayText;
    __declspec(property(get=GetGetDisplayTextScript,put=PutGetDisplayTextScript))
    _bstr_t GetDisplayTextScript;

    //
    // Wrapper methods for error-handling
    //

    IGRTextFormatPtr GetTextFormat ( );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanShrink ( );
    void PutCanShrink (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShrinkFontToFit ( );
    void PutShrinkFontToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSpanToNewPage ( );
    void PutSpanToNewPage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowMoneyLabel ( );
    void PutShowMoneyLabel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowMoneyLine ( );
    void PutShowMoneyLine (
        VARIANT_BOOL pVal );
    _bstr_t GetDisplayText ( );
    void PutDisplayText (
        _bstr_t pVal );
    _bstr_t GetGetDisplayTextScript ( );
    void PutGetDisplayTextScript (
        _bstr_t pVal );
    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEndEllipsis ( );
    void PutEndEllipsis (
        VARIANT_BOOL pVal );
    GRTextAlign GetTextAlign ( );
    void PutTextAlign (
        GRTextAlign pVal );
    _bstr_t Get_ExportXlsFormat ( );
    HRESULT _FetchExportData (
        double * pValue,
        BSTR * pFormatText,
        GRFieldType * pDataType );
    HRESULT _HasGetDisplayTextScript ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextFormat (
        /*[out,retval]*/ struct IGRTextFormat * * pVal ) = 0;
      virtual HRESULT __stdcall get_CanGrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanGrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShrinkFontToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShrinkFontToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SpanToNewPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SpanToNewPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GetDisplayTextScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GetDisplayTextScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EndEllipsis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EndEllipsis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ GRTextAlign * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ GRTextAlign pVal ) = 0;
      virtual HRESULT __stdcall get__ExportXlsFormat (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw__FetchExportData (
        /*[out]*/ double * pValue,
        /*[out]*/ BSTR * pFormatText,
        /*[out]*/ GRFieldType * pDataType ) = 0;
      virtual HRESULT __stdcall raw__HasGetDisplayTextScript ( ) = 0;
};

struct __declspec(uuid("b4af4881-7230-4ae0-8d3a-02f96f339454"))
IGRStaticBox : IGRTextBox
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetParameter,put=PutParameter))
    _bstr_t Parameter;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetParameter ( );
    void PutParameter (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Parameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Parameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("c04a6143-7500-41ef-8062-bd89a0a92d40"))
IGRShapeBox : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeType,put=PutShapeType))
    GRShapeType ShapeType;
    __declspec(property(get=GetLinePen))
    IGRPenPtr LinePen;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    OLE_COLOR FillColor;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    GRBackStyle FillStyle;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetLineType,put=PutLineType))
    GRLineType LineType;
    __declspec(property(get=GetCornerDx,put=PutCornerDx))
    long CornerDx;
    __declspec(property(get=GetCornerDy,put=PutCornerDy))
    long CornerDy;

    //
    // Wrapper methods for error-handling
    //

    GRShapeType GetShapeType ( );
    void PutShapeType (
        GRShapeType pVal );
    IGRPenPtr GetLinePen ( );
    OLE_COLOR GetFillColor ( );
    void PutFillColor (
        OLE_COLOR pVal );
    GRBackStyle GetFillStyle ( );
    void PutFillStyle (
        GRBackStyle pVal );
    GRLineType GetLineType ( );
    void PutLineType (
        GRLineType pVal );
    long GetCornerDx ( );
    void PutCornerDx (
        long pVal );
    long GetCornerDy ( );
    void PutCornerDy (
        long pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeType (
        /*[out,retval]*/ GRShapeType * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeType (
        /*[in]*/ GRShapeType pVal ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ GRBackStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ GRBackStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineType (
        /*[out,retval]*/ GRLineType * pVal ) = 0;
      virtual HRESULT __stdcall put_LineType (
        /*[in]*/ GRLineType pVal ) = 0;
      virtual HRESULT __stdcall get_CornerDx (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerDx (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CornerDy (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerDy (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("28845384-ed9f-4d2e-986e-d52ac37a108f"))
IGRSystemVarBox : IGRTextBox
{
    //
    // Property data
    //

    __declspec(property(get=GetSystemVar,put=PutSystemVar))
    GRSystemVarType SystemVar;
    __declspec(property(get=GetGroupIndex,put=PutGroupIndex))
    long GroupIndex;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRSystemVarType GetSystemVar ( );
    void PutSystemVar (
        GRSystemVarType pVal );
    long GetGroupIndex ( );
    void PutGroupIndex (
        long pVal );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SystemVar (
        /*[out,retval]*/ GRSystemVarType * pVal ) = 0;
      virtual HRESULT __stdcall put_SystemVar (
        /*[in]*/ GRSystemVarType pVal ) = 0;
      virtual HRESULT __stdcall get_GroupIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("fe9aa791-4c55-4e06-a592-08d8df88a941"))
IGRFieldBox : IGRTextBox
{
    //
    // Property data
    //

    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("24de1ebe-5d9c-40ec-a11a-21af7d0c0d36"))
IGRSummaryBox : IGRTextBox
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryFun,put=PutSummaryFun))
    GRSummaryFun SummaryFun;
    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetRankNo,put=PutRankNo))
    long RankNo;
    __declspec(property(get=GetDisplayField,put=PutDisplayField))
    _bstr_t DisplayField;
    __declspec(property(get=GetConditionScript,put=PutConditionScript))
    _bstr_t ConditionScript;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRSummaryFun GetSummaryFun ( );
    void PutSummaryFun (
        GRSummaryFun pVal );
    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    double GetValue ( );
    void PutValue (
        double pVal );
    long GetRankNo ( );
    void PutRankNo (
        long pVal );
    _bstr_t GetDisplayField ( );
    void PutDisplayField (
        _bstr_t pVal );
    _bstr_t GetConditionScript ( );
    void PutConditionScript (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SummaryFun (
        /*[out,retval]*/ GRSummaryFun * pVal ) = 0;
      virtual HRESULT __stdcall put_SummaryFun (
        /*[in]*/ GRSummaryFun pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RankNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RankNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConditionScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConditionScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("c04a6148-7511-41ef-8062-bd89a0a92d40"))
IGRRichTextBox : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetCanShrink,put=PutCanShrink))
    VARIANT_BOOL CanShrink;
    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetRTF,put=PutRTF))
    _bstr_t RTF;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanShrink ( );
    void PutCanShrink (
        VARIANT_BOOL pVal );
    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    _bstr_t GetRTF ( );
    void PutRTF (
        _bstr_t pVal );
    HRESULT LoadFromFile (
        _bstr_t PathFile );
    HRESULT LoadFromMemory (
        unsigned char * pBuffer,
        long BytesCount );
    HRESULT _Prepare ( );
    HRESULT _FetchExportText (
        BSTR * pExportText );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CanGrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanGrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RTF (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pBuffer,
        /*[in]*/ long BytesCount ) = 0;
      virtual HRESULT __stdcall raw__Prepare ( ) = 0;
      virtual HRESULT __stdcall raw__FetchExportText (
        /*[out]*/ BSTR * pExportText ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("39a2c13a-d695-44bd-8339-a94fa64cb62b"))
IGRMemoBox : IGRTextBox
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    GRTextOrientation TextOrientation;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    double TextAngle;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    double CharacterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetHtmlTags,put=PutHtmlTags))
    VARIANT_BOOL HtmlTags;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetFlowTo,put=PutFlowTo))
    _bstr_t FlowTo;
    __declspec(property(get=GetAsFloat))
    double AsFloat;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetFlowTo ( );
    void PutFlowTo (
        _bstr_t pVal );
    double GetAsFloat ( );
    GRTextOrientation GetTextOrientation ( );
    void PutTextOrientation (
        GRTextOrientation pVal );
    double GetTextAngle ( );
    void PutTextAngle (
        double pVal );
    double GetCharacterSpacing ( );
    void PutCharacterSpacing (
        double pVal );
    double GetLineSpacing ( );
    void PutLineSpacing (
        double pVal );
    VARIANT_BOOL GetHtmlTags ( );
    void PutHtmlTags (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FlowTo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FlowTo (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AsFloat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_TextOrientation (
        /*[out,retval]*/ GRTextOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOrientation (
        /*[in]*/ GRTextOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CharacterSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CharacterSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HtmlTags (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HtmlTags (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("c4aca069-b92c-401a-b175-354e00d538d9"))
IGRLine : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetLinePen))
    IGRPenPtr LinePen;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    IGRPenPtr GetLinePen ( );
    double GetX1 ( );
    void PutX1 (
        double pVal );
    double GetY1 ( );
    void PutY1 (
        double pVal );
    double GetX2 ( );
    void PutX2 (
        double pVal );
    double GetY2 ( );
    void PutY2 (
        double pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("530a8e53-dfd5-4b95-a4f3-636e00d801d8"))
IGRBarcode : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetPDF417ErrorLevel,put=PutPDF417ErrorLevel))
    long PDF417ErrorLevel;
    __declspec(property(get=GetPDF417Simple,put=PutPDF417Simple))
    VARIANT_BOOL PDF417Simple;
    __declspec(property(get=GetBarcodeType,put=PutBarcodeType))
    GRBarcodeType BarcodeType;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    GRStringAlignment Alignment;
    __declspec(property(get=GetBarRatio,put=PutBarRatio))
    double BarRatio;
    __declspec(property(get=GetBarWidth,put=PutBarWidth))
    double BarWidth;
    __declspec(property(get=GetCaptionPosition,put=PutCaptionPosition))
    GRBarcodeCaptionPosition CaptionPosition;
    __declspec(property(get=GetCaptionAlignment,put=PutCaptionAlignment))
    GRStringAlignment CaptionAlignment;
    __declspec(property(get=GetCheckSum,put=PutCheckSum))
    VARIANT_BOOL CheckSum;
    __declspec(property(get=GetQRCodeErrorLevel,put=PutQRCodeErrorLevel))
    long QRCodeErrorLevel;
    __declspec(property(get=GetDirection,put=PutDirection))
    GRBarcodeDirection Direction;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetQRCodeVersion,put=PutQRCodeVersion))
    long QRCodeVersion;
    __declspec(property(get=GetQRCodeMask,put=PutQRCodeMask))
    long QRCodeMask;
    __declspec(property(get=GetDtmxEncoding,put=PutDtmxEncoding))
    GRDtmxEncoding DtmxEncoding;
    __declspec(property(get=GetDtmxMatrixSize,put=PutDtmxMatrixSize))
    GRDtmxMatrixSize DtmxMatrixSize;
    __declspec(property(get=GetDtmxModuleSize,put=PutDtmxModuleSize))
    long DtmxModuleSize;
    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetDisplayText))
    _bstr_t DisplayText;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetPDF417Rows,put=PutPDF417Rows))
    long PDF417Rows;
    __declspec(property(get=GetPDF417Columns,put=PutPDF417Columns))
    long PDF417Columns;

    //
    // Wrapper methods for error-handling
    //

    GRBarcodeType GetBarcodeType ( );
    void PutBarcodeType (
        GRBarcodeType pVal );
    GRStringAlignment GetAlignment ( );
    void PutAlignment (
        GRStringAlignment pVal );
    double GetBarRatio ( );
    void PutBarRatio (
        double pVal );
    double GetBarWidth ( );
    void PutBarWidth (
        double pVal );
    GRBarcodeCaptionPosition GetCaptionPosition ( );
    void PutCaptionPosition (
        GRBarcodeCaptionPosition pVal );
    GRStringAlignment GetCaptionAlignment ( );
    void PutCaptionAlignment (
        GRStringAlignment pVal );
    VARIANT_BOOL GetCheckSum ( );
    void PutCheckSum (
        VARIANT_BOOL pVal );
    GRBarcodeDirection GetDirection ( );
    void PutDirection (
        GRBarcodeDirection pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetDisplayText ( );
    long GetPDF417Rows ( );
    void PutPDF417Rows (
        long pVal );
    long GetPDF417Columns ( );
    void PutPDF417Columns (
        long pVal );
    long GetPDF417ErrorLevel ( );
    void PutPDF417ErrorLevel (
        long pVal );
    VARIANT_BOOL GetPDF417Simple ( );
    void PutPDF417Simple (
        VARIANT_BOOL pVal );
    long GetQRCodeErrorLevel ( );
    void PutQRCodeErrorLevel (
        long pVal );
    long GetQRCodeVersion ( );
    void PutQRCodeVersion (
        long pVal );
    long GetQRCodeMask ( );
    void PutQRCodeMask (
        long pVal );
    GRDtmxEncoding GetDtmxEncoding ( );
    void PutDtmxEncoding (
        GRDtmxEncoding pVal );
    GRDtmxMatrixSize GetDtmxMatrixSize ( );
    void PutDtmxMatrixSize (
        GRDtmxMatrixSize pVal );
    long GetDtmxModuleSize ( );
    void PutDtmxModuleSize (
        long pVal );
    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarcodeType (
        /*[out,retval]*/ GRBarcodeType * pVal ) = 0;
      virtual HRESULT __stdcall put_BarcodeType (
        /*[in]*/ GRBarcodeType pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ GRStringAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ GRStringAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_BarRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BarRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BarWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BarWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionPosition (
        /*[out,retval]*/ GRBarcodeCaptionPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionPosition (
        /*[in]*/ GRBarcodeCaptionPosition pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionAlignment (
        /*[out,retval]*/ GRStringAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionAlignment (
        /*[in]*/ GRStringAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_CheckSum (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckSum (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ GRBarcodeDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ GRBarcodeDirection pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PDF417Rows (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDF417Rows (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDF417Columns (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDF417Columns (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDF417ErrorLevel (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDF417ErrorLevel (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDF417Simple (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDF417Simple (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_QRCodeErrorLevel (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_QRCodeErrorLevel (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_QRCodeVersion (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_QRCodeVersion (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_QRCodeMask (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_QRCodeMask (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DtmxEncoding (
        /*[out,retval]*/ GRDtmxEncoding * pVal ) = 0;
      virtual HRESULT __stdcall put_DtmxEncoding (
        /*[in]*/ GRDtmxEncoding pVal ) = 0;
      virtual HRESULT __stdcall get_DtmxMatrixSize (
        /*[out,retval]*/ GRDtmxMatrixSize * pVal ) = 0;
      virtual HRESULT __stdcall put_DtmxMatrixSize (
        /*[in]*/ GRDtmxMatrixSize pVal ) = 0;
      virtual HRESULT __stdcall get_DtmxModuleSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DtmxModuleSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("e66ebbf5-ed8d-44e7-8a6c-e6579adcc7d4"))
IGRChart : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetRecordset))
    IGRRecordsetPtr Recordset;
    __declspec(property(get=GetSeriesField,put=PutSeriesField))
    _bstr_t SeriesField;
    __declspec(property(get=GetSeriesAuto,put=PutSeriesAuto))
    VARIANT_BOOL SeriesAuto;
    __declspec(property(get=GetGroupField,put=PutGroupField))
    _bstr_t GroupField;
    __declspec(property(get=GetGroupAuto,put=PutGroupAuto))
    VARIANT_BOOL GroupAuto;
    __declspec(property(get=GetLegendVisible,put=PutLegendVisible))
    VARIANT_BOOL LegendVisible;
    __declspec(property(get=GetLegendValueVisible,put=PutLegendValueVisible))
    VARIANT_BOOL LegendValueVisible;
    __declspec(property(get=GetLegendShowSum,put=PutLegendShowSum))
    VARIANT_BOOL LegendShowSum;
    __declspec(property(get=GetLegendColumnCount,put=PutLegendColumnCount))
    long LegendColumnCount;
    __declspec(property(get=GetLegendAtBottom,put=PutLegendAtBottom))
    VARIANT_BOOL LegendAtBottom;
    __declspec(property(get=GetLegendSumLabel,put=PutLegendSumLabel))
    _bstr_t LegendSumLabel;
    __declspec(property(get=GetGroupCount,put=PutGroupCount))
    long GroupCount;
    __declspec(property(get=GetSeriesCount,put=PutSeriesCount))
    long SeriesCount;
    __declspec(property(get=GetSeriesCursor,put=PutSeriesCursor))
    GRDisplayCursor SeriesCursor;
    __declspec(property(get=GetLegendCursor,put=PutLegendCursor))
    GRDisplayCursor LegendCursor;
    __declspec(property(get=Get_SeriesCursorHandle))
    OLE_HANDLE _SeriesCursorHandle;
    __declspec(property(get=Get_LegendCursorHandle))
    OLE_HANDLE _LegendCursorHandle;
    __declspec(property(get=GetBarWidthPercent,put=PutBarWidthPercent))
    long BarWidthPercent;
    __declspec(property(get=GetNegativeAsZero,put=PutNegativeAsZero))
    VARIANT_BOOL NegativeAsZero;
    __declspec(property(get=GetBubbleScalePerCm,put=PutBubbleScalePerCm))
    double BubbleScalePerCm;
    __declspec(property(get=GetGroupLabel,put=PutGroupLabel))
    _bstr_t GroupLabel[];
    __declspec(property(get=GetSeriesLabel,put=PutSeriesLabel))
    _bstr_t SeriesLabel[];
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetTitleFont))
    IGRFontPtr TitleFont;
    __declspec(property(get=GetValueFont))
    IGRFontPtr ValueFont;
    __declspec(property(get=GetValue,put=PutValue))
    double Value[][];
    __declspec(property(get=GetValueCount))
    long ValueCount[];
    __declspec(property(get=GetChart3D,put=PutChart3D))
    VARIANT_BOOL Chart3D;
    __declspec(property(get=GetSingleSeriesColored,put=PutSingleSeriesColored))
    VARIANT_BOOL SingleSeriesColored;
    __declspec(property(get=GetFillColorCount))
    long FillColorCount;
    __declspec(property(get=GetFillColor))
    OLE_COLOR FillColor[];
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetXAxis))
    IGRChartAxisPtr XAxis;
    __declspec(property(get=GetYAxis))
    IGRChartAxisPtr YAxis;
    __declspec(property(get=GetY2Axis))
    IGRChartAxisPtr Y2Axis;
    __declspec(property(get=GetSeries))
    IGRChartSeriesCollectionPtr Series;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    IGRFontPtr GetTitleFont ( );
    IGRFontPtr GetValueFont ( );
    VARIANT_BOOL GetChart3D ( );
    void PutChart3D (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSingleSeriesColored ( );
    void PutSingleSeriesColored (
        VARIANT_BOOL pVal );
    IGRChartAxisPtr GetXAxis ( );
    IGRChartAxisPtr GetYAxis ( );
    IGRChartAxisPtr GetY2Axis ( );
    IGRChartSeriesCollectionPtr GetSeries ( );
    IGRRecordsetPtr GetRecordset ( );
    _bstr_t GetSeriesField ( );
    void PutSeriesField (
        _bstr_t pVal );
    VARIANT_BOOL GetSeriesAuto ( );
    void PutSeriesAuto (
        VARIANT_BOOL pVal );
    _bstr_t GetGroupField ( );
    void PutGroupField (
        _bstr_t pVal );
    VARIANT_BOOL GetGroupAuto ( );
    void PutGroupAuto (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLegendVisible ( );
    void PutLegendVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLegendValueVisible ( );
    void PutLegendValueVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLegendShowSum ( );
    void PutLegendShowSum (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLegendAtBottom ( );
    void PutLegendAtBottom (
        VARIANT_BOOL pVal );
    long GetLegendColumnCount ( );
    void PutLegendColumnCount (
        long pVal );
    _bstr_t GetLegendSumLabel ( );
    void PutLegendSumLabel (
        _bstr_t pVal );
    long GetGroupCount ( );
    void PutGroupCount (
        long pVal );
    long GetSeriesCount ( );
    void PutSeriesCount (
        long pVal );
    GRDisplayCursor GetSeriesCursor ( );
    void PutSeriesCursor (
        GRDisplayCursor pVal );
    GRDisplayCursor GetLegendCursor ( );
    void PutLegendCursor (
        GRDisplayCursor pVal );
    long GetBarWidthPercent ( );
    void PutBarWidthPercent (
        long pVal );
    VARIANT_BOOL GetNegativeAsZero ( );
    void PutNegativeAsZero (
        VARIANT_BOOL pVal );
    double GetBubbleScalePerCm ( );
    void PutBubbleScalePerCm (
        double pVal );
    _bstr_t GetGroupLabel (
        long GroupIndex );
    void PutGroupLabel (
        long GroupIndex,
        _bstr_t pVal );
    _bstr_t GetSeriesLabel (
        long SeriesIndex );
    void PutSeriesLabel (
        long SeriesIndex,
        _bstr_t pVal );
    double GetValue (
        long SeriesIndex,
        long GroupIndex );
    void PutValue (
        long SeriesIndex,
        long GroupIndex,
        double pVal );
    long GetValueCount (
        long SeriesIndex );
    long GetFillColorCount ( );
    OLE_COLOR GetFillColor (
        long Index );
    HRESULT AddFillColor (
        OLE_COLOR FillColor );
    HRESULT EmptyFillColors ( );
    HRESULT PrepareSnapShot ( );
    HRESULT SnapShot ( );
    VARIANT_BOOL LoadDataFromXML (
        _bstr_t XML,
        VARIANT_BOOL FirstSeries,
        VARIANT_BOOL AutoSeries,
        VARIANT_BOOL AutoGroup );
    VARIANT_BOOL LoadXYDataFromXML (
        _bstr_t XML,
        VARIANT_BOOL AutoSeries );
    VARIANT_BOOL LoadXYZDataFromXML (
        _bstr_t XML,
        VARIANT_BOOL AutoSeries );
    HRESULT AddXYValue (
        long SeriesIndex,
        double XVal,
        double YVal );
    HRESULT AddXYZValue (
        long SeriesIndex,
        double XVal,
        double YVal,
        double ZVal );
    HRESULT EmptyValues ( );
    HRESULT GetXYValue (
        long SeriesIndex,
        long Index,
        double * pXVal,
        double * pYVal );
    HRESULT GetXYZValue (
        long SeriesIndex,
        long Index,
        double * pXVal,
        double * pYVal,
        double * pZVal );
    _bstr_t GetValueText (
        long SeriesIndex,
        long GroupIndex );
    HRESULT SetValueText (
        long SeriesIndex,
        long GroupIndex,
        _bstr_t ValueText );
    HRESULT MapToRecordset (
        long SeriesIndex,
        long GroupIndex );
    OLE_HANDLE Get_SeriesCursorHandle ( );
    OLE_HANDLE Get_LegendCursorHandle ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleFont (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_ValueFont (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_Chart3D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Chart3D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SingleSeriesColored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SingleSeriesColored (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct IGRChartAxis * * pVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct IGRChartAxis * * pVal ) = 0;
      virtual HRESULT __stdcall get_Y2Axis (
        /*[out,retval]*/ struct IGRChartAxis * * pVal ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ struct IGRChartSeriesCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesAuto (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesAuto (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GroupField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GroupAuto (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupAuto (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LegendVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LegendValueVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendValueVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LegendShowSum (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendShowSum (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LegendAtBottom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendAtBottom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LegendColumnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendColumnCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LegendSumLabel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendSumLabel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GroupCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesCursor (
        /*[out,retval]*/ GRDisplayCursor * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesCursor (
        /*[in]*/ GRDisplayCursor pVal ) = 0;
      virtual HRESULT __stdcall get_LegendCursor (
        /*[out,retval]*/ GRDisplayCursor * pVal ) = 0;
      virtual HRESULT __stdcall put_LegendCursor (
        /*[in]*/ GRDisplayCursor pVal ) = 0;
      virtual HRESULT __stdcall get_BarWidthPercent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BarWidthPercent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NegativeAsZero (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_NegativeAsZero (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BubbleScalePerCm (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BubbleScalePerCm (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroupLabel (
        /*[in]*/ long GroupIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupLabel (
        /*[in]*/ long GroupIndex,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SeriesLabel (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SeriesLabel (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long GroupIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long GroupIndex,
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ValueCount (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FillColorCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFillColor (
        /*[in]*/ OLE_COLOR FillColor ) = 0;
      virtual HRESULT __stdcall raw_EmptyFillColors ( ) = 0;
      virtual HRESULT __stdcall raw_PrepareSnapShot ( ) = 0;
      virtual HRESULT __stdcall raw_SnapShot ( ) = 0;
      virtual HRESULT __stdcall raw_LoadDataFromXML (
        /*[in]*/ BSTR XML,
        /*[in]*/ VARIANT_BOOL FirstSeries,
        /*[in]*/ VARIANT_BOOL AutoSeries,
        /*[in]*/ VARIANT_BOOL AutoGroup,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_LoadXYDataFromXML (
        /*[in]*/ BSTR XML,
        /*[in]*/ VARIANT_BOOL AutoSeries,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_LoadXYZDataFromXML (
        /*[in]*/ BSTR XML,
        /*[in]*/ VARIANT_BOOL AutoSeries,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_AddXYValue (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ double XVal,
        /*[in]*/ double YVal ) = 0;
      virtual HRESULT __stdcall raw_AddXYZValue (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ double XVal,
        /*[in]*/ double YVal,
        /*[in]*/ double ZVal ) = 0;
      virtual HRESULT __stdcall raw_EmptyValues ( ) = 0;
      virtual HRESULT __stdcall raw_GetXYValue (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long Index,
        /*[out]*/ double * pXVal,
        /*[out]*/ double * pYVal ) = 0;
      virtual HRESULT __stdcall raw_GetXYZValue (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long Index,
        /*[out]*/ double * pXVal,
        /*[out]*/ double * pYVal,
        /*[out]*/ double * pZVal ) = 0;
      virtual HRESULT __stdcall raw_GetValueText (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long GroupIndex,
        /*[out,retval]*/ BSTR * pValueText ) = 0;
      virtual HRESULT __stdcall raw_SetValueText (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long GroupIndex,
        /*[in]*/ BSTR ValueText ) = 0;
      virtual HRESULT __stdcall raw_MapToRecordset (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long GroupIndex ) = 0;
      virtual HRESULT __stdcall get__SeriesCursorHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get__LegendCursorHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("93cd76f7-5439-437f-8fa5-a650f2ca773c"))
IGRRecordset : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetFields))
    IGRFieldsPtr Fields;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRecordNo))
    long RecordNo;
    __declspec(property(get=GetConnectionString,put=PutConnectionString))
    _bstr_t ConnectionString;
    __declspec(property(get=GetQuerySQL,put=PutQuerySQL))
    _bstr_t QuerySQL;
    __declspec(property(get=GetSkipQuery,put=PutSkipQuery))
    VARIANT_BOOL SkipQuery;
    __declspec(property(get=GetXmlTableName,put=PutXmlTableName))
    _bstr_t XmlTableName;
    __declspec(property(get=GetSortFields,put=PutSortFields))
    _bstr_t SortFields;
    __declspec(property(get=GetSortAsc,put=PutSortAsc))
    VARIANT_BOOL SortAsc;
    __declspec(property(get=GetSortCaseSensitive,put=PutSortCaseSensitive))
    VARIANT_BOOL SortCaseSensitive;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetFetchRecordScript,put=PutFetchRecordScript))
    _bstr_t FetchRecordScript;
    __declspec(property(get=GetBeforePostRecordScript,put=PutBeforePostRecordScript))
    _bstr_t BeforePostRecordScript;
    __declspec(property(get=GetProcessRecordScript,put=PutProcessRecordScript))
    _bstr_t ProcessRecordScript;
    __declspec(property(get=GetPageProcessRecordScript,put=PutPageProcessRecordScript))
    _bstr_t PageProcessRecordScript;

    //
    // Wrapper methods for error-handling
    //

    IGRFieldsPtr GetFields ( );
    long GetRecordCount ( );
    long GetRecordNo ( );
    _bstr_t GetConnectionString ( );
    void PutConnectionString (
        _bstr_t pVal );
    _bstr_t GetQuerySQL ( );
    void PutQuerySQL (
        _bstr_t pVal );
    VARIANT_BOOL GetSkipQuery ( );
    void PutSkipQuery (
        VARIANT_BOOL pVal );
    _bstr_t GetXmlTableName ( );
    void PutXmlTableName (
        _bstr_t pVal );
    _bstr_t GetSortFields ( );
    void PutSortFields (
        _bstr_t pVal );
    VARIANT_BOOL GetSortAsc ( );
    void PutSortAsc (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSortCaseSensitive ( );
    void PutSortCaseSensitive (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEditable ( );
    void PutEditable (
        VARIANT_BOOL pVal );
    _bstr_t GetFetchRecordScript ( );
    void PutFetchRecordScript (
        _bstr_t pVal );
    _bstr_t GetBeforePostRecordScript ( );
    void PutBeforePostRecordScript (
        _bstr_t pVal );
    _bstr_t GetProcessRecordScript ( );
    void PutProcessRecordScript (
        _bstr_t pVal );
    _bstr_t GetPageProcessRecordScript ( );
    void PutPageProcessRecordScript (
        _bstr_t pVal );
    IGRFieldPtr FieldByName (
        _bstr_t Name );
    IGRFieldPtr FieldByDBName (
        _bstr_t Name );
    HRESULT Append ( );
    HRESULT Edit ( );
    HRESULT Cancel ( );
    HRESULT Post ( );
    HRESULT First ( );
    HRESULT Next ( );
    HRESULT Prior ( );
    HRESULT Last ( );
    HRESULT MoveBy (
        int Delta );
    VARIANT_BOOL Bof ( );
    VARIANT_BOOL Eof ( );
    HRESULT MoveTo (
        long RecordNo );
    HRESULT Empty ( );
    IGRFieldPtr AddField (
        _bstr_t Name,
        GRFieldType FieldType );
    HRESULT RemoveAllFields ( );
    VARIANT_BOOL Resort (
        _bstr_t Fields,
        VARIANT_BOOL Ascending,
        VARIANT_BOOL CaseSensitive );
    _bstr_t SaveDataToXML ( );
    VARIANT_BOOL LoadData (
        _bstr_t File );
    VARIANT_BOOL LoadDataFromXML (
        _bstr_t XMLText );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct IGRFields * * pVal ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RecordNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_QuerySQL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_QuerySQL (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SkipQuery (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipQuery (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_XmlTableName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_XmlTableName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SortFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SortFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SortAsc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SortAsc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SortCaseSensitive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SortCaseSensitive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FetchRecordScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FetchRecordScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeforePostRecordScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeforePostRecordScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProcessRecordScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProcessRecordScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageProcessRecordScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageProcessRecordScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_FieldByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_FieldByDBName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_Append ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall raw_Post ( ) = 0;
      virtual HRESULT __stdcall raw_First ( ) = 0;
      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Prior ( ) = 0;
      virtual HRESULT __stdcall raw_Last ( ) = 0;
      virtual HRESULT __stdcall raw_MoveBy (
        /*[in]*/ int Delta ) = 0;
      virtual HRESULT __stdcall raw_Bof (
        /*[out,retval]*/ VARIANT_BOOL * IsBegin ) = 0;
      virtual HRESULT __stdcall raw_Eof (
        /*[out,retval]*/ VARIANT_BOOL * IsEnd ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ long RecordNo ) = 0;
      virtual HRESULT __stdcall raw_Empty ( ) = 0;
      virtual HRESULT __stdcall raw_AddField (
        /*[in]*/ BSTR Name,
        /*[in]*/ GRFieldType FieldType,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllFields ( ) = 0;
      virtual HRESULT __stdcall raw_Resort (
        /*[in]*/ BSTR Fields,
        /*[in]*/ VARIANT_BOOL Ascending,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_SaveDataToXML (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadData (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadDataFromXML (
        /*[in]*/ BSTR XMLText,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("c3112650-36d2-4928-9d6c-c0a21ccc1eba"))
IGRCrossTab : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetHCrossFields,put=PutHCrossFields))
    _bstr_t HCrossFields;
    __declspec(property(get=GetVCrossFields,put=PutVCrossFields))
    _bstr_t VCrossFields;
    __declspec(property(get=GetListCols,put=PutListCols))
    long ListCols;
    __declspec(property(get=GetTotalCols,put=PutTotalCols))
    long TotalCols;
    __declspec(property(get=GetSubtotalCols,put=PutSubtotalCols))
    long SubtotalCols;
    __declspec(property(get=GetHResort,put=PutHResort))
    VARIANT_BOOL HResort;
    __declspec(property(get=GetHSortAsc,put=PutHSortAsc))
    VARIANT_BOOL HSortAsc;
    __declspec(property(get=GetVResort,put=PutVResort))
    VARIANT_BOOL VResort;
    __declspec(property(get=GetVSortAsc,put=PutVSortAsc))
    VARIANT_BOOL VSortAsc;
    __declspec(property(get=GetRecordset))
    IGRRecordsetPtr Recordset;
    __declspec(property(get=GetDisabledSumFields,put=PutDisabledSumFields))
    _bstr_t DisabledSumFields;
    __declspec(property(get=GetHTotalAtFirst,put=PutHTotalAtFirst))
    VARIANT_BOOL HTotalAtFirst;
    __declspec(property(get=GetHPercentColumns,put=PutHPercentColumns))
    _bstr_t HPercentColumns;
    __declspec(property(get=GetVPercentColumns,put=PutVPercentColumns))
    _bstr_t VPercentColumns;
    __declspec(property(get=GetTotalExcludeColumns,put=PutTotalExcludeColumns))
    _bstr_t TotalExcludeColumns;
    __declspec(property(get=GetTotalHPercentColumns,put=PutTotalHPercentColumns))
    _bstr_t TotalHPercentColumns;
    __declspec(property(get=GetTotalVPercentColumns,put=PutTotalVPercentColumns))
    _bstr_t TotalVPercentColumns;
    __declspec(property(get=GetPercentFormat,put=PutPercentFormat))
    _bstr_t PercentFormat;
    __declspec(property(get=GetHCrossPeriodType,put=PutHCrossPeriodType))
    GRPeriodType HCrossPeriodType;
    __declspec(property(get=GetBeginDateParameter,put=PutBeginDateParameter))
    _bstr_t BeginDateParameter;
    __declspec(property(get=GetEndDateParameter,put=PutEndDateParameter))
    _bstr_t EndDateParameter;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetGroupAutoSum,put=PutGroupAutoSum))
    VARIANT_BOOL GroupAutoSum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHCrossFields ( );
    void PutHCrossFields (
        _bstr_t pVal );
    _bstr_t GetVCrossFields ( );
    void PutVCrossFields (
        _bstr_t pVal );
    long GetListCols ( );
    void PutListCols (
        long pVal );
    long GetTotalCols ( );
    void PutTotalCols (
        long pVal );
    long GetSubtotalCols ( );
    void PutSubtotalCols (
        long pVal );
    VARIANT_BOOL GetHResort ( );
    void PutHResort (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHSortAsc ( );
    void PutHSortAsc (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetVResort ( );
    void PutVResort (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetVSortAsc ( );
    void PutVSortAsc (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHTotalAtFirst ( );
    void PutHTotalAtFirst (
        VARIANT_BOOL pVal );
    _bstr_t GetHPercentColumns ( );
    void PutHPercentColumns (
        _bstr_t pVal );
    _bstr_t GetVPercentColumns ( );
    void PutVPercentColumns (
        _bstr_t pVal );
    _bstr_t GetTotalExcludeColumns ( );
    void PutTotalExcludeColumns (
        _bstr_t pVal );
    _bstr_t GetTotalHPercentColumns ( );
    void PutTotalHPercentColumns (
        _bstr_t pVal );
    _bstr_t GetTotalVPercentColumns ( );
    void PutTotalVPercentColumns (
        _bstr_t pVal );
    _bstr_t GetPercentFormat ( );
    void PutPercentFormat (
        _bstr_t pVal );
    GRPeriodType GetHCrossPeriodType ( );
    void PutHCrossPeriodType (
        GRPeriodType pVal );
    _bstr_t GetBeginDateParameter ( );
    void PutBeginDateParameter (
        _bstr_t pVal );
    _bstr_t GetEndDateParameter ( );
    void PutEndDateParameter (
        _bstr_t pVal );
    VARIANT_BOOL GetGroupAutoSum ( );
    void PutGroupAutoSum (
        VARIANT_BOOL pVal );
    IGRRecordsetPtr GetRecordset ( );
    HRESULT HBeginAddItem ( );
    HRESULT HEndAddItem ( );
    HRESULT VBeginAddItem ( );
    HRESULT VEndAddItem ( );
    DATE GetCurPeriodBeginDate ( );
    DATE GetCurPeriodEndDate ( );
    _bstr_t GetDisabledSumFields ( );
    void PutDisabledSumFields (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HCrossFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HCrossFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VCrossFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VCrossFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ListCols (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ListCols (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TotalCols (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalCols (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SubtotalCols (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SubtotalCols (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HResort (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HResort (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HSortAsc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HSortAsc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VResort (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_VResort (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VSortAsc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_VSortAsc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HTotalAtFirst (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HTotalAtFirst (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HPercentColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HPercentColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VPercentColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VPercentColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TotalExcludeColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalExcludeColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TotalHPercentColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalHPercentColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TotalVPercentColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalVPercentColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PercentFormat (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentFormat (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HCrossPeriodType (
        /*[out,retval]*/ GRPeriodType * pVal ) = 0;
      virtual HRESULT __stdcall put_HCrossPeriodType (
        /*[in]*/ GRPeriodType pVal ) = 0;
      virtual HRESULT __stdcall get_BeginDateParameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeginDateParameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EndDateParameter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndDateParameter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GroupAutoSum (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupAutoSum (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall raw_HBeginAddItem ( ) = 0;
      virtual HRESULT __stdcall raw_HEndAddItem ( ) = 0;
      virtual HRESULT __stdcall raw_VBeginAddItem ( ) = 0;
      virtual HRESULT __stdcall raw_VEndAddItem ( ) = 0;
      virtual HRESULT __stdcall raw_GetCurPeriodBeginDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurPeriodEndDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_DisabledSumFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisabledSumFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("f00ce27d-d1e3-4ef6-9877-bf3233ebf551"))
IGRFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRFieldPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRFieldPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRFieldPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRFieldPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRField * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("04cea260-dd00-4954-a81f-f0a201343cb9"))
IGRField : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDBFieldName,put=PutDBFieldName))
    _bstr_t DBFieldName;
    __declspec(property(get=GetFieldType,put=PutFieldType))
    GRFieldType FieldType;
    __declspec(property(get=GetLength,put=PutLength))
    long Length;
    __declspec(property(get=GetRTrimBlankChars,put=PutRTrimBlankChars))
    VARIANT_BOOL RTrimBlankChars;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAsBoolean,put=PutAsBoolean))
    VARIANT_BOOL AsBoolean;
    __declspec(property(get=GetAsCurrency,put=PutAsCurrency))
    CURRENCY AsCurrency;
    __declspec(property(get=GetAsDateTime,put=PutAsDateTime))
    DATE AsDateTime;
    __declspec(property(get=GetAsFloat,put=PutAsFloat))
    double AsFloat;
    __declspec(property(get=GetAsInteger,put=PutAsInteger))
    long AsInteger;
    __declspec(property(get=GetAsString,put=PutAsString))
    _bstr_t AsString;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetDisplayText,put=PutDisplayText))
    _bstr_t DisplayText;
    __declspec(property(get=GetIsNull))
    VARIANT_BOOL IsNull;
    __declspec(property(get=GetDataSize))
    long DataSize;
    __declspec(property(get=GetDataBuffer))
    LONG_PTR DataBuffer;
    __declspec(property(get=GetRunningDBField))
    _bstr_t RunningDBField;
    __declspec(property(get=GetGetDisplayTextScript,put=PutGetDisplayTextScript))
    _bstr_t GetDisplayTextScript;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDBFieldName ( );
    void PutDBFieldName (
        _bstr_t pVal );
    GRFieldType GetFieldType ( );
    void PutFieldType (
        GRFieldType pVal );
    long GetLength ( );
    void PutLength (
        long pVal );
    VARIANT_BOOL GetRTrimBlankChars ( );
    void PutRTrimBlankChars (
        VARIANT_BOOL pVal );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pVal );
    VARIANT_BOOL GetAsBoolean ( );
    void PutAsBoolean (
        VARIANT_BOOL pVal );
    CURRENCY GetAsCurrency ( );
    void PutAsCurrency (
        const CURRENCY & pVal );
    DATE GetAsDateTime ( );
    void PutAsDateTime (
        DATE pVal );
    double GetAsFloat ( );
    void PutAsFloat (
        double pVal );
    long GetAsInteger ( );
    void PutAsInteger (
        long pVal );
    _bstr_t GetAsString ( );
    void PutAsString (
        _bstr_t pVal );
    _bstr_t GetDisplayText ( );
    void PutDisplayText (
        _bstr_t pVal );
    VARIANT_BOOL GetIsNull ( );
    long GetDataSize ( );
    LONG_PTR GetDataBuffer ( );
    _bstr_t GetRunningDBField ( );
    _bstr_t GetGetDisplayTextScript ( );
    void PutGetDisplayTextScript (
        _bstr_t pVal );
    HRESULT Clear ( );
    HRESULT LoadFromFile (
        _bstr_t PathFile );
    HRESULT LoadFromBinary (
        struct IGRBinaryObject * pBinaryObject );
    HRESULT LoadFromMemory (
        unsigned char * pBuffer,
        long ByteCount );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DBFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DBFieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FieldType (
        /*[out,retval]*/ GRFieldType * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldType (
        /*[in]*/ GRFieldType pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RTrimBlankChars (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RTrimBlankChars (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AsBoolean (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AsBoolean (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AsCurrency (
        /*[out,retval]*/ CURRENCY * pVal ) = 0;
      virtual HRESULT __stdcall put_AsCurrency (
        /*[in]*/ CURRENCY pVal ) = 0;
      virtual HRESULT __stdcall get_AsDateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_AsDateTime (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_AsFloat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AsFloat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AsInteger (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AsInteger (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AsString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AsString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsNull (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DataSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DataBuffer (
        /*[out,retval]*/ LONG_PTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RunningDBField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GetDisplayTextScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GetDisplayTextScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_LoadFromBinary (
        /*[in]*/ struct IGRBinaryObject * pBinaryObject ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pBuffer,
        /*[in]*/ long ByteCount ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("45f9b62d-9e33-484a-bb3c-bd58007bdaa2"))
IGRBinaryObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataSize))
    long DataSize;
    __declspec(property(get=GetAsBase64Text))
    _bstr_t AsBase64Text;
    __declspec(property(get=GetDataBuf))
    OLE_HANDLE DataBuf;

    //
    // Wrapper methods for error-handling
    //

    long GetDataSize ( );
    _bstr_t GetAsBase64Text ( );
    VARIANT_BOOL LoadFromFile (
        _bstr_t PathFile );
    VARIANT_BOOL LoadFromField (
        struct IGRField * Field );
    VARIANT_BOOL LoadFromBase64Text (
        _bstr_t Base64Text );
    VARIANT_BOOL LoadFromVariant (
        const _variant_t & Buf );
    VARIANT_BOOL SaveToFile (
        _bstr_t PathFile );
    _variant_t SaveToVariant ( );
    HRESULT LoadFromMemory (
        unsigned char * pData,
        long ByteCount );
    OLE_HANDLE GetDataBuf ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AsBase64Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR PathFile,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromField (
        /*[in]*/ struct IGRField * Field,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromBase64Text (
        /*[in]*/ BSTR Base64Text,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromVariant (
        /*[in]*/ VARIANT Buf,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR PathFile,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToVariant (
        /*[out,retval]*/ VARIANT * pBuf ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pData,
        /*[in]*/ long ByteCount ) = 0;
      virtual HRESULT __stdcall get_DataBuf (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
};

struct __declspec(uuid("17807bd9-44bc-4550-b104-c2a074786bff"))
IGRPicture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    GRPictureType Type;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetOlePicture,put=PutOlePicture))
    IPicturePtr OlePicture;

    //
    // Wrapper methods for error-handling
    //

    GRPictureType GetType ( );
    long GetWidth ( );
    long GetHeight ( );
    IPicturePtr GetOlePicture ( );
    void PutOlePicture (
        struct IPicture * pVal );
    HRESULT Render (
        OLE_HANDLE hdc,
        long Left,
        long Top,
        long Width,
        long Height,
        GRPictureAlignment PictureAlignment,
        GRPictureSizeMode PictureSizeMode,
        unsigned long BackColor,
        VARIANT_BOOL FillBack,
        GRPictureTransparentMode Transparent,
        GRPictureRotateMode RotateMode );
    VARIANT_BOOL LoadFromFile (
        _bstr_t PathFile );
    VARIANT_BOOL LoadFromBinary (
        struct IGRBinaryObject * pBinaryObject );
    VARIANT_BOOL SaveToFile (
        _bstr_t PathFile );
    HRESULT LoadFromMemory (
        unsigned char * pData,
        long ByteCount );
    HRESULT _GetDataBuffer (
        OLE_HANDLE * ppData,
        long * pBytesCount );
    VARIANT_BOOL LoadFromField (
        _bstr_t DataField );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ GRPictureType * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OlePicture (
        /*[out,retval]*/ struct IPicture * * pVal ) = 0;
      virtual HRESULT __stdcall put_OlePicture (
        /*[in]*/ struct IPicture * pVal ) = 0;
      virtual HRESULT __stdcall raw_Render (
        /*[in]*/ OLE_HANDLE hdc,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ GRPictureAlignment PictureAlignment,
        /*[in]*/ GRPictureSizeMode PictureSizeMode,
        /*[in]*/ unsigned long BackColor,
        /*[in]*/ VARIANT_BOOL FillBack,
        /*[in]*/ GRPictureTransparentMode Transparent,
        /*[in]*/ GRPictureRotateMode RotateMode ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR PathFile,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromBinary (
        /*[in]*/ struct IGRBinaryObject * pBinaryObject,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR PathFile,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pData,
        /*[in]*/ long ByteCount ) = 0;
      virtual HRESULT __stdcall raw__GetDataBuffer (
        /*[out]*/ OLE_HANDLE * ppData,
        /*[out]*/ long * pBytesCount ) = 0;
      virtual HRESULT __stdcall raw_LoadFromField (
        /*[in]*/ BSTR DataField,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
};

struct __declspec(uuid("c04a6148-7500-41ef-8062-bd89a0a92d40"))
IGRPictureBox : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    GRPictureAlignment Alignment;
    __declspec(property(get=GetSizeMode,put=PutSizeMode))
    GRPictureSizeMode SizeMode;
    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetImageIndex,put=PutImageIndex))
    long ImageIndex;
    __declspec(property(get=GetImageFile,put=PutImageFile))
    _bstr_t ImageFile;
    __declspec(property(get=GetTransparentMode,put=PutTransparentMode))
    GRPictureTransparentMode TransparentMode;
    __declspec(property(get=GetRotateMode,put=PutRotateMode))
    GRPictureRotateMode RotateMode;
    __declspec(property(get=GetPicture,put=PutPicture))
    IGRPicturePtr Picture;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    GRPictureAlignment GetAlignment ( );
    void PutAlignment (
        GRPictureAlignment pVal );
    GRPictureSizeMode GetSizeMode ( );
    void PutSizeMode (
        GRPictureSizeMode pVal );
    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    long GetImageIndex ( );
    void PutImageIndex (
        long pVal );
    _bstr_t GetImageFile ( );
    void PutImageFile (
        _bstr_t pVal );
    GRPictureTransparentMode GetTransparentMode ( );
    void PutTransparentMode (
        GRPictureTransparentMode pVal );
    GRPictureRotateMode GetRotateMode ( );
    void PutRotateMode (
        GRPictureRotateMode pVal );
    IGRPicturePtr GetPicture ( );
    void PutPicture (
        struct IGRPicture * pVal );
    HRESULT LoadFromFile (
        _bstr_t PathFile );
    HRESULT LoadFromBinary (
        struct IGRBinaryObject * pBinaryObject );
    HRESULT LoadFromMemory (
        unsigned char * pBuffer,
        long BytesCount );
    HRESULT LoadBmpPicture (
        struct IPicture * newVal );
    HRESULT AttachSystemImage (
        GRSystemImage SystemImage );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ GRPictureAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ GRPictureAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_SizeMode (
        /*[out,retval]*/ GRPictureSizeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeMode (
        /*[in]*/ GRPictureSizeMode pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ImageIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ImageFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TransparentMode (
        /*[out,retval]*/ GRPictureTransparentMode * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparentMode (
        /*[in]*/ GRPictureTransparentMode pVal ) = 0;
      virtual HRESULT __stdcall get_RotateMode (
        /*[out,retval]*/ GRPictureRotateMode * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateMode (
        /*[in]*/ GRPictureRotateMode pVal ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct IGRPicture * * pVal ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct IGRPicture * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_LoadFromBinary (
        /*[in]*/ struct IGRBinaryObject * pBinaryObject ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pBuffer,
        /*[in]*/ long BytesCount ) = 0;
      virtual HRESULT __stdcall raw_LoadBmpPicture (
        /*[in]*/ struct IPicture * newVal ) = 0;
      virtual HRESULT __stdcall raw_AttachSystemImage (
        /*[in]*/ GRSystemImage SystemImage ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("01056f48-f4ab-4d9f-be45-614f3313717d"))
IGRImageList : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRPicturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    IGRPicturePtr GetItem (
        long Index );
    long GetCount ( );
    HRESULT Add (
        struct IGRPicture * pPicture );
    HRESULT AddFromFile (
        _bstr_t PathFile );
    HRESULT AddFromBinary (
        struct IGRBinaryObject * pBinaryObject );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT AddFromMemory (
        unsigned char * pData,
        long ByteCount );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRPicture * * ppPicture ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IGRPicture * pPicture ) = 0;
      virtual HRESULT __stdcall raw_AddFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_AddFromBinary (
        /*[in]*/ struct IGRBinaryObject * pBinaryObject ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddFromMemory (
        /*[in]*/ unsigned char * pData,
        /*[in]*/ long ByteCount ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("5eb6e1e6-00b9-4469-ab22-ee4375d70e39"))
IGRGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetByUnit,put=PutByUnit))
    VARIANT_BOOL ByUnit;
    __declspec(property(get=GetCCPInnerX))
    double CCPInnerX;
    __declspec(property(get=GetCCPInnerY))
    double CCPInnerY;
    __declspec(property(get=GetCCPOuterX))
    double CCPOuterX;
    __declspec(property(get=GetCCPOuterY))
    double CCPOuterY;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    HRESULT MoveTo (
        double x,
        double y );
    HRESULT LineTo (
        double x,
        double y );
    HRESULT FillRect (
        double x,
        double y,
        double Width,
        double Height,
        OLE_COLOR FillColor );
    HRESULT DrawPixel (
        double x,
        double y,
        OLE_COLOR Color );
    HRESULT Rectangle (
        double x,
        double y,
        double Width,
        double Height,
        VARIANT_BOOL ToFill );
    HRESULT RoundRect (
        double x,
        double y,
        double Width,
        double Height,
        long cornerx,
        long cornery,
        VARIANT_BOOL ToFill );
    HRESULT Ellipse (
        double x,
        double y,
        double Width,
        double Height,
        VARIANT_BOOL ToFill );
    HRESULT Pie (
        double x,
        double y,
        double r,
        double BeginAngleDegree,
        double EndAngleDegree,
        VARIANT_BOOL ToFill );
    HRESULT Arc (
        double cx,
        double cy,
        double r,
        double BeginAngleDegree,
        double EndAngleDegree );
    HRESULT EllipseArc (
        double Left,
        double Top,
        double Width,
        double Height,
        double BeginAngleDegree,
        double EndAngleDegree );
    HRESULT EllipsePie (
        double Left,
        double Top,
        double Width,
        double Height,
        double BeginAngleDegree,
        double EndAngleDegree,
        VARIANT_BOOL ToFill );
    HRESULT DrawLabelText (
        _bstr_t String,
        double x,
        double y );
    HRESULT DrawRotateText (
        _bstr_t String,
        double x,
        double y,
        double RotateDegree );
    HRESULT DrawText (
        _bstr_t String,
        double x,
        double y,
        double Width,
        double Height,
        GRTextAlign TextAlign,
        VARIANT_BOOL WordWrap );
    HRESULT DrawFormatText (
        _bstr_t String,
        double x,
        double y,
        double Width,
        double Height,
        struct IGRTextFormat * TextFormat );
    double CalcLabelTextWidth (
        _bstr_t String );
    double CalcLabelTextHeight (
        _bstr_t String );
    long CalcTextOutLen (
        double Width,
        double Height,
        _bstr_t Text,
        VARIANT_BOOL WordWrap );
    HRESULT DrawPicture (
        struct IGRPicture * pPicture,
        double Left,
        double Top,
        double Width,
        double Height,
        GRPictureAlignment PictureAlignment,
        GRPictureSizeMode PictureSizeMode,
        GRPictureTransparentMode Transparent );
    HRESULT SelectFont (
        struct IGRFont * pFont );
    HRESULT RestoreFont ( );
    HRESULT FontPointChangeTo (
        double Point );
    HRESULT FontPointRestore ( );
    HRESULT SelectTextColor (
        OLE_COLOR TextColor );
    HRESULT RestoreTextColor ( );
    HRESULT SelectPen (
        double PenWidth,
        OLE_COLOR PenColor,
        GRPenStyle PenStyle );
    HRESULT RestorePen ( );
    HRESULT SelectFillColor (
        OLE_COLOR BrushColor );
    HRESULT RestoreFillColor ( );
    HRESULT PushClipRect (
        double x,
        double y,
        double Width,
        double Height );
    HRESULT PopClipRect ( );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetByUnit ( );
    void PutByUnit (
        VARIANT_BOOL pVal );
    double GetCCPInnerX ( );
    double GetCCPInnerY ( );
    double GetCCPOuterX ( );
    double GetCCPOuterY ( );
    HRESULT CurveTo (
        double xInnerControl,
        double yInnerControl,
        double xOuterControl,
        double yOuterControl,
        double xEnd,
        double yEnd );
    HRESULT CalcCurveControlPoints (
        double xFirst,
        double yFirst,
        double xMiddle,
        double yMiddle,
        double xAfter,
        double yAfter );
    HRESULT DrawPointMarker (
        GRPointMarkerStyle MarkerStyle,
        double cx,
        double cy,
        double size );
    HRESULT DrawFormatTextShrinkToFit (
        _bstr_t String,
        double x,
        double y,
        double Width,
        double Height,
        struct IGRTextFormat * TextFormat );
    double CalcDrawFormatTextHeight (
        _bstr_t String,
        double Width,
        struct IGRTextFormat * TextFormat );
    double CalcDrawFormatTextWidth (
        _bstr_t String,
        struct IGRTextFormat * TextFormat );
    long CalcDrawFormatTextOutLen (
        _bstr_t Text,
        double Width,
        double Height,
        struct IGRTextFormat * TextFormat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_LineTo (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_FillRect (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ OLE_COLOR FillColor ) = 0;
      virtual HRESULT __stdcall raw_DrawPixel (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall raw_Rectangle (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT_BOOL ToFill ) = 0;
      virtual HRESULT __stdcall raw_RoundRect (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ long cornerx,
        /*[in]*/ long cornery,
        /*[in]*/ VARIANT_BOOL ToFill ) = 0;
      virtual HRESULT __stdcall raw_Ellipse (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT_BOOL ToFill ) = 0;
      virtual HRESULT __stdcall raw_Pie (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double r,
        /*[in]*/ double BeginAngleDegree,
        /*[in]*/ double EndAngleDegree,
        /*[in]*/ VARIANT_BOOL ToFill ) = 0;
      virtual HRESULT __stdcall raw_Arc (
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double r,
        /*[in]*/ double BeginAngleDegree,
        /*[in]*/ double EndAngleDegree ) = 0;
      virtual HRESULT __stdcall raw_EllipseArc (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ double BeginAngleDegree,
        /*[in]*/ double EndAngleDegree ) = 0;
      virtual HRESULT __stdcall raw_EllipsePie (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ double BeginAngleDegree,
        /*[in]*/ double EndAngleDegree,
        /*[in]*/ VARIANT_BOOL ToFill ) = 0;
      virtual HRESULT __stdcall raw_DrawLabelText (
        /*[in]*/ BSTR String,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_DrawRotateText (
        /*[in]*/ BSTR String,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double RotateDegree ) = 0;
      virtual HRESULT __stdcall raw_DrawText (
        /*[in]*/ BSTR String,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ GRTextAlign TextAlign,
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall raw_DrawFormatText (
        /*[in]*/ BSTR String,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ struct IGRTextFormat * TextFormat ) = 0;
      virtual HRESULT __stdcall raw_CalcLabelTextWidth (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalcLabelTextHeight (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalcTextOutLen (
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT_BOOL WordWrap,
        /*[out,retval]*/ long * pTextLen ) = 0;
      virtual HRESULT __stdcall raw_DrawPicture (
        /*[in]*/ struct IGRPicture * pPicture,
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ GRPictureAlignment PictureAlignment,
        /*[in]*/ GRPictureSizeMode PictureSizeMode,
        /*[in]*/ GRPictureTransparentMode Transparent ) = 0;
      virtual HRESULT __stdcall raw_SelectFont (
        /*[in]*/ struct IGRFont * pFont ) = 0;
      virtual HRESULT __stdcall raw_RestoreFont ( ) = 0;
      virtual HRESULT __stdcall raw_FontPointChangeTo (
        /*[in]*/ double Point ) = 0;
      virtual HRESULT __stdcall raw_FontPointRestore ( ) = 0;
      virtual HRESULT __stdcall raw_SelectTextColor (
        /*[in]*/ OLE_COLOR TextColor ) = 0;
      virtual HRESULT __stdcall raw_RestoreTextColor ( ) = 0;
      virtual HRESULT __stdcall raw_SelectPen (
        /*[in]*/ double PenWidth,
        /*[in]*/ OLE_COLOR PenColor,
        /*[in]*/ GRPenStyle PenStyle ) = 0;
      virtual HRESULT __stdcall raw_RestorePen ( ) = 0;
      virtual HRESULT __stdcall raw_SelectFillColor (
        /*[in]*/ OLE_COLOR BrushColor ) = 0;
      virtual HRESULT __stdcall raw_RestoreFillColor ( ) = 0;
      virtual HRESULT __stdcall raw_PushClipRect (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_PopClipRect ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ByUnit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ByUnit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CCPInnerX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CCPInnerY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CCPOuterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CCPOuterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CurveTo (
        /*[in]*/ double xInnerControl,
        /*[in]*/ double yInnerControl,
        /*[in]*/ double xOuterControl,
        /*[in]*/ double yOuterControl,
        /*[in]*/ double xEnd,
        /*[in]*/ double yEnd ) = 0;
      virtual HRESULT __stdcall raw_CalcCurveControlPoints (
        /*[in]*/ double xFirst,
        /*[in]*/ double yFirst,
        /*[in]*/ double xMiddle,
        /*[in]*/ double yMiddle,
        /*[in]*/ double xAfter,
        /*[in]*/ double yAfter ) = 0;
      virtual HRESULT __stdcall raw_DrawPointMarker (
        /*[in]*/ GRPointMarkerStyle MarkerStyle,
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double size ) = 0;
      virtual HRESULT __stdcall raw_DrawFormatTextShrinkToFit (
        /*[in]*/ BSTR String,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ struct IGRTextFormat * TextFormat ) = 0;
      virtual HRESULT __stdcall raw_CalcDrawFormatTextHeight (
        /*[in]*/ BSTR String,
        /*[in]*/ double Width,
        /*[in]*/ struct IGRTextFormat * TextFormat,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalcDrawFormatTextWidth (
        /*[in]*/ BSTR String,
        /*[in]*/ struct IGRTextFormat * TextFormat,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalcDrawFormatTextOutLen (
        /*[in]*/ BSTR Text,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ struct IGRTextFormat * TextFormat,
        /*[out,retval]*/ long * pTextLen ) = 0;
};

struct __declspec(uuid("fe08c5a0-22b5-4664-9daa-4bb97c2c0771"))
IGRUtility : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextWrapByWord,put=PutTextWrapByWord))
    VARIANT_BOOL TextWrapByWord;
    __declspec(property(get=GetTextWrapToJustify,put=PutTextWrapToJustify))
    VARIANT_BOOL TextWrapToJustify;
    __declspec(property(get=GetTextLeftPunctuations,put=PutTextLeftPunctuations))
    _bstr_t TextLeftPunctuations;
    __declspec(property(get=GetTextRightPunctuations,put=PutTextRightPunctuations))
    _bstr_t TextRightPunctuations;
    __declspec(property(get=GetTooltipHoverTime,put=PutTooltipHoverTime))
    long TooltipHoverTime;

    //
    // Wrapper methods for error-handling
    //

    IGRPicturePtr CreatePicture ( );
    IGRRecordsetPtr CreateRecordset ( );
    IGRTextFormatPtr CreateTextFormat ( );
    IGRBinaryObjectPtr CreateBinaryObject ( );
    IGRDateTimePtr CreateDateTime ( );
    _bstr_t NumberFormat (
        double Value,
        _bstr_t Format );
    _bstr_t NumberFormatToEnglish (
        double Value,
        long Decimals );
    _bstr_t NumberFormatToBigHZ (
        double Value,
        long Decimals );
    _bstr_t NumberFormatToBigHZAmount (
        double Value );
    double NumberRound45 (
        double Value,
        long Decimals );
    double NumberRound465 (
        double Value,
        long Decimals );
    _bstr_t DateTimeFormat (
        DATE Date,
        _bstr_t Format );
    long GetTooltipHoverTime ( );
    void PutTooltipHoverTime (
        long pVal );
    HRESULT GetSkin (
        long * ColorRed,
        long * ColorGreen,
        long * ColorBlue,
        long * Style );
    HRESULT SetSkin (
        long ColorRed,
        long ColorGreen,
        long ColorBlue,
        long Style );
    HRESULT SetHyperlinkClickedColor (
        long ColorRed,
        long ColorGreen,
        long ColorBlue );
    HRESULT LoadDefaultPreviewWinIcon (
        _bstr_t PathFile );
    _variant_t GZCompress (
        const _variant_t & Val );
    _variant_t GZUncompress (
        const _variant_t & Val );
    HRESULT HTTPRequestSend (
        _bstr_t URL,
        const _variant_t & data );
    _bstr_t ShowFolderDialog ( );
    _bstr_t ShowOpenFileDialog (
        _bstr_t FileType,
        _bstr_t ExtFile,
        _bstr_t DefaultFile );
    _bstr_t ShowSaveFileDialog (
        _bstr_t FileType,
        _bstr_t ExtFile,
        _bstr_t DefaultFile );
    long GetPrinterCount ( );
    _bstr_t GetPrinterName (
        long Index );
    long GetPrinterPaperCount (
        _bstr_t PrinterName );
    _bstr_t GetPrinterPaperName (
        long Index );
    HRESULT DisableDebug ( );
    HRESULT SetMoneyLabelText (
        _bstr_t MoneyLabelText );
    VARIANT_BOOL GetTextWrapByWord ( );
    void PutTextWrapByWord (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTextWrapToJustify ( );
    void PutTextWrapToJustify (
        VARIANT_BOOL pVal );
    _bstr_t GetTextLeftPunctuations ( );
    void PutTextLeftPunctuations (
        _bstr_t pVal );
    _bstr_t GetTextRightPunctuations ( );
    void PutTextRightPunctuations (
        _bstr_t pVal );
    OLE_COLOR ColorFromRGB (
        long r,
        long g,
        long b );
    _bstr_t _GetResString (
        long ResID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreatePicture (
        /*[out,retval]*/ struct IGRPicture * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRecordset (
        /*[out,retval]*/ struct IGRRecordset * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTextFormat (
        /*[out,retval]*/ struct IGRTextFormat * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBinaryObject (
        /*[out,retval]*/ struct IGRBinaryObject * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDateTime (
        /*[out,retval]*/ struct IGRDateTime * * pVal ) = 0;
      virtual HRESULT __stdcall raw_NumberFormat (
        /*[in]*/ double Value,
        /*[in]*/ BSTR Format,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_NumberFormatToEnglish (
        /*[in]*/ double Value,
        /*[in]*/ long Decimals,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_NumberFormatToBigHZ (
        /*[in]*/ double Value,
        /*[in]*/ long Decimals,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_NumberFormatToBigHZAmount (
        /*[in]*/ double Value,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_NumberRound45 (
        /*[in]*/ double Value,
        /*[in]*/ long Decimals,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_NumberRound465 (
        /*[in]*/ double Value,
        /*[in]*/ long Decimals,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_DateTimeFormat (
        /*[in]*/ DATE Date,
        /*[in]*/ BSTR Format,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_TooltipHoverTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TooltipHoverTime (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSkin (
        /*[out]*/ long * ColorRed,
        /*[out]*/ long * ColorGreen,
        /*[out]*/ long * ColorBlue,
        /*[out]*/ long * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSkin (
        /*[in]*/ long ColorRed,
        /*[in]*/ long ColorGreen,
        /*[in]*/ long ColorBlue,
        /*[in]*/ long Style ) = 0;
      virtual HRESULT __stdcall raw_SetHyperlinkClickedColor (
        /*[in]*/ long ColorRed,
        /*[in]*/ long ColorGreen,
        /*[in]*/ long ColorBlue ) = 0;
      virtual HRESULT __stdcall raw_LoadDefaultPreviewWinIcon (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_GZCompress (
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_GZUncompress (
        /*[in]*/ VARIANT Val,
        /*[out,retval]*/ VARIANT * Result ) = 0;
      virtual HRESULT __stdcall raw_HTTPRequestSend (
        /*[in]*/ BSTR URL,
        /*[in]*/ VARIANT data ) = 0;
      virtual HRESULT __stdcall raw_ShowFolderDialog (
        /*[out,retval]*/ BSTR * FolderPath ) = 0;
      virtual HRESULT __stdcall raw_ShowOpenFileDialog (
        /*[in]*/ BSTR FileType,
        /*[in]*/ BSTR ExtFile,
        /*[in]*/ BSTR DefaultFile,
        /*[out,retval]*/ BSTR * PathFile ) = 0;
      virtual HRESULT __stdcall raw_ShowSaveFileDialog (
        /*[in]*/ BSTR FileType,
        /*[in]*/ BSTR ExtFile,
        /*[in]*/ BSTR DefaultFile,
        /*[out,retval]*/ BSTR * PathFile ) = 0;
      virtual HRESULT __stdcall raw_GetPrinterCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetPrinterName (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * PrinterName ) = 0;
      virtual HRESULT __stdcall raw_GetPrinterPaperCount (
        /*[in]*/ BSTR PrinterName,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetPrinterPaperName (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * PaperName ) = 0;
      virtual HRESULT __stdcall raw_DisableDebug ( ) = 0;
      virtual HRESULT __stdcall raw_SetMoneyLabelText (
        /*[in]*/ BSTR MoneyLabelText ) = 0;
      virtual HRESULT __stdcall get_TextWrapByWord (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextWrapByWord (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextWrapToJustify (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextWrapToJustify (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextLeftPunctuations (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextLeftPunctuations (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextRightPunctuations (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRightPunctuations (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ColorFromRGB (
        /*[in]*/ long r,
        /*[in]*/ long g,
        /*[in]*/ long b,
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall raw__GetResString (
        /*[in]*/ long ResID,
        /*[out,retval]*/ BSTR * String ) = 0;
};

struct __declspec(uuid("cdaa7f5b-e100-49b7-93f2-6b66fc93be55"))
IGRSubReport : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetReport,put=PutReport))
    IGridppReportPtr Report;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetCanShrink,put=PutCanShrink))
    VARIANT_BOOL CanShrink;
    __declspec(property(get=GetSpanToNewPage,put=PutSpanToNewPage))
    VARIANT_BOOL SpanToNewPage;
    __declspec(property(get=GetParentPageSettings,put=PutParentPageSettings))
    VARIANT_BOOL ParentPageSettings;
    __declspec(property(get=GetResetPageNumber,put=PutResetPageNumber))
    VARIANT_BOOL ResetPageNumber;
    __declspec(property(get=GetToNewExcelSheet,put=PutToNewExcelSheet))
    VARIANT_BOOL ToNewExcelSheet;
    __declspec(property(get=GetHideOnRecordsetEmpty,put=PutHideOnRecordsetEmpty))
    VARIANT_BOOL HideOnRecordsetEmpty;
    __declspec(property(get=GetRelationFields,put=PutRelationFields))
    _bstr_t RelationFields;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetReportFile,put=PutReportFile))
    _bstr_t ReportFile;

    //
    // Wrapper methods for error-handling
    //

    IGridppReportPtr GetReport ( );
    void PutReport (
        struct IGridppReport * pVal );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanShrink ( );
    void PutCanShrink (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSpanToNewPage ( );
    void PutSpanToNewPage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetParentPageSettings ( );
    void PutParentPageSettings (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResetPageNumber ( );
    void PutResetPageNumber (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetToNewExcelSheet ( );
    void PutToNewExcelSheet (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHideOnRecordsetEmpty ( );
    void PutHideOnRecordsetEmpty (
        VARIANT_BOOL pVal );
    _bstr_t GetRelationFields ( );
    void PutRelationFields (
        _bstr_t pVal );
    _bstr_t GetReportFile ( );
    void PutReportFile (
        _bstr_t pVal );
    HRESULT _ResetSaveFlag ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct IGridppReport * * pVal ) = 0;
      virtual HRESULT __stdcall put_Report (
        /*[in]*/ struct IGridppReport * pVal ) = 0;
      virtual HRESULT __stdcall get_CanGrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanGrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SpanToNewPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SpanToNewPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ParentPageSettings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentPageSettings (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResetPageNumber (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ResetPageNumber (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ToNewExcelSheet (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ToNewExcelSheet (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HideOnRecordsetEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HideOnRecordsetEmpty (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RelationFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RelationFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReportFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReportFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw__ResetSaveFlag ( ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("4fa44042-1421-46de-9aca-a44753ff06c6"))
IGridppReport : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    long Language;
    __declspec(property(get=GetFont))
    IGRFontPtr Font;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetDetailGrid))
    IGRDetailGridPtr DetailGrid;
    __declspec(property(get=GetPageHeader))
    IGRPageHeaderPtr PageHeader;
    __declspec(property(get=GetPageFooter))
    IGRPageFooterPtr PageFooter;
    __declspec(property(get=GetParameters))
    IGRParametersPtr Parameters;
    __declspec(property(get=GetReportHeaders))
    IGRReportHeadersPtr ReportHeaders;
    __declspec(property(get=GetReportFooters))
    IGRReportFootersPtr ReportFooters;
    __declspec(property(get=GetFloatControls))
    IGRControlsPtr FloatControls;
    __declspec(property(get=GetImageList))
    IGRImageListPtr ImageList;
    __declspec(property(get=GetPrinter))
    IGRPrinterPtr Printer;
    __declspec(property(get=GetParentReport))
    IGridppReportPtr ParentReport;
    __declspec(property(get=GetFiringReport))
    IGridppReportPtr FiringReport;
    __declspec(property(get=GetGraphics))
    IGRGraphicsPtr Graphics;
    __declspec(property(get=GetUtility))
    IGRUtilityPtr Utility;
    __declspec(property(get=GetSharePrintSetupOptions,put=PutSharePrintSetupOptions))
    long SharePrintSetupOptions;
    __declspec(property(get=GetSharePrintSetupObject))
    IGRSharePrintSetupObjectPtr SharePrintSetupObject;
    __declspec(property(get=GetPageDivideCount,put=PutPageDivideCount))
    long PageDivideCount;
    __declspec(property(get=GetPageDivideSpacing,put=PutPageDivideSpacing))
    double PageDivideSpacing;
    __declspec(property(get=GetPageDivideLine,put=PutPageDivideLine))
    VARIANT_BOOL PageDivideLine;
    __declspec(property(get=GetPrintAsDesignPaper,put=PutPrintAsDesignPaper))
    VARIANT_BOOL PrintAsDesignPaper;
    __declspec(property(get=GetContinuePrint,put=PutContinuePrint))
    VARIANT_BOOL ContinuePrint;
    __declspec(property(get=GetMonoPrint,put=PutMonoPrint))
    VARIANT_BOOL MonoPrint;
    __declspec(property(get=GetMirrorMargins,put=PutMirrorMargins))
    VARIANT_BOOL MirrorMargins;
    __declspec(property(get=GetBackImage,put=PutBackImage))
    IGRPicturePtr BackImage;
    __declspec(property(get=GetBackImageFile,put=PutBackImageFile))
    _bstr_t BackImageFile;
    __declspec(property(get=GetBackImagePreview,put=PutBackImagePreview))
    VARIANT_BOOL BackImagePreview;
    __declspec(property(get=GetBackImagePrint,put=PutBackImagePrint))
    VARIANT_BOOL BackImagePrint;
    __declspec(property(get=GetWatermark,put=PutWatermark))
    IGRPicturePtr Watermark;
    __declspec(property(get=GetWatermarkAlignment,put=PutWatermarkAlignment))
    GRPictureAlignment WatermarkAlignment;
    __declspec(property(get=GetWatermarkSizeMode,put=PutWatermarkSizeMode))
    GRPictureSizeMode WatermarkSizeMode;
    __declspec(property(get=GetConnectionString,put=PutConnectionString))
    _bstr_t ConnectionString;
    __declspec(property(get=GetQuerySQL,put=PutQuerySQL))
    _bstr_t QuerySQL;
    __declspec(property(get=GetSkipQuery,put=PutSkipQuery))
    VARIANT_BOOL SkipQuery;
    __declspec(property(get=GetXmlTableName,put=PutXmlTableName))
    _bstr_t XmlTableName;
    __declspec(property(get=GetStorageFormat,put=PutStorageFormat))
    GRStorageFormat StorageFormat;
    __declspec(property(get=GetTextEncode,put=PutTextEncode))
    GRTextEncodeMode TextEncode;
    __declspec(property(get=GetUnit,put=PutUnit))
    GRUnit Unit;
    __declspec(property(get=GetScriptType,put=PutScriptType))
    GRScriptType ScriptType;
    __declspec(property(get=GetCodePage,put=PutCodePage))
    long CodePage;
    __declspec(property(get=GetAlignToGrid,put=PutAlignToGrid))
    VARIANT_BOOL AlignToGrid;
    __declspec(property(get=GetShowGrid,put=PutShowGrid))
    VARIANT_BOOL ShowGrid;
    __declspec(property(get=GetGridColsPerUnit,put=PutGridColsPerUnit))
    long GridColsPerUnit;
    __declspec(property(get=GetGridRowsPerUnit,put=PutGridRowsPerUnit))
    long GridRowsPerUnit;
    __declspec(property(get=GetDocType,put=PutDocType))
    GRDocType DocType;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetShowMoneyDigit,put=PutShowMoneyDigit))
    long ShowMoneyDigit;
    __declspec(property(get=GetShowMoneyWidth,put=PutShowMoneyWidth))
    double ShowMoneyWidth;
    __declspec(property(get=GetShowMoneyLineColor,put=PutShowMoneyLineColor))
    OLE_COLOR ShowMoneyLineColor;
    __declspec(property(get=GetShowMoneySepLineColor,put=PutShowMoneySepLineColor))
    OLE_COLOR ShowMoneySepLineColor;
    __declspec(property(get=GetDesignLeftMargin,put=PutDesignLeftMargin))
    double DesignLeftMargin;
    __declspec(property(get=GetDesignRightMargin,put=PutDesignRightMargin))
    double DesignRightMargin;
    __declspec(property(get=GetDesignTopMargin,put=PutDesignTopMargin))
    double DesignTopMargin;
    __declspec(property(get=GetDesignBottomMargin,put=PutDesignBottomMargin))
    double DesignBottomMargin;
    __declspec(property(get=GetDesignPaperWidth,put=PutDesignPaperWidth))
    double DesignPaperWidth;
    __declspec(property(get=GetInitializeScript,put=PutInitializeScript))
    _bstr_t InitializeScript;
    __declspec(property(get=GetProcessBeginScript,put=PutProcessBeginScript))
    _bstr_t ProcessBeginScript;
    __declspec(property(get=GetProcessEndScript,put=PutProcessEndScript))
    _bstr_t ProcessEndScript;
    __declspec(property(get=GetPageStartScript,put=PutPageStartScript))
    _bstr_t PageStartScript;
    __declspec(property(get=GetPageEndScript,put=PutPageEndScript))
    _bstr_t PageEndScript;
    __declspec(property(get=GetBeforeSortScript,put=PutBeforeSortScript))
    _bstr_t BeforeSortScript;
    __declspec(property(get=GetExportBeginScript,put=PutExportBeginScript))
    _bstr_t ExportBeginScript;
    __declspec(property(get=GetExportEndScript,put=PutExportEndScript))
    _bstr_t ExportEndScript;
    __declspec(property(get=GetPrintBeginScript,put=PutPrintBeginScript))
    _bstr_t PrintBeginScript;
    __declspec(property(get=GetPrintEndScript,put=PutPrintEndScript))
    _bstr_t PrintEndScript;
    __declspec(property(get=GetPrintPageScript,put=PutPrintPageScript))
    _bstr_t PrintPageScript;
    __declspec(property(get=GetShowPreviewWndScript,put=PutShowPreviewWndScript))
    _bstr_t ShowPreviewWndScript;
    __declspec(property(get=GetDesignPaperLength,put=PutDesignPaperLength))
    double DesignPaperLength;
    __declspec(property(get=GetDesignPaperOrientation,put=PutDesignPaperOrientation))
    GRPaperOrientation DesignPaperOrientation;
    __declspec(property(get=GetDesignPaperName,put=PutDesignPaperName))
    _bstr_t DesignPaperName;
    __declspec(property(get=GetDesignPaperSize,put=PutDesignPaperSize))
    long DesignPaperSize;
    __declspec(property(get=GetReportHeader))
    IGRReportHeaderPtr ReportHeader[];
    __declspec(property(get=GetReportFooter))
    IGRReportFooterPtr ReportFooter[];
    __declspec(property(get=GetReportHeaderCount))
    long ReportHeaderCount;
    __declspec(property(get=GetReportFooterCount))
    long ReportFooterCount;
    __declspec(property(get=GetRunning))
    VARIANT_BOOL Running;
    __declspec(property(get=GetDisplayMode))
    GRReportDisplayMode DisplayMode;
    __declspec(property(get=GetFirstPass))
    VARIANT_BOOL FirstPass;
    __declspec(property(get=GetPageBlankHeight))
    double PageBlankHeight;
    __declspec(property(get=GetHasFloatControl))
    VARIANT_BOOL HasFloatControl;
    __declspec(property(get=GetShowProgressUI,put=PutShowProgressUI))
    VARIANT_BOOL ShowProgressUI;
    __declspec(property(get=GetSummaryAccept,put=PutSummaryAccept))
    VARIANT_BOOL SummaryAccept;
    __declspec(property(get=GetMaxGenPages,put=PutMaxGenPages))
    long MaxGenPages;
    __declspec(property(get=GetIsBlank))
    VARIANT_BOOL IsBlank;
    __declspec(property(get=GetLatestLoadedFile,put=PutLatestLoadedFile))
    _bstr_t LatestLoadedFile;
    __declspec(property(put=PutErrorProcessed))
    VARIANT_BOOL ErrorProcessed;
    __declspec(property(get=GetDataLoaded))
    VARIANT_BOOL DataLoaded;
    __declspec(property(get=GetRunningDetailGrid))
    IGRDetailGridPtr RunningDetailGrid;
    __declspec(property(get=Get_SystemImage))
    OLE_HANDLE _SystemImage[];
    __declspec(property(get=Get_ResHinst))
    OLE_HANDLE _ResHinst;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    long GetLanguage ( );
    void PutLanguage (
        long pVal );
    IGRFontPtr GetFont ( );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    IGRDetailGridPtr GetDetailGrid ( );
    IGRPageHeaderPtr GetPageHeader ( );
    IGRPageFooterPtr GetPageFooter ( );
    IGRParametersPtr GetParameters ( );
    IGRReportHeadersPtr GetReportHeaders ( );
    IGRReportFootersPtr GetReportFooters ( );
    IGRControlsPtr GetFloatControls ( );
    IGRImageListPtr GetImageList ( );
    IGRPrinterPtr GetPrinter ( );
    IGridppReportPtr GetParentReport ( );
    IGridppReportPtr GetFiringReport ( );
    IGRGraphicsPtr GetGraphics ( );
    IGRUtilityPtr GetUtility ( );
    long GetPageDivideCount ( );
    void PutPageDivideCount (
        long pVal );
    double GetPageDivideSpacing ( );
    void PutPageDivideSpacing (
        double pVal );
    VARIANT_BOOL GetPageDivideLine ( );
    void PutPageDivideLine (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintAsDesignPaper ( );
    void PutPrintAsDesignPaper (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetContinuePrint ( );
    void PutContinuePrint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMonoPrint ( );
    void PutMonoPrint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirrorMargins ( );
    void PutMirrorMargins (
        VARIANT_BOOL pVal );
    IGRPicturePtr GetBackImage ( );
    void PutBackImage (
        struct IGRPicture * pVal );
    _bstr_t GetBackImageFile ( );
    void PutBackImageFile (
        _bstr_t pVal );
    VARIANT_BOOL GetBackImagePreview ( );
    void PutBackImagePreview (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBackImagePrint ( );
    void PutBackImagePrint (
        VARIANT_BOOL pVal );
    IGRPicturePtr GetWatermark ( );
    void PutWatermark (
        struct IGRPicture * pVal );
    GRPictureAlignment GetWatermarkAlignment ( );
    void PutWatermarkAlignment (
        GRPictureAlignment pVal );
    GRPictureSizeMode GetWatermarkSizeMode ( );
    void PutWatermarkSizeMode (
        GRPictureSizeMode pVal );
    _bstr_t GetConnectionString ( );
    void PutConnectionString (
        _bstr_t pVal );
    _bstr_t GetQuerySQL ( );
    void PutQuerySQL (
        _bstr_t pVal );
    VARIANT_BOOL GetSkipQuery ( );
    void PutSkipQuery (
        VARIANT_BOOL pVal );
    _bstr_t GetXmlTableName ( );
    void PutXmlTableName (
        _bstr_t pVal );
    GRStorageFormat GetStorageFormat ( );
    void PutStorageFormat (
        GRStorageFormat pVal );
    GRTextEncodeMode GetTextEncode ( );
    void PutTextEncode (
        GRTextEncodeMode pVal );
    GRUnit GetUnit ( );
    void PutUnit (
        GRUnit pVal );
    GRScriptType GetScriptType ( );
    void PutScriptType (
        GRScriptType pVal );
    long GetCodePage ( );
    void PutCodePage (
        long pVal );
    VARIANT_BOOL GetAlignToGrid ( );
    void PutAlignToGrid (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowGrid ( );
    void PutShowGrid (
        VARIANT_BOOL pVal );
    long GetGridColsPerUnit ( );
    void PutGridColsPerUnit (
        long pVal );
    long GetGridRowsPerUnit ( );
    void PutGridRowsPerUnit (
        long pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long GetShowMoneyDigit ( );
    void PutShowMoneyDigit (
        long pVal );
    double GetShowMoneyWidth ( );
    void PutShowMoneyWidth (
        double pVal );
    OLE_COLOR GetShowMoneyLineColor ( );
    void PutShowMoneyLineColor (
        OLE_COLOR pVal );
    OLE_COLOR GetShowMoneySepLineColor ( );
    void PutShowMoneySepLineColor (
        OLE_COLOR pVal );
    _bstr_t GetInitializeScript ( );
    void PutInitializeScript (
        _bstr_t pVal );
    _bstr_t GetProcessBeginScript ( );
    void PutProcessBeginScript (
        _bstr_t pVal );
    _bstr_t GetProcessEndScript ( );
    void PutProcessEndScript (
        _bstr_t pVal );
    _bstr_t GetPageStartScript ( );
    void PutPageStartScript (
        _bstr_t pVal );
    _bstr_t GetPageEndScript ( );
    void PutPageEndScript (
        _bstr_t pVal );
    _bstr_t GetBeforeSortScript ( );
    void PutBeforeSortScript (
        _bstr_t pVal );
    _bstr_t GetExportBeginScript ( );
    void PutExportBeginScript (
        _bstr_t pVal );
    _bstr_t GetExportEndScript ( );
    void PutExportEndScript (
        _bstr_t pVal );
    _bstr_t GetPrintBeginScript ( );
    void PutPrintBeginScript (
        _bstr_t pVal );
    _bstr_t GetPrintEndScript ( );
    void PutPrintEndScript (
        _bstr_t pVal );
    _bstr_t GetPrintPageScript ( );
    void PutPrintPageScript (
        _bstr_t pVal );
    _bstr_t GetShowPreviewWndScript ( );
    void PutShowPreviewWndScript (
        _bstr_t pVal );
    VARIANT_BOOL GetRunning ( );
    GRReportDisplayMode GetDisplayMode ( );
    VARIANT_BOOL GetFirstPass ( );
    double GetPageBlankHeight ( );
    VARIANT_BOOL GetHasFloatControl ( );
    VARIANT_BOOL GetShowProgressUI ( );
    void PutShowProgressUI (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSummaryAccept ( );
    void PutSummaryAccept (
        VARIANT_BOOL pVal );
    long GetMaxGenPages ( );
    void PutMaxGenPages (
        long pVal );
    VARIANT_BOOL GetIsBlank ( );
    _bstr_t GetLatestLoadedFile ( );
    void PutLatestLoadedFile (
        _bstr_t pVal );
    void PutErrorProcessed (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDataLoaded ( );
    IGRDetailGridPtr GetRunningDetailGrid ( );
    HRESULT About ( );
    IGRControlPtr ControlByName (
        _bstr_t Name );
    IGRColumnPtr ColumnByName (
        _bstr_t Name );
    IGRFieldPtr FieldByName (
        _bstr_t Name );
    IGRFieldPtr FieldByDBName (
        _bstr_t Name );
    IGRParameterPtr ParameterByName (
        _bstr_t Name );
    IGRControlPtr FindFirstControl ( );
    IGRControlPtr FindNextControl ( );
    double PixelsToUnit (
        long Pixels );
    long UnitToPixels (
        double UnitValue );
    double SystemVarValue (
        GRSystemVarType SystemVar );
    double SystemVarValue2 (
        GRSystemVarType SystemVar,
        long GroupIndex );
    IGRParameterPtr AddParameter (
        _bstr_t Name,
        GRParameterDataType DataType );
    IGRDetailGridPtr InsertDetailGrid ( );
    IGRPageHeaderPtr InsertPageHeader ( );
    IGRPageFooterPtr InsertPageFooter ( );
    HRESULT Clear ( );
    HRESULT DeleteDetailGrid ( );
    HRESULT DeletePageHeader ( );
    HRESULT DeletePageFooter ( );
    HRESULT Print (
        VARIANT_BOOL ShowPrintDialog );
    HRESULT PrintEx (
        GRPrintGenerateStyle GenerateStyle,
        VARIANT_BOOL ShowPrintDialog );
    HRESULT PrintPreview (
        VARIANT_BOOL ShowModal );
    HRESULT PrintPreviewEx (
        GRPrintGenerateStyle GenerateStyle,
        VARIANT_BOOL ShowModal,
        VARIANT_BOOL MaximizeWindow );
    VARIANT_BOOL BeginLoopPrint (
        GRPrintGenerateStyle GenerateStyle,
        VARIANT_BOOL ShowPrintDialog );
    HRESULT EndLoopPrint ( );
    HRESULT LoopPrint ( );
    HRESULT AbortPrint ( );
    VARIANT_BOOL ExportDirect (
        GRExportType ExportType,
        _bstr_t FileName,
        VARIANT_BOOL ShowOptionDlg,
        VARIANT_BOOL DoneOpen );
    HRESULT AbortExport ( );
    HRESULT GenerateDocumentFile (
        _bstr_t FileName );
    HRESULT ForceNewPage ( );
    HRESULT Design (
        VARIANT_BOOL ShowModal,
        VARIANT_BOOL MaximizeWindow );
    VARIANT_BOOL LoadFromFile (
        _bstr_t FileName );
    VARIANT_BOOL SaveToFile (
        _bstr_t FileName );
    VARIANT_BOOL LoadFromURL (
        _bstr_t URL );
    VARIANT_BOOL SaveToURL (
        _bstr_t URL );
    VARIANT_BOOL LoadFromStr (
        _bstr_t data );
    _bstr_t SaveToStr ( );
    VARIANT_BOOL LoadFromVariant (
        const _variant_t & Buf );
    _variant_t SaveToVariant ( );
    VARIANT_BOOL LoadDataFromURL (
        _bstr_t URL );
    VARIANT_BOOL LoadDataFromURLEx (
        _bstr_t DataURL,
        _bstr_t DataParam );
    VARIANT_BOOL LoadDataFromXML (
        _bstr_t XMLData );
    _bstr_t ExtractXMLFromURL (
        _bstr_t URL );
    _bstr_t ExtractXMLFromURLEx (
        _bstr_t DataURL,
        _bstr_t DataParam );
    HRESULT LoadBackImageFromFile (
        _bstr_t PathFile );
    HRESULT LoadWatermarkFromFile (
        _bstr_t PathFile );
    HRESULT PrepareLoadData ( );
    HRESULT CancelLoadData ( );
    VARIANT_BOOL LoadFromMemory (
        unsigned char * pData,
        long ByteCount );
    VARIANT_BOOL SaveToMemory (
        OLE_HANDLE * ppData,
        long * pBytesCount );
    HRESULT LoadBackImageFromMemory (
        unsigned char * pBuffer,
        long BytesCount );
    HRESULT LoadWatermarkFromMemory (
        unsigned char * pBuffer,
        long BytesCount );
    VARIANT_BOOL Register (
        _bstr_t SerialNo );
    long GetSharePrintSetupOptions ( );
    void PutSharePrintSetupOptions (
        long pVal );
    IGRSharePrintSetupObjectPtr GetSharePrintSetupObject ( );
    HRESULT SharePrintSetupSetOptionEnabled (
        GRSharePrintSetupOption Option,
        VARIANT_BOOL Enabled );
    HRESULT SharePrintSetupEnableAllOptions ( );
    HRESULT SharePrintSetupDisableAllOptions ( );
    VARIANT_BOOL SharePrintSetupGetOptionEnabled (
        GRSharePrintSetupOption Option );
    double GetDesignLeftMargin ( );
    void PutDesignLeftMargin (
        double pVal );
    double GetDesignRightMargin ( );
    void PutDesignRightMargin (
        double pVal );
    double GetDesignTopMargin ( );
    void PutDesignTopMargin (
        double pVal );
    double GetDesignBottomMargin ( );
    void PutDesignBottomMargin (
        double pVal );
    double GetDesignPaperWidth ( );
    void PutDesignPaperWidth (
        double pVal );
    double GetDesignPaperLength ( );
    void PutDesignPaperLength (
        double pVal );
    GRPaperOrientation GetDesignPaperOrientation ( );
    void PutDesignPaperOrientation (
        GRPaperOrientation pVal );
    _bstr_t GetDesignPaperName ( );
    void PutDesignPaperName (
        _bstr_t pVal );
    long GetDesignPaperSize ( );
    void PutDesignPaperSize (
        long pVal );
    IGRReportHeaderPtr GetReportHeader (
        const _variant_t & Index );
    IGRReportFooterPtr GetReportFooter (
        const _variant_t & Index );
    long GetReportHeaderCount ( );
    long GetReportFooterCount ( );
    IGRReportHeaderPtr InsertReportHeader ( );
    IGRReportFooterPtr InsertReportFooter ( );
    HRESULT DeleteReportHeader (
        const _variant_t & Index );
    HRESULT DeleteReportFooter (
        const _variant_t & Index );
    VARIANT_BOOL Export (
        VARIANT_BOOL DoneOpen );
    IGRExportOptionPtr PrepareExport (
        GRExportType ExportType );
    HRESULT UnprepareExport ( );
    VARIANT_BOOL PrepareRecordset ( );
    HRESULT CancelRecordset ( );
    OLE_HANDLE Get_SystemImage (
        GRSystemImage SystemImage );
    OLE_HANDLE Get_ResHinst ( );
    HRESULT _AttachDesigner (
        IDispatch * pDesigner );
    HRESULT _ObjSaveBegin ( );
    HRESULT _ObjSaveEnd (
        OLE_HANDLE * ppData,
        unsigned long * pBytesCount );
    HRESULT _ObjLoadBegin (
        unsigned char * pData,
        unsigned long BytesCount );
    HRESULT _ObjLoadEnd ( );
    VARIANT_BOOL _ObjLoadEof ( );
    IGridppReportPtr _CreateProxyReport ( );
    HRESULT _DestroyProxyReport ( );
    HRESULT _RefreshPrinter ( );
    HRESULT _PullData ( );
    OLE_HANDLE _GetMoneyLabelVarHandle ( );
    GRDocType GetDocType ( );
    void PutDocType (
        GRDocType pVal );
    VARIANT_BOOL PrintDocumentData (
        struct IGRBinaryObject * pBinaryObject );
    IGRBinaryObjectPtr GenerateDocumentData ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );
    long WebRegisterStatus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IGRFont * * pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_DetailGrid (
        /*[out,retval]*/ struct IGRDetailGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_PageHeader (
        /*[out,retval]*/ struct IGRPageHeader * * pVal ) = 0;
      virtual HRESULT __stdcall get_PageFooter (
        /*[out,retval]*/ struct IGRPageFooter * * pVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IGRParameters * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReportHeaders (
        /*[out,retval]*/ struct IGRReportHeaders * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReportFooters (
        /*[out,retval]*/ struct IGRReportFooters * * pVal ) = 0;
      virtual HRESULT __stdcall get_FloatControls (
        /*[out,retval]*/ struct IGRControls * * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageList (
        /*[out,retval]*/ struct IGRImageList * * pVal ) = 0;
      virtual HRESULT __stdcall get_Printer (
        /*[out,retval]*/ struct IGRPrinter * * pVal ) = 0;
      virtual HRESULT __stdcall get_ParentReport (
        /*[out,retval]*/ struct IGridppReport * * pVal ) = 0;
      virtual HRESULT __stdcall get_FiringReport (
        /*[out,retval]*/ struct IGridppReport * * pVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IGRGraphics * * pVal ) = 0;
      virtual HRESULT __stdcall get_Utility (
        /*[out,retval]*/ struct IGRUtility * * pVal ) = 0;
      virtual HRESULT __stdcall get_PageDivideCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PageDivideCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PageDivideSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageDivideSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageDivideLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageDivideLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintAsDesignPaper (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintAsDesignPaper (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ContinuePrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ContinuePrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MonoPrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MonoPrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorMargins (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorMargins (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackImage (
        /*[out,retval]*/ struct IGRPicture * * pVal ) = 0;
      virtual HRESULT __stdcall put_BackImage (
        /*[in]*/ struct IGRPicture * pVal ) = 0;
      virtual HRESULT __stdcall get_BackImageFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackImageFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackImagePreview (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BackImagePreview (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackImagePrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BackImagePrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Watermark (
        /*[out,retval]*/ struct IGRPicture * * pVal ) = 0;
      virtual HRESULT __stdcall put_Watermark (
        /*[in]*/ struct IGRPicture * pVal ) = 0;
      virtual HRESULT __stdcall get_WatermarkAlignment (
        /*[out,retval]*/ GRPictureAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_WatermarkAlignment (
        /*[in]*/ GRPictureAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_WatermarkSizeMode (
        /*[out,retval]*/ GRPictureSizeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_WatermarkSizeMode (
        /*[in]*/ GRPictureSizeMode pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_QuerySQL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_QuerySQL (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SkipQuery (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipQuery (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_XmlTableName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_XmlTableName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_StorageFormat (
        /*[out,retval]*/ GRStorageFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_StorageFormat (
        /*[in]*/ GRStorageFormat pVal ) = 0;
      virtual HRESULT __stdcall get_TextEncode (
        /*[out,retval]*/ GRTextEncodeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_TextEncode (
        /*[in]*/ GRTextEncodeMode pVal ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ GRUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_Unit (
        /*[in]*/ GRUnit pVal ) = 0;
      virtual HRESULT __stdcall get_ScriptType (
        /*[out,retval]*/ GRScriptType * pVal ) = 0;
      virtual HRESULT __stdcall put_ScriptType (
        /*[in]*/ GRScriptType pVal ) = 0;
      virtual HRESULT __stdcall get_CodePage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CodePage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AlignToGrid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignToGrid (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowGrid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowGrid (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridColsPerUnit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GridColsPerUnit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GridRowsPerUnit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GridRowsPerUnit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyDigit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyDigit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneyLineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneyLineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMoneySepLineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMoneySepLineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_InitializeScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InitializeScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProcessBeginScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProcessBeginScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProcessEndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProcessEndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageStartScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageStartScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageEndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageEndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSortScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSortScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExportBeginScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExportBeginScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExportEndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExportEndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrintBeginScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintBeginScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrintEndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintEndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrintPageScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintPageScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowPreviewWndScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowPreviewWndScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Running (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayMode (
        /*[out,retval]*/ GRReportDisplayMode * pVal ) = 0;
      virtual HRESULT __stdcall get_FirstPass (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PageBlankHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_HasFloatControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ShowProgressUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProgressUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SummaryAccept (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SummaryAccept (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxGenPages (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxGenPages (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsBlank (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LatestLoadedFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LatestLoadedFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorProcessed (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_DataLoaded (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_RunningDetailGrid (
        /*[out,retval]*/ struct IGRDetailGrid * * pVal ) = 0;
      virtual HRESULT __stdcall raw_About ( ) = 0;
      virtual HRESULT __stdcall raw_ControlByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRControl * * ppControl ) = 0;
      virtual HRESULT __stdcall raw_ColumnByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRColumn * * ppColumn ) = 0;
      virtual HRESULT __stdcall raw_FieldByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_FieldByDBName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRField * * ppField ) = 0;
      virtual HRESULT __stdcall raw_ParameterByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IGRParameter * * ppParameter ) = 0;
      virtual HRESULT __stdcall raw_FindFirstControl (
        /*[out,retval]*/ struct IGRControl * * ppControl ) = 0;
      virtual HRESULT __stdcall raw_FindNextControl (
        /*[out,retval]*/ struct IGRControl * * ppControl ) = 0;
      virtual HRESULT __stdcall raw_PixelsToUnit (
        /*[in]*/ long Pixels,
        /*[out,retval]*/ double * pUnitValue ) = 0;
      virtual HRESULT __stdcall raw_UnitToPixels (
        /*[in]*/ double UnitValue,
        /*[out,retval]*/ long * pPixels ) = 0;
      virtual HRESULT __stdcall raw_SystemVarValue (
        /*[in]*/ GRSystemVarType SystemVar,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SystemVarValue2 (
        /*[in]*/ GRSystemVarType SystemVar,
        /*[in]*/ long GroupIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddParameter (
        /*[in]*/ BSTR Name,
        /*[in]*/ GRParameterDataType DataType,
        /*[out,retval]*/ struct IGRParameter * * ppParameter ) = 0;
      virtual HRESULT __stdcall raw_InsertDetailGrid (
        /*[out,retval]*/ struct IGRDetailGrid * * ppDetailGrid ) = 0;
      virtual HRESULT __stdcall raw_InsertPageHeader (
        /*[out,retval]*/ struct IGRPageHeader * * ppPageHeader ) = 0;
      virtual HRESULT __stdcall raw_InsertPageFooter (
        /*[out,retval]*/ struct IGRPageFooter * * ppPageFooter ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteDetailGrid ( ) = 0;
      virtual HRESULT __stdcall raw_DeletePageHeader ( ) = 0;
      virtual HRESULT __stdcall raw_DeletePageFooter ( ) = 0;
      virtual HRESULT __stdcall raw_Print (
        /*[in]*/ VARIANT_BOOL ShowPrintDialog ) = 0;
      virtual HRESULT __stdcall raw_PrintEx (
        /*[in]*/ GRPrintGenerateStyle GenerateStyle,
        /*[in]*/ VARIANT_BOOL ShowPrintDialog ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT_BOOL ShowModal ) = 0;
      virtual HRESULT __stdcall raw_PrintPreviewEx (
        /*[in]*/ GRPrintGenerateStyle GenerateStyle,
        /*[in]*/ VARIANT_BOOL ShowModal,
        /*[in]*/ VARIANT_BOOL MaximizeWindow ) = 0;
      virtual HRESULT __stdcall raw_BeginLoopPrint (
        /*[in]*/ GRPrintGenerateStyle GenerateStyle,
        /*[in]*/ VARIANT_BOOL ShowPrintDialog,
        /*[out,retval]*/ VARIANT_BOOL * pSuccesss ) = 0;
      virtual HRESULT __stdcall raw_EndLoopPrint ( ) = 0;
      virtual HRESULT __stdcall raw_LoopPrint ( ) = 0;
      virtual HRESULT __stdcall raw_AbortPrint ( ) = 0;
      virtual HRESULT __stdcall raw_ExportDirect (
        /*[in]*/ GRExportType ExportType,
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL ShowOptionDlg,
        /*[in]*/ VARIANT_BOOL DoneOpen,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_AbortExport ( ) = 0;
      virtual HRESULT __stdcall raw_GenerateDocumentFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ForceNewPage ( ) = 0;
      virtual HRESULT __stdcall raw_Design (
        /*[in]*/ VARIANT_BOOL ShowModal,
        /*[in]*/ VARIANT_BOOL MaximizeWindow ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromURL (
        /*[in]*/ BSTR URL,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToURL (
        /*[in]*/ BSTR URL,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadFromStr (
        /*[in]*/ BSTR data,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToStr (
        /*[out,retval]*/ BSTR * pData ) = 0;
      virtual HRESULT __stdcall raw_LoadFromVariant (
        /*[in]*/ VARIANT Buf,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToVariant (
        /*[out,retval]*/ VARIANT * pBuf ) = 0;
      virtual HRESULT __stdcall raw_LoadDataFromURL (
        /*[in]*/ BSTR URL,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadDataFromURLEx (
        /*[in]*/ BSTR DataURL,
        /*[in]*/ BSTR DataParam,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadDataFromXML (
        /*[in]*/ BSTR XMLData,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_ExtractXMLFromURL (
        /*[in]*/ BSTR URL,
        /*[out,retval]*/ BSTR * pXML ) = 0;
      virtual HRESULT __stdcall raw_ExtractXMLFromURLEx (
        /*[in]*/ BSTR DataURL,
        /*[in]*/ BSTR DataParam,
        /*[out,retval]*/ BSTR * pXML ) = 0;
      virtual HRESULT __stdcall raw_LoadBackImageFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_LoadWatermarkFromFile (
        /*[in]*/ BSTR PathFile ) = 0;
      virtual HRESULT __stdcall raw_PrepareLoadData ( ) = 0;
      virtual HRESULT __stdcall raw_CancelLoadData ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFromMemory (
        /*[in]*/ unsigned char * pData,
        /*[in]*/ long ByteCount,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_SaveToMemory (
        /*[out]*/ OLE_HANDLE * ppData,
        /*[out]*/ long * pBytesCount,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_LoadBackImageFromMemory (
        /*[in]*/ unsigned char * pBuffer,
        /*[in]*/ long BytesCount ) = 0;
      virtual HRESULT __stdcall raw_LoadWatermarkFromMemory (
        /*[in]*/ unsigned char * pBuffer,
        /*[in]*/ long BytesCount ) = 0;
      virtual HRESULT __stdcall raw_Register (
        /*[in]*/ BSTR SerialNo,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall get_SharePrintSetupOptions (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SharePrintSetupOptions (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SharePrintSetupObject (
        /*[out,retval]*/ struct IGRSharePrintSetupObject * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SharePrintSetupSetOptionEnabled (
        /*[in]*/ GRSharePrintSetupOption Option,
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall raw_SharePrintSetupEnableAllOptions ( ) = 0;
      virtual HRESULT __stdcall raw_SharePrintSetupDisableAllOptions ( ) = 0;
      virtual HRESULT __stdcall raw_SharePrintSetupGetOptionEnabled (
        /*[in]*/ GRSharePrintSetupOption Option,
        /*[out,retval]*/ VARIANT_BOOL * pEnabled ) = 0;
      virtual HRESULT __stdcall get_DesignLeftMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignLeftMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignRightMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignRightMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignTopMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignTopMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignBottomMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignBottomMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperOrientation (
        /*[out,retval]*/ GRPaperOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperOrientation (
        /*[in]*/ GRPaperOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DesignPaperSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DesignPaperSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ReportHeader (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRReportHeader * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReportFooter (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRReportFooter * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReportHeaderCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReportFooterCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertReportHeader (
        /*[out,retval]*/ struct IGRReportHeader * * ppReportHeader ) = 0;
      virtual HRESULT __stdcall raw_InsertReportFooter (
        /*[out,retval]*/ struct IGRReportFooter * * ppReportFooter ) = 0;
      virtual HRESULT __stdcall raw_DeleteReportHeader (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_DeleteReportFooter (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ VARIANT_BOOL DoneOpen,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_PrepareExport (
        /*[in]*/ GRExportType ExportType,
        /*[out,retval]*/ struct IGRExportOption * * pExportOption ) = 0;
      virtual HRESULT __stdcall raw_UnprepareExport ( ) = 0;
      virtual HRESULT __stdcall raw_PrepareRecordset (
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_CancelRecordset ( ) = 0;
      virtual HRESULT __stdcall get__SystemImage (
        /*[in]*/ GRSystemImage SystemImage,
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get__ResHinst (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall raw__AttachDesigner (
        /*[in]*/ IDispatch * pDesigner ) = 0;
      virtual HRESULT __stdcall raw__ObjSaveBegin ( ) = 0;
      virtual HRESULT __stdcall raw__ObjSaveEnd (
        /*[out]*/ OLE_HANDLE * ppData,
        /*[out]*/ unsigned long * pBytesCount ) = 0;
      virtual HRESULT __stdcall raw__ObjLoadBegin (
        /*[in]*/ unsigned char * pData,
        /*[in]*/ unsigned long BytesCount ) = 0;
      virtual HRESULT __stdcall raw__ObjLoadEnd ( ) = 0;
      virtual HRESULT __stdcall raw__ObjLoadEof (
        /*[out,retval]*/ VARIANT_BOOL * pEof ) = 0;
      virtual HRESULT __stdcall raw__CreateProxyReport (
        /*[out,retval]*/ struct IGridppReport * * ppReport ) = 0;
      virtual HRESULT __stdcall raw__DestroyProxyReport ( ) = 0;
      virtual HRESULT __stdcall raw__RefreshPrinter ( ) = 0;
      virtual HRESULT __stdcall raw__PullData ( ) = 0;
      virtual HRESULT __stdcall raw__GetMoneyLabelVarHandle (
        /*[out,retval]*/ OLE_HANDLE * pVal ) = 0;
      virtual HRESULT __stdcall get_DocType (
        /*[out,retval]*/ GRDocType * pVal ) = 0;
      virtual HRESULT __stdcall put_DocType (
        /*[in]*/ GRDocType pVal ) = 0;
      virtual HRESULT __stdcall raw_PrintDocumentData (
        /*[in]*/ struct IGRBinaryObject * pBinaryObject,
        /*[out,retval]*/ VARIANT_BOOL * pSucceeded ) = 0;
      virtual HRESULT __stdcall raw_GenerateDocumentData (
        /*[out,retval]*/ struct IGRBinaryObject * * ppBinaryObject ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
      virtual HRESULT __stdcall raw_WebRegisterStatus (
        /*[out,retval]*/ long * pResult ) = 0;
};

struct __declspec(uuid("0574abeb-b0da-465d-9eb7-286c00f3628f"))
IGRPrintViewer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurPageNo,put=PutCurPageNo))
    long CurPageNo;
    __declspec(property(get=GetReport,put=PutReport))
    IGridppReportPtr Report;
    __declspec(property(get=GetRowPages,put=PutRowPages))
    long RowPages;
    __declspec(property(get=GetPageCount))
    long PageCount;
    __declspec(property(get=GetRunning))
    VARIANT_BOOL Running;
    __declspec(property(put=PutDefaultToolbarCommand))
    VARIANT_BOOL DefaultToolbarCommand;
    __declspec(property(get=GetColPages,put=PutColPages))
    long ColPages;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    GRViewerBorderStyle BorderStyle;
    __declspec(property(get=GetZoomPercent,put=PutZoomPercent))
    long ZoomPercent;
    __declspec(property(get=GetViewMode,put=PutViewMode))
    GRPrintViewMode ViewMode;
    __declspec(property(get=GetShowRuler,put=PutShowRuler))
    VARIANT_BOOL ShowRuler;
    __declspec(property(get=GetShowToolbar,put=PutShowToolbar))
    VARIANT_BOOL ShowToolbar;
    __declspec(property(get=GetGenerateStyle,put=PutGenerateStyle))
    GRPrintGenerateStyle GenerateStyle;
    __declspec(property(get=GetShowMarginCorner,put=PutShowMarginCorner))
    VARIANT_BOOL ShowMarginCorner;
    __declspec(property(get=GetSearchable,put=PutSearchable))
    VARIANT_BOOL Searchable;
    __declspec(property(get=GetShowBookmark,put=PutShowBookmark))
    VARIANT_BOOL ShowBookmark;
    __declspec(property(get=GetEditMode,put=PutEditMode))
    GRPreviewEditMode EditMode;
    __declspec(property(get=GetShowPrintDlg,put=PutShowPrintDlg))
    VARIANT_BOOL ShowPrintDlg;

    //
    // Wrapper methods for error-handling
    //

    IGridppReportPtr GetReport ( );
    void PutReport (
        struct IGridppReport * pVal );
    long GetCurPageNo ( );
    void PutCurPageNo (
        long pVal );
    long GetPageCount ( );
    VARIANT_BOOL GetRunning ( );
    void PutDefaultToolbarCommand (
        VARIANT_BOOL _arg1 );
    void PutBorderStyle (
        GRViewerBorderStyle pstyle );
    GRViewerBorderStyle GetBorderStyle ( );
    GRPreviewEditMode GetEditMode ( );
    void PutEditMode (
        GRPreviewEditMode pVal );
    long GetRowPages ( );
    void PutRowPages (
        long pVal );
    long GetColPages ( );
    void PutColPages (
        long pVal );
    long GetZoomPercent ( );
    void PutZoomPercent (
        long pVal );
    GRPrintViewMode GetViewMode ( );
    void PutViewMode (
        GRPrintViewMode pVal );
    VARIANT_BOOL GetShowRuler ( );
    void PutShowRuler (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowToolbar ( );
    void PutShowToolbar (
        VARIANT_BOOL pVal );
    GRPrintGenerateStyle GetGenerateStyle ( );
    void PutGenerateStyle (
        GRPrintGenerateStyle pVal );
    VARIANT_BOOL GetShowMarginCorner ( );
    void PutShowMarginCorner (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSearchable ( );
    void PutSearchable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowBookmark ( );
    void PutShowBookmark (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowPrintDlg ( );
    void PutShowPrintDlg (
        VARIANT_BOOL pVal );
    HRESULT NextPage ( );
    HRESULT PriorPage ( );
    HRESULT FirstPage ( );
    HRESULT LastPage ( );
    HRESULT Print (
        VARIANT_BOOL ShowPrintDialog );
    HRESULT Refresh ( );
    HRESULT Start ( );
    HRESULT Stop ( );
    HRESULT ZoomToHeight ( );
    HRESULT ZoomIn ( );
    HRESULT ZoomOut ( );
    HRESULT ZoomToFit ( );
    HRESULT ZoomToWidth ( );
    HRESULT AddToolbarControl (
        GRToolControlType ControlType );
    HRESULT AddToolbarCustomButton (
        long BtnID,
        _bstr_t BtnFileName,
        _bstr_t TooltipText );
    HRESULT RemoveToolbarControl (
        GRToolControlType ControlType );
    HRESULT ResetToolbarContent ( );
    HRESULT UpdateToolbar ( );
    VARIANT_BOOL LoadFromDocumentFile (
        _bstr_t FileName );
    HRESULT QuickRefresh ( );
    VARIANT_BOOL Search (
        _bstr_t Text,
        VARIANT_BOOL CaseSensitive,
        VARIANT_BOOL WholeWord,
        VARIANT_BOOL ToUp,
        VARIANT_BOOL FromSelection,
        VARIANT_BOOL ShowDlg,
        VARIANT_BOOL ShowMsg );
    VARIANT_BOOL SearchAgain (
        VARIANT_BOOL ShowMsg );
    HRESULT DoToolbarCommand (
        GRToolControlType ControlType );
    HRESULT UpdateLanguage ( );
    HRESULT UpdateUI ( );
    VARIANT_BOOL GetOptionValue (
        GRPrintViewerOption Option );
    HRESULT SetOptionValue (
        GRPrintViewerOption Option,
        VARIANT_BOOL newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct IGridppReport * * pVal ) = 0;
      virtual HRESULT __stdcall put_Report (
        /*[in]*/ struct IGridppReport * pVal ) = 0;
      virtual HRESULT __stdcall get_CurPageNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CurPageNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Running (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultToolbarCommand (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ GRViewerBorderStyle pstyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ GRViewerBorderStyle * pstyle ) = 0;
      virtual HRESULT __stdcall get_EditMode (
        /*[out,retval]*/ GRPreviewEditMode * pVal ) = 0;
      virtual HRESULT __stdcall put_EditMode (
        /*[in]*/ GRPreviewEditMode pVal ) = 0;
      virtual HRESULT __stdcall get_RowPages (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowPages (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColPages (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColPages (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ZoomPercent (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ZoomPercent (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ViewMode (
        /*[out,retval]*/ GRPrintViewMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewMode (
        /*[in]*/ GRPrintViewMode pVal ) = 0;
      virtual HRESULT __stdcall get_ShowRuler (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowRuler (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowToolbar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowToolbar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GenerateStyle (
        /*[out,retval]*/ GRPrintGenerateStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_GenerateStyle (
        /*[in]*/ GRPrintGenerateStyle pVal ) = 0;
      virtual HRESULT __stdcall get_ShowMarginCorner (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowMarginCorner (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Searchable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Searchable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowBookmark (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowBookmark (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowPrintDlg (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowPrintDlg (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_NextPage ( ) = 0;
      virtual HRESULT __stdcall raw_PriorPage ( ) = 0;
      virtual HRESULT __stdcall raw_FirstPage ( ) = 0;
      virtual HRESULT __stdcall raw_LastPage ( ) = 0;
      virtual HRESULT __stdcall raw_Print (
        /*[in]*/ VARIANT_BOOL ShowPrintDialog ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomToHeight ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomOut ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomToFit ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomToWidth ( ) = 0;
      virtual HRESULT __stdcall raw_AddToolbarControl (
        /*[in]*/ GRToolControlType ControlType ) = 0;
      virtual HRESULT __stdcall raw_AddToolbarCustomButton (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR BtnFileName,
        /*[in]*/ BSTR TooltipText ) = 0;
      virtual HRESULT __stdcall raw_RemoveToolbarControl (
        /*[in]*/ GRToolControlType ControlType ) = 0;
      virtual HRESULT __stdcall raw_ResetToolbarContent ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateToolbar ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFromDocumentFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_QuickRefresh ( ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[in]*/ VARIANT_BOOL WholeWord,
        /*[in]*/ VARIANT_BOOL ToUp,
        /*[in]*/ VARIANT_BOOL FromSelection,
        /*[in]*/ VARIANT_BOOL ShowDlg,
        /*[in]*/ VARIANT_BOOL ShowMsg,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_SearchAgain (
        /*[in]*/ VARIANT_BOOL ShowMsg,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_DoToolbarCommand (
        /*[in]*/ GRToolControlType ControlType ) = 0;
      virtual HRESULT __stdcall raw_UpdateLanguage ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateUI ( ) = 0;
      virtual HRESULT __stdcall raw_GetOptionValue (
        /*[in]*/ GRPrintViewerOption Option,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOptionValue (
        /*[in]*/ GRPrintViewerOption Option,
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
};

struct __declspec(uuid("72a79692-2f9e-4fec-92cc-6b4a7375a3d6"))
IGRColumn : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTitleCell))
    IGRColumnTitleCellPtr TitleCell;
    __declspec(property(get=GetContentCell))
    IGRColumnContentCellPtr ContentCell;
    __declspec(property(get=GetParent))
    IGRDetailGridPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetFixedWidth,put=PutFixedWidth))
    VARIANT_BOOL FixedWidth;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnTitleCellPtr GetTitleCell ( );
    IGRColumnContentCellPtr GetContentCell ( );
    IGRDetailGridPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    VARIANT_BOOL GetFixedWidth ( );
    void PutFixedWidth (
        VARIANT_BOOL pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TitleCell (
        /*[out,retval]*/ struct IGRColumnTitleCell * * pVal ) = 0;
      virtual HRESULT __stdcall get_ContentCell (
        /*[out,retval]*/ struct IGRColumnContentCell * * pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IGRDetailGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FixedWidth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedWidth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("e2f421d7-73fa-462f-9bf5-7da3e512ca00"))
IGRColumnCell : IGRCellBase
{
    //
    // Property data
    //

    __declspec(property(get=GetColumn))
    IGRColumnPtr Column;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetEndEllipsis,put=PutEndEllipsis))
    VARIANT_BOOL EndEllipsis;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    GRTextAlign TextAlign;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnPtr GetColumn ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEndEllipsis ( );
    void PutEndEllipsis (
        VARIANT_BOOL pVal );
    GRTextAlign GetTextAlign ( );
    void PutTextAlign (
        GRTextAlign pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ struct IGRColumn * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EndEllipsis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EndEllipsis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ GRTextAlign * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ GRTextAlign pVal ) = 0;
};

struct __declspec(uuid("bb12aebd-5839-4a5e-9944-65b6798381c8"))
IGRColumnContentCell : IGRColumnCell
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IGRColumnContentPtr Parent;
    __declspec(property(get=GetDataField,put=PutDataField))
    _bstr_t DataField;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnContentPtr GetParent ( );
    _bstr_t GetDataField ( );
    void PutDataField (
        _bstr_t pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IGRColumnContent * * pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DataField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("af39550b-2a23-418a-acec-812c70ea5a62"))
IGRColumnContentCells : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRColumnContentCellPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnContentCellPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long IndexByName (
        _bstr_t Name );
    IGRColumnContentCellPtr ItemAt (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRColumnContentCell * * ppColumnContentCell ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRColumnContentCell * * ppItem ) = 0;
};

struct __declspec(uuid("42f6af5f-5fc4-4f44-9812-1fbd9224ce2c"))
IGRColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRColumnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IGRColumnPtr Add ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    long IndexByName (
        _bstr_t Name );
    IGRColumnPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRColumn * * ppColumn ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IGRColumn * * ppColumn ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRColumn * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("83cc68ef-b558-45bb-8023-6c4f3bdada7b"))
IGRColumnTitleCell : IGRColumnCell
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetGroupTitle))
    VARIANT_BOOL GroupTitle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetParent))
    IGRColumnTitlePtr Parent;
    __declspec(property(get=GetSubTitles))
    IGRColumnTitleCellsPtr SubTitles;
    __declspec(property(get=GetSupCell))
    IGRColumnTitleCellPtr SupCell;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGroupTitle ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    IGRColumnTitlePtr GetParent ( );
    IGRColumnTitleCellsPtr GetSubTitles ( );
    IGRColumnTitleCellPtr GetSupCell ( );
    HRESULT EncloseColumn (
        const _variant_t & ColumnIndex );
    IGRColumnTitleCellPtr AddSubGroupTitle (
        _bstr_t Name,
        _bstr_t Title );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GroupTitle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IGRColumnTitle * * pVal ) = 0;
      virtual HRESULT __stdcall get_SubTitles (
        /*[out,retval]*/ struct IGRColumnTitleCells * * pVal ) = 0;
      virtual HRESULT __stdcall get_SupCell (
        /*[out,retval]*/ struct IGRColumnTitleCell * * pVal ) = 0;
      virtual HRESULT __stdcall raw_EncloseColumn (
        /*[in]*/ VARIANT ColumnIndex ) = 0;
      virtual HRESULT __stdcall raw_AddSubGroupTitle (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppTitle ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("97502458-7024-4194-9598-5b62001d8c1a"))
IGRColumnTitleCells : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGRColumnTitleCellPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IGRColumnTitleCellPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IGRColumnTitleCellPtr AddGroup (
        _bstr_t Name,
        _bstr_t Title );
    HRESULT RemoveGroup (
        const _variant_t & Index );
    long IndexByName (
        _bstr_t Name );
    IGRColumnTitleCellPtr ItemAt (
        long Index );
    HRESULT ChangeItemOrder (
        const _variant_t & Index,
        long NewOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppColumnTitleCell ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_RemoveGroup (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_IndexByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_ItemAt (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_ChangeItemOrder (
        /*[in]*/ VARIANT Index,
        /*[in]*/ long NewOrder ) = 0;
};

struct __declspec(uuid("08513fc1-ccce-4603-8dd1-35ba1ca8d1cd"))
IGRColumnTitle : IGRColumnSection
{
    //
    // Property data
    //

    __declspec(property(get=GetRepeatStyle,put=PutRepeatStyle))
    GRRepeatStyle RepeatStyle;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetTitleCells))
    IGRColumnTitleCellsPtr TitleCells;

    //
    // Wrapper methods for error-handling
    //

    IGRColumnTitleCellsPtr GetTitleCells ( );
    GRRepeatStyle GetRepeatStyle ( );
    void PutRepeatStyle (
        GRRepeatStyle pVal );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TitleCells (
        /*[out,retval]*/ struct IGRColumnTitleCells * * pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatStyle (
        /*[out,retval]*/ GRRepeatStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatStyle (
        /*[in]*/ GRRepeatStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("fba070ab-385f-4988-b7a1-ce6b72799b48"))
IGRDisplayViewer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGridCenterView,put=PutGridCenterView))
    VARIANT_BOOL GridCenterView;
    __declspec(property(get=GetReport,put=PutReport))
    IGridppReportPtr Report;
    __declspec(property(get=GetRunning))
    VARIANT_BOOL Running;
    __declspec(property(get=GetShowPreviewLine,put=PutShowPreviewLine))
    VARIANT_BOOL ShowPreviewLine;
    __declspec(property(get=GetSelRowNo,put=PutSelRowNo))
    long SelRowNo;
    __declspec(property(get=GetSelColumnNo,put=PutSelColumnNo))
    long SelColumnNo;
    __declspec(property(get=GetSelColumnName,put=PutSelColumnName))
    _bstr_t SelColumnName;
    __declspec(property(get=GetGridCanShrink,put=PutGridCanShrink))
    VARIANT_BOOL GridCanShrink;
    __declspec(property(get=GetResizeToFit,put=PutResizeToFit))
    VARIANT_BOOL ResizeToFit;
    __declspec(property(get=GetRowCount))
    long RowCount;
    __declspec(property(get=GetSelectionBackColor,put=PutSelectionBackColor))
    OLE_COLOR SelectionBackColor;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    GRViewerBorderStyle BorderStyle;
    __declspec(property(get=GetSelectionForeColor,put=PutSelectionForeColor))
    OLE_COLOR SelectionForeColor;
    __declspec(property(get=GetSelectionFollowScroll,put=PutSelectionFollowScroll))
    VARIANT_BOOL SelectionFollowScroll;
    __declspec(property(get=GetAlwaysShowHScrollBar,put=PutAlwaysShowHScrollBar))
    VARIANT_BOOL AlwaysShowHScrollBar;
    __declspec(property(get=GetColumnMove,put=PutColumnMove))
    VARIANT_BOOL ColumnMove;
    __declspec(property(get=GetPageCount))
    long PageCount;
    __declspec(property(put=PutDefaultToolbarCommand))
    VARIANT_BOOL DefaultToolbarCommand;
    __declspec(property(get=GetBatchGetRecord,put=PutBatchGetRecord))
    VARIANT_BOOL BatchGetRecord;
    __declspec(property(get=GetBatchWantRecords,put=PutBatchWantRecords))
    long BatchWantRecords;
    __declspec(property(get=GetTotalRecord,put=PutTotalRecord))
    long TotalRecord;
    __declspec(property(get=GetBatchNo))
    long BatchNo;
    __declspec(property(get=GetBatchStartRecNo))
    long BatchStartRecNo;
    __declspec(property(get=GetBatchFinished,put=PutBatchFinished))
    VARIANT_BOOL BatchFinished;
    __declspec(property(get=GetColumnResize,put=PutColumnResize))
    VARIANT_BOOL ColumnResize;
    __declspec(property(get=GetRowSelection,put=PutRowSelection))
    VARIANT_BOOL RowSelection;
    __declspec(property(get=GetAlwaysShowVScrollBar,put=PutAlwaysShowVScrollBar))
    VARIANT_BOOL AlwaysShowVScrollBar;
    __declspec(property(get=GetVScrollPos,put=PutVScrollPos))
    long VScrollPos;
    __declspec(property(get=GetHScrollPos,put=PutHScrollPos))
    long HScrollPos;
    __declspec(property(get=GetSortColumns,put=PutSortColumns))
    _bstr_t SortColumns;
    __declspec(property(get=GetAlwaysShowSelection,put=PutAlwaysShowSelection))
    VARIANT_BOOL AlwaysShowSelection;
    __declspec(property(get=GetToPostColumnLayout,put=PutToPostColumnLayout))
    VARIANT_BOOL ToPostColumnLayout;
    __declspec(property(get=GetCurPageNo,put=PutCurPageNo))
    long CurPageNo;
    __declspec(property(get=GetShowToolbar,put=PutShowToolbar))
    VARIANT_BOOL ShowToolbar;
    __declspec(property(get=GetShowHeader,put=PutShowHeader))
    VARIANT_BOOL ShowHeader;
    __declspec(property(get=GetShowFooter,put=PutShowFooter))
    VARIANT_BOOL ShowFooter;
    __declspec(property(get=GetLeftGap,put=PutLeftGap))
    long LeftGap;
    __declspec(property(get=GetRightGap,put=PutRightGap))
    long RightGap;
    __declspec(property(get=GetTopGap,put=PutTopGap))
    long TopGap;
    __declspec(property(get=GetBottomGap,put=PutBottomGap))
    long BottomGap;
    __declspec(property(get=GetResortable,put=PutResortable))
    VARIANT_BOOL Resortable;
    __declspec(property(get=GetResortCaseSensitive,put=PutResortCaseSensitive))
    VARIANT_BOOL ResortCaseSensitive;
    __declspec(property(get=GetResortDefaultAsc,put=PutResortDefaultAsc))
    VARIANT_BOOL ResortDefaultAsc;
    __declspec(property(get=GetGridTitle3D,put=PutGridTitle3D))
    VARIANT_BOOL GridTitle3D;
    __declspec(property(get=GetSearchable,put=PutSearchable))
    VARIANT_BOOL Searchable;
    __declspec(property(get=GetRowsPerPage,put=PutRowsPerPage))
    long RowsPerPage;

    //
    // Wrapper methods for error-handling
    //

    void PutBorderStyle (
        GRViewerBorderStyle pstyle );
    GRViewerBorderStyle GetBorderStyle ( );
    long GetLeftGap ( );
    void PutLeftGap (
        long pVal );
    long GetRightGap ( );
    void PutRightGap (
        long pVal );
    long GetTopGap ( );
    void PutTopGap (
        long pVal );
    long GetBottomGap ( );
    void PutBottomGap (
        long pVal );
    long GetRowsPerPage ( );
    void PutRowsPerPage (
        long pVal );
    VARIANT_BOOL GetShowHeader ( );
    void PutShowHeader (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowFooter ( );
    void PutShowFooter (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowToolbar ( );
    void PutShowToolbar (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResortable ( );
    void PutResortable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResortCaseSensitive ( );
    void PutResortCaseSensitive (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResortDefaultAsc ( );
    void PutResortDefaultAsc (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGridTitle3D ( );
    void PutGridTitle3D (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSearchable ( );
    void PutSearchable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGridCenterView ( );
    void PutGridCenterView (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGridCanShrink ( );
    void PutGridCanShrink (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResizeToFit ( );
    void PutResizeToFit (
        VARIANT_BOOL pVal );
    OLE_COLOR GetSelectionBackColor ( );
    void PutSelectionBackColor (
        OLE_COLOR pVal );
    OLE_COLOR GetSelectionForeColor ( );
    void PutSelectionForeColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetSelectionFollowScroll ( );
    void PutSelectionFollowScroll (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAlwaysShowHScrollBar ( );
    void PutAlwaysShowHScrollBar (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAlwaysShowVScrollBar ( );
    void PutAlwaysShowVScrollBar (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetColumnMove ( );
    void PutColumnMove (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetColumnResize ( );
    void PutColumnResize (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRowSelection ( );
    void PutRowSelection (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBatchGetRecord ( );
    void PutBatchGetRecord (
        VARIANT_BOOL pVal );
    long GetBatchWantRecords ( );
    void PutBatchWantRecords (
        long pVal );
    long GetTotalRecord ( );
    void PutTotalRecord (
        long pVal );
    VARIANT_BOOL GetBatchFinished ( );
    void PutBatchFinished (
        VARIANT_BOOL pVal );
    long GetBatchNo ( );
    long GetBatchStartRecNo ( );
    VARIANT_BOOL GetRunning ( );
    long GetRowCount ( );
    long GetPageCount ( );
    void PutDefaultToolbarCommand (
        VARIANT_BOOL _arg1 );
    IGridppReportPtr GetReport ( );
    void PutReport (
        struct IGridppReport * pVal );
    VARIANT_BOOL GetShowPreviewLine ( );
    void PutShowPreviewLine (
        VARIANT_BOOL pVal );
    long GetSelRowNo ( );
    void PutSelRowNo (
        long pVal );
    long GetSelColumnNo ( );
    void PutSelColumnNo (
        long pVal );
    _bstr_t GetSelColumnName ( );
    void PutSelColumnName (
        _bstr_t pVal );
    long GetVScrollPos ( );
    void PutVScrollPos (
        long pVal );
    long GetHScrollPos ( );
    void PutHScrollPos (
        long pVal );
    _bstr_t GetSortColumns ( );
    void PutSortColumns (
        _bstr_t pVal );
    VARIANT_BOOL GetAlwaysShowSelection ( );
    void PutAlwaysShowSelection (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetToPostColumnLayout ( );
    void PutToPostColumnLayout (
        VARIANT_BOOL pVal );
    long GetCurPageNo ( );
    void PutCurPageNo (
        long pVal );
    HRESULT QuickRefresh ( );
    HRESULT Refresh ( );
    HRESULT Start ( );
    HRESULT Stop ( );
    IGRControlPtr GetControlFromPos (
        long xPos,
        long yPos );
    IGRSectionPtr GetSectionFromPos (
        long xPos,
        long yPos );
    IGRColumnContentCellPtr GetContentCellFromPos (
        long xPos,
        long yPos );
    IGRColumnTitleCellPtr GetTitleCellFromPos (
        long xPos,
        long yPos );
    HRESULT PostColumnLayout ( );
    HRESULT ResizeColumnToFitPage ( );
    HRESULT ResizeColumnToFit ( );
    HRESULT ResizeColumnToFitText ( );
    HRESULT NextPage ( );
    HRESULT PriorPage ( );
    HRESULT FirstPage ( );
    HRESULT LastPage ( );
    VARIANT_BOOL GetColumnVisible (
        _bstr_t ColumnName );
    HRESULT SetColumnVisible (
        _bstr_t ColumnName,
        VARIANT_BOOL Visible );
    HRESULT UpdateColumnView ( );
    HRESULT UpdateSelCell ( );
    HRESULT UpdateSelRow ( );
    HRESULT UpdateControl (
        struct IGRControl * pControl );
    HRESULT UpdateViewer ( );
    HRESULT LockUpdate ( );
    HRESULT UnlockUpdate ( );
    _bstr_t GetSelRowCellText (
        long ColumnIndex );
    VARIANT_BOOL Search (
        _bstr_t Text,
        VARIANT_BOOL CaseSensitive,
        VARIANT_BOOL WholeWord,
        VARIANT_BOOL ToUp,
        VARIANT_BOOL FromSelection,
        VARIANT_BOOL ShowDlg,
        VARIANT_BOOL ShowMsg );
    VARIANT_BOOL SearchAgain (
        VARIANT_BOOL ShowMsg );
    HRESULT ShowColumnVisibleDlg ( );
    HRESULT UpdateLanguage ( );
    HRESULT UpdateUI ( );
    HRESULT AddToolbarControl (
        GRToolControlType2 ControlType );
    HRESULT AddToolbarCustomButton (
        long BtnID,
        _bstr_t BtnFileName,
        _bstr_t TooltipText );
    HRESULT RemoveToolbarControl (
        GRToolControlType2 ControlType );
    HRESULT ResetToolbarContent ( );
    HRESULT UpdateToolbar ( );
    HRESULT DoToolbarCommand (
        GRToolControlType2 ControlType );
    VARIANT_BOOL GetOptionValue (
        GRDisplayViewerOption Option );
    HRESULT SetOptionValue (
        GRDisplayViewerOption Option,
        VARIANT_BOOL newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ GRViewerBorderStyle pstyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ GRViewerBorderStyle * pstyle ) = 0;
      virtual HRESULT __stdcall get_LeftGap (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftGap (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RightGap (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RightGap (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TopGap (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TopGap (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BottomGap (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomGap (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowsPerPage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowsPerPage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowHeader (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowHeader (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowFooter (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowFooter (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowToolbar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowToolbar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Resortable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Resortable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResortCaseSensitive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ResortCaseSensitive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResortDefaultAsc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ResortDefaultAsc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridTitle3D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GridTitle3D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Searchable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Searchable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridCenterView (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GridCenterView (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridCanShrink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GridCanShrink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResizeToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ResizeToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SelectionBackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_SelectionBackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_SelectionForeColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_SelectionForeColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_SelectionFollowScroll (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SelectionFollowScroll (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysShowHScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysShowHScrollBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysShowVScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysShowVScrollBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnMove (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnMove (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnResize (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnResize (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RowSelection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RowSelection (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BatchGetRecord (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BatchGetRecord (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BatchWantRecords (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BatchWantRecords (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TotalRecord (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalRecord (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BatchFinished (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BatchFinished (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BatchNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BatchStartRecNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Running (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultToolbarCommand (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct IGridppReport * * pVal ) = 0;
      virtual HRESULT __stdcall put_Report (
        /*[in]*/ struct IGridppReport * pVal ) = 0;
      virtual HRESULT __stdcall get_ShowPreviewLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowPreviewLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SelRowNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SelRowNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SelColumnNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SelColumnNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SelColumnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SelColumnName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VScrollPos (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VScrollPos (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HScrollPos (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HScrollPos (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SortColumns (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SortColumns (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysShowSelection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysShowSelection (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ToPostColumnLayout (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ToPostColumnLayout (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CurPageNo (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CurPageNo (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_QuickRefresh ( ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_GetControlFromPos (
        /*[in]*/ long xPos,
        /*[in]*/ long yPos,
        /*[out,retval]*/ struct IGRControl * * ppControl ) = 0;
      virtual HRESULT __stdcall raw_GetSectionFromPos (
        /*[in]*/ long xPos,
        /*[in]*/ long yPos,
        /*[out,retval]*/ struct IGRSection * * ppSection ) = 0;
      virtual HRESULT __stdcall raw_GetContentCellFromPos (
        /*[in]*/ long xPos,
        /*[in]*/ long yPos,
        /*[out,retval]*/ struct IGRColumnContentCell * * ppContentCell ) = 0;
      virtual HRESULT __stdcall raw_GetTitleCellFromPos (
        /*[in]*/ long xPos,
        /*[in]*/ long yPos,
        /*[out,retval]*/ struct IGRColumnTitleCell * * ppTitleCell ) = 0;
      virtual HRESULT __stdcall raw_PostColumnLayout ( ) = 0;
      virtual HRESULT __stdcall raw_ResizeColumnToFitPage ( ) = 0;
      virtual HRESULT __stdcall raw_ResizeColumnToFit ( ) = 0;
      virtual HRESULT __stdcall raw_ResizeColumnToFitText ( ) = 0;
      virtual HRESULT __stdcall raw_NextPage ( ) = 0;
      virtual HRESULT __stdcall raw_PriorPage ( ) = 0;
      virtual HRESULT __stdcall raw_FirstPage ( ) = 0;
      virtual HRESULT __stdcall raw_LastPage ( ) = 0;
      virtual HRESULT __stdcall raw_GetColumnVisible (
        /*[in]*/ BSTR ColumnName,
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall raw_SetColumnVisible (
        /*[in]*/ BSTR ColumnName,
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_UpdateColumnView ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateSelCell ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateSelRow ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateControl (
        /*[in]*/ struct IGRControl * pControl ) = 0;
      virtual HRESULT __stdcall raw_UpdateViewer ( ) = 0;
      virtual HRESULT __stdcall raw_LockUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_UnlockUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_GetSelRowCellText (
        /*[in]*/ long ColumnIndex,
        /*[out,retval]*/ BSTR * pText ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[in]*/ VARIANT_BOOL WholeWord,
        /*[in]*/ VARIANT_BOOL ToUp,
        /*[in]*/ VARIANT_BOOL FromSelection,
        /*[in]*/ VARIANT_BOOL ShowDlg,
        /*[in]*/ VARIANT_BOOL ShowMsg,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_SearchAgain (
        /*[in]*/ VARIANT_BOOL ShowMsg,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_ShowColumnVisibleDlg ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateLanguage ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateUI ( ) = 0;
      virtual HRESULT __stdcall raw_AddToolbarControl (
        /*[in]*/ GRToolControlType2 ControlType ) = 0;
      virtual HRESULT __stdcall raw_AddToolbarCustomButton (
        /*[in]*/ long BtnID,
        /*[in]*/ BSTR BtnFileName,
        /*[in]*/ BSTR TooltipText ) = 0;
      virtual HRESULT __stdcall raw_RemoveToolbarControl (
        /*[in]*/ GRToolControlType2 ControlType ) = 0;
      virtual HRESULT __stdcall raw_ResetToolbarContent ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateToolbar ( ) = 0;
      virtual HRESULT __stdcall raw_DoToolbarCommand (
        /*[in]*/ GRToolControlType2 ControlType ) = 0;
      virtual HRESULT __stdcall raw_GetOptionValue (
        /*[in]*/ GRDisplayViewerOption Option,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOptionValue (
        /*[in]*/ GRDisplayViewerOption Option,
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
};

struct __declspec(uuid("60eb191f-5e63-41e7-807f-c66ec7a8ef26"))
IGRExportOption : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetExportType))
    GRExportType ExportType;
    __declspec(property(get=GetMailExportFile,put=PutMailExportFile))
    VARIANT_BOOL MailExportFile;
    __declspec(property(get=GetMailTo,put=PutMailTo))
    _bstr_t MailTo;
    __declspec(property(get=GetMailSubject,put=PutMailSubject))
    _bstr_t MailSubject;
    __declspec(property(get=GetMailText,put=PutMailText))
    _bstr_t MailText;
    __declspec(property(get=GetAbortShowOptionDlg,put=PutAbortShowOptionDlg))
    VARIANT_BOOL AbortShowOptionDlg;
    __declspec(property(get=GetAbortOpenFile,put=PutAbortOpenFile))
    VARIANT_BOOL AbortOpenFile;
    __declspec(property(get=GetAsE2CellOption))
    IGRE2CellOptionPtr AsE2CellOption;
    __declspec(property(get=GetAsE2XLSOption))
    IGRE2XLSOptionPtr AsE2XLSOption;
    __declspec(property(get=GetAsE2TXTOption))
    IGRE2TXTOptionPtr AsE2TXTOption;
    __declspec(property(get=GetAsE2HTMOption))
    IGRE2HTMOptionPtr AsE2HTMOption;
    __declspec(property(get=GetAsE2RTFOption))
    IGRE2RTFOptionPtr AsE2RTFOption;
    __declspec(property(get=GetAsE2PDFOption))
    IGRE2PDFOptionPtr AsE2PDFOption;
    __declspec(property(get=GetAsE2CSVOption))
    IGRE2CSVOptionPtr AsE2CSVOption;
    __declspec(property(get=GetAsE2IMGOption))
    IGRE2IMGOptionPtr AsE2IMGOption;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pVal );
    GRExportType GetExportType ( );
    VARIANT_BOOL GetMailExportFile ( );
    void PutMailExportFile (
        VARIANT_BOOL pVal );
    _bstr_t GetMailTo ( );
    void PutMailTo (
        _bstr_t pVal );
    _bstr_t GetMailSubject ( );
    void PutMailSubject (
        _bstr_t pVal );
    _bstr_t GetMailText ( );
    void PutMailText (
        _bstr_t pVal );
    VARIANT_BOOL GetAbortShowOptionDlg ( );
    void PutAbortShowOptionDlg (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAbortOpenFile ( );
    void PutAbortOpenFile (
        VARIANT_BOOL pVal );
    IGRE2CellOptionPtr GetAsE2CellOption ( );
    IGRE2XLSOptionPtr GetAsE2XLSOption ( );
    IGRE2TXTOptionPtr GetAsE2TXTOption ( );
    IGRE2HTMOptionPtr GetAsE2HTMOption ( );
    IGRE2RTFOptionPtr GetAsE2RTFOption ( );
    IGRE2PDFOptionPtr GetAsE2PDFOption ( );
    IGRE2CSVOptionPtr GetAsE2CSVOption ( );
    IGRE2IMGOptionPtr GetAsE2IMGOption ( );
    VARIANT_BOOL ShowOptionDlg ( );
    HRESULT _GetFileTextResID (
        unsigned long * pExtFileNameID,
        unsigned long * pExtFileDescID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExportType (
        /*[out,retval]*/ GRExportType * pVal ) = 0;
      virtual HRESULT __stdcall get_MailExportFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MailExportFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MailTo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailTo (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MailSubject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailSubject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MailText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AbortShowOptionDlg (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AbortShowOptionDlg (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AbortOpenFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AbortOpenFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2CellOption (
        /*[out,retval]*/ struct IGRE2CellOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2XLSOption (
        /*[out,retval]*/ struct IGRE2XLSOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2TXTOption (
        /*[out,retval]*/ struct IGRE2TXTOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2HTMOption (
        /*[out,retval]*/ struct IGRE2HTMOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2RTFOption (
        /*[out,retval]*/ struct IGRE2RTFOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2PDFOption (
        /*[out,retval]*/ struct IGRE2PDFOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2CSVOption (
        /*[out,retval]*/ struct IGRE2CSVOption * * pVal ) = 0;
      virtual HRESULT __stdcall get_AsE2IMGOption (
        /*[out,retval]*/ struct IGRE2IMGOption * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowOptionDlg (
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw__GetFileTextResID (
        /*[out]*/ unsigned long * pExtFileNameID,
        /*[out]*/ unsigned long * pExtFileDescID ) = 0;
};

struct __declspec(uuid("ebf161f0-f347-441a-9c0d-0aca7824793b"))
IGRE2CellOption : IGRExportOption
{
    //
    // Property data
    //

    __declspec(property(get=GetExportPageBreak,put=PutExportPageBreak))
    VARIANT_BOOL ExportPageBreak;
    __declspec(property(get=GetExportPageHeaderFooter,put=PutExportPageHeaderFooter))
    VARIANT_BOOL ExportPageHeaderFooter;
    __declspec(property(get=GetOnlyExportDetailGrid,put=PutOnlyExportDetailGrid))
    VARIANT_BOOL OnlyExportDetailGrid;
    __declspec(property(get=GetSupressEmptyLines,put=PutSupressEmptyLines))
    VARIANT_BOOL SupressEmptyLines;
    __declspec(property(get=GetColumnAsDetailGrid,put=PutColumnAsDetailGrid))
    VARIANT_BOOL ColumnAsDetailGrid;
    __declspec(property(get=GetOnlyExportPureText,put=PutOnlyExportPureText))
    VARIANT_BOOL OnlyExportPureText;
    __declspec(property(get=GetSameAsPrint,put=PutSameAsPrint))
    VARIANT_BOOL SameAsPrint;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetExportPageBreak ( );
    void PutExportPageBreak (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetExportPageHeaderFooter ( );
    void PutExportPageHeaderFooter (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOnlyExportDetailGrid ( );
    void PutOnlyExportDetailGrid (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSupressEmptyLines ( );
    void PutSupressEmptyLines (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetColumnAsDetailGrid ( );
    void PutColumnAsDetailGrid (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOnlyExportPureText ( );
    void PutOnlyExportPureText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSameAsPrint ( );
    void PutSameAsPrint (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExportPageBreak (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExportPageBreak (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ExportPageHeaderFooter (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExportPageHeaderFooter (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OnlyExportDetailGrid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OnlyExportDetailGrid (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SupressEmptyLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SupressEmptyLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnAsDetailGrid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnAsDetailGrid (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OnlyExportPureText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OnlyExportPureText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SameAsPrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SameAsPrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("60eb191f-5e63-41e7-808f-c66ec7a8ef26"))
IGRE2XLSOption : IGRE2CellOption
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnTitleForbidRepeat,put=PutColumnTitleForbidRepeat))
    VARIANT_BOOL ColumnTitleForbidRepeat;
    __declspec(property(get=GetPageLeftMargin,put=PutPageLeftMargin))
    double PageLeftMargin;
    __declspec(property(get=GetPageRightMargin,put=PutPageRightMargin))
    double PageRightMargin;
    __declspec(property(get=GetPageTopMargin,put=PutPageTopMargin))
    double PageTopMargin;
    __declspec(property(get=GetPageBottomMargin,put=PutPageBottomMargin))
    double PageBottomMargin;
    __declspec(property(get=GetMinColumnWidth,put=PutMinColumnWidth))
    long MinColumnWidth;
    __declspec(property(get=GetMinRowHeight,put=PutMinRowHeight))
    long MinRowHeight;
    __declspec(property(get=GetExpandRowHeight,put=PutExpandRowHeight))
    VARIANT_BOOL ExpandRowHeight;
    __declspec(property(get=GetNewSheetRows,put=PutNewSheetRows))
    long NewSheetRows;

    //
    // Wrapper methods for error-handling
    //

    long GetMinColumnWidth ( );
    void PutMinColumnWidth (
        long pVal );
    long GetMinRowHeight ( );
    void PutMinRowHeight (
        long pVal );
    VARIANT_BOOL GetExpandRowHeight ( );
    void PutExpandRowHeight (
        VARIANT_BOOL pVal );
    long GetNewSheetRows ( );
    void PutNewSheetRows (
        long pVal );
    VARIANT_BOOL GetColumnTitleForbidRepeat ( );
    void PutColumnTitleForbidRepeat (
        VARIANT_BOOL pVal );
    double GetPageLeftMargin ( );
    void PutPageLeftMargin (
        double pVal );
    double GetPageRightMargin ( );
    void PutPageRightMargin (
        double pVal );
    double GetPageTopMargin ( );
    void PutPageTopMargin (
        double pVal );
    double GetPageBottomMargin ( );
    void PutPageBottomMargin (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinColumnWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinColumnWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinRowHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinRowHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ExpandRowHeight (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpandRowHeight (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NewSheetRows (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NewSheetRows (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnTitleForbidRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnTitleForbidRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PageLeftMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageLeftMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageRightMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageRightMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageTopMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageTopMargin (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageBottomMargin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageBottomMargin (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3bb506ab-425b-43b0-bc82-28a61fccf686"))
IGRE2TXTOption : IGRE2CellOption
{
    //
    // Property data
    //

    __declspec(property(get=GetUsingTabChar,put=PutUsingTabChar))
    VARIANT_BOOL UsingTabChar;
    __declspec(property(get=GetTextEncode,put=PutTextEncode))
    GRTextEncodeMode TextEncode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsingTabChar ( );
    void PutUsingTabChar (
        VARIANT_BOOL pVal );
    GRTextEncodeMode GetTextEncode ( );
    void PutTextEncode (
        GRTextEncodeMode pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsingTabChar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsingTabChar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextEncode (
        /*[out,retval]*/ GRTextEncodeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_TextEncode (
        /*[in]*/ GRTextEncodeMode pVal ) = 0;
};

struct __declspec(uuid("f5d15e31-fa9a-42be-be9c-8688e7d9d6a0"))
IGRE2HTMOption : IGRE2CellOption
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiPage,put=PutMultiPage))
    VARIANT_BOOL MultiPage;
    __declspec(property(get=GetPicturePath,put=PutPicturePath))
    _bstr_t PicturePath;
    __declspec(property(get=GetShowNavLink,put=PutShowNavLink))
    VARIANT_BOOL ShowNavLink;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMultiPage ( );
    void PutMultiPage (
        VARIANT_BOOL pVal );
    _bstr_t GetPicturePath ( );
    void PutPicturePath (
        _bstr_t pVal );
    VARIANT_BOOL GetShowNavLink ( );
    void PutShowNavLink (
        VARIANT_BOOL pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MultiPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PicturePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PicturePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowNavLink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowNavLink (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f4aa885f-af9c-4032-a65a-f3dfd458c289"))
IGRE2RTFOption : IGRE2CellOption
{
    //
    // Property data
    //

    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetCreator,put=PutCreator))
    _bstr_t Creator;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pVal );
    _bstr_t GetCreator ( );
    void PutCreator (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Creator (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("273631dd-1cac-49e9-92ee-584f48921a1e"))
IGRE2PDFOption : IGRExportOption
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoShrinkFont,put=PutAutoShrinkFont))
    VARIANT_BOOL AutoShrinkFont;
    __declspec(property(get=GetCompressed,put=PutCompressed))
    VARIANT_BOOL Compressed;
    __declspec(property(get=GetProducer,put=PutProducer))
    _bstr_t Producer;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetOwnerPassword,put=PutOwnerPassword))
    _bstr_t OwnerPassword;
    __declspec(property(get=GetUserPassword,put=PutUserPassword))
    _bstr_t UserPassword;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetCreator,put=PutCreator))
    _bstr_t Creator;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetAnsiTextMode,put=PutAnsiTextMode))
    VARIANT_BOOL AnsiTextMode;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pVal );
    _bstr_t GetCreator ( );
    void PutCreator (
        _bstr_t pVal );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pVal );
    VARIANT_BOOL GetAnsiTextMode ( );
    void PutAnsiTextMode (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoShrinkFont ( );
    void PutAutoShrinkFont (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCompressed ( );
    void PutCompressed (
        VARIANT_BOOL pVal );
    _bstr_t GetProducer ( );
    void PutProducer (
        _bstr_t pVal );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pVal );
    _bstr_t GetOwnerPassword ( );
    void PutOwnerPassword (
        _bstr_t pVal );
    _bstr_t GetUserPassword ( );
    void PutUserPassword (
        _bstr_t pVal );
    VARIANT_BOOL GetDocPermission (
        GRPDFDocPermission Permission );
    HRESULT SetDocPermission (
        GRPDFDocPermission Permission,
        VARIANT_BOOL Enabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Creator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AnsiTextMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AnsiTextMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoShrinkFont (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoShrinkFont (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Compressed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Compressed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Producer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Producer (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OwnerPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OwnerPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDocPermission (
        /*[in]*/ GRPDFDocPermission Permission,
        /*[out,retval]*/ VARIANT_BOOL * pEnabled ) = 0;
      virtual HRESULT __stdcall raw_SetDocPermission (
        /*[in]*/ GRPDFDocPermission Permission,
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
};

struct __declspec(uuid("f623a5e8-4ae4-494e-975b-3c5404428625"))
IGRE2CSVOption : IGRE2CellOption
{
    //
    // Property data
    //

    __declspec(property(get=GetDelimiterChar,put=PutDelimiterChar))
    char DelimiterChar;
    __declspec(property(get=GetQuoteText,put=PutQuoteText))
    _bstr_t QuoteText;
    __declspec(property(get=GetTextEncode,put=PutTextEncode))
    GRTextEncodeMode TextEncode;

    //
    // Wrapper methods for error-handling
    //

    char GetDelimiterChar ( );
    void PutDelimiterChar (
        char pVal );
    _bstr_t GetQuoteText ( );
    void PutQuoteText (
        _bstr_t pVal );
    GRTextEncodeMode GetTextEncode ( );
    void PutTextEncode (
        GRTextEncodeMode pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DelimiterChar (
        /*[out,retval]*/ char * pVal ) = 0;
      virtual HRESULT __stdcall put_DelimiterChar (
        /*[in]*/ char pVal ) = 0;
      virtual HRESULT __stdcall get_QuoteText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_QuoteText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextEncode (
        /*[out,retval]*/ GRTextEncodeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_TextEncode (
        /*[in]*/ GRTextEncodeMode pVal ) = 0;
};

struct __declspec(uuid("81727f33-8d8c-45dc-b525-07abdc5fb652"))
IGRE2IMGOption : IGRExportOption
{
    //
    // Property data
    //

    __declspec(property(get=GetImageType,put=PutImageType))
    GRExportImageType ImageType;
    __declspec(property(get=GetDPI,put=PutDPI))
    long DPI;
    __declspec(property(get=GetDrawPageBox,put=PutDrawPageBox))
    VARIANT_BOOL DrawPageBox;
    __declspec(property(get=GetAllInOne,put=PutAllInOne))
    VARIANT_BOOL AllInOne;
    __declspec(property(get=GetVertGap,put=PutVertGap))
    long VertGap;

    //
    // Wrapper methods for error-handling
    //

    GRExportImageType GetImageType ( );
    void PutImageType (
        GRExportImageType pVal );
    long GetDPI ( );
    void PutDPI (
        long pVal );
    VARIANT_BOOL GetDrawPageBox ( );
    void PutDrawPageBox (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllInOne ( );
    void PutAllInOne (
        VARIANT_BOOL pVal );
    long GetVertGap ( );
    void PutVertGap (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageType (
        /*[out,retval]*/ GRExportImageType * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageType (
        /*[in]*/ GRExportImageType pVal ) = 0;
      virtual HRESULT __stdcall get_DPI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DPI (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DrawPageBox (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawPageBox (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllInOne (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllInOne (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VertGap (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VertGap (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("5f9d573a-8350-4a94-bb9f-2d0fa787ec7c"))
IGRFreeGrid : IGRControl
{
    //
    // Property data
    //

    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetRowCount,put=PutRowCount))
    long RowCount;
    __declspec(property(get=GetColLinePen))
    IGRPenPtr ColLinePen;
    __declspec(property(get=GetRowLinePen))
    IGRPenPtr RowLinePen;
    __declspec(property(get=GetShowColLine,put=PutShowColLine))
    VARIANT_BOOL ShowColLine;
    __declspec(property(get=GetShowRowLine,put=PutShowRowLine))
    VARIANT_BOOL ShowRowLine;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;
    __declspec(property(get=GetGrowToBottom,put=PutGrowToBottom))
    VARIANT_BOOL GrowToBottom;
    __declspec(property(get=GetTitleRows,put=PutTitleRows))
    long TitleRows;
    __declspec(property(get=GetTitleRepeat,put=PutTitleRepeat))
    VARIANT_BOOL TitleRepeat;

    //
    // Wrapper methods for error-handling
    //

    long GetColumnCount ( );
    void PutColumnCount (
        long pVal );
    long GetRowCount ( );
    void PutRowCount (
        long pVal );
    IGRPenPtr GetColLinePen ( );
    IGRPenPtr GetRowLinePen ( );
    VARIANT_BOOL GetShowColLine ( );
    void PutShowColLine (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowRowLine ( );
    void PutShowRowLine (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGrowToBottom ( );
    void PutGrowToBottom (
        VARIANT_BOOL pVal );
    long GetTitleRows ( );
    void PutTitleRows (
        long pVal );
    VARIANT_BOOL GetTitleRepeat ( );
    void PutTitleRepeat (
        VARIANT_BOOL pVal );
    IGRFreeGridColumnPtr ColumnAt (
        long ColumnIndex );
    IGRFreeGridRowPtr RowAt (
        long RowIndex );
    IGRFreeGridCellPtr CellAt (
        long RowIndex,
        long ColumnIndex );
    IGRFreeGridCellPtr CellByDataName (
        _bstr_t DataName );
    IGRFreeGridCellPtr _Cell (
        long RowIndex,
        long ColumnIndex );
    IGRFreeGridColumnPtr _Column (
        long ColumnIndex );
    IGRFreeGridRowPtr _Row (
        long RowIndex );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RowCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColLinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_RowLinePen (
        /*[out,retval]*/ struct IGRPen * * pVal ) = 0;
      virtual HRESULT __stdcall get_ShowColLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowColLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowRowLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowRowLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GrowToBottom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GrowToBottom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TitleRows (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleRows (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TitleRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ColumnAt (
        /*[in]*/ long ColumnIndex,
        /*[out,retval]*/ struct IGRFreeGridColumn * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_RowAt (
        /*[in]*/ long RowIndex,
        /*[out,retval]*/ struct IGRFreeGridRow * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_CellAt (
        /*[in]*/ long RowIndex,
        /*[in]*/ long ColumnIndex,
        /*[out,retval]*/ struct IGRFreeGridCell * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_CellByDataName (
        /*[in]*/ BSTR DataName,
        /*[out,retval]*/ struct IGRFreeGridCell * * ppItem ) = 0;
      virtual HRESULT __stdcall raw__Cell (
        /*[in]*/ long RowIndex,
        /*[in]*/ long ColumnIndex,
        /*[out,retval]*/ struct IGRFreeGridCell * * ppItem ) = 0;
      virtual HRESULT __stdcall raw__Column (
        /*[in]*/ long ColumnIndex,
        /*[out,retval]*/ struct IGRFreeGridColumn * * ppItem ) = 0;
      virtual HRESULT __stdcall raw__Row (
        /*[in]*/ long RowIndex,
        /*[out,retval]*/ struct IGRFreeGridRow * * ppItem ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("8fe11b07-22dc-4691-85d7-0469364b4b46"))
IGRFreeGridColumn : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAlignColumn,put=PutAlignColumn))
    _bstr_t AlignColumn;
    __declspec(property(get=GetAlignColumnEx,put=PutAlignColumnEx))
    _bstr_t AlignColumnEx;
    __declspec(property(get=GetAlignColumnSide,put=PutAlignColumnSide))
    GRAlignColumnStyle AlignColumnSide;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFixedWidth,put=PutFixedWidth))
    VARIANT_BOOL FixedWidth;
    __declspec(property(get=GetFreeGrid))
    IGRFreeGridPtr FreeGrid;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    double GetWidth ( );
    void PutWidth (
        double pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetAlignColumn ( );
    void PutAlignColumn (
        _bstr_t pVal );
    _bstr_t GetAlignColumnEx ( );
    void PutAlignColumnEx (
        _bstr_t pVal );
    GRAlignColumnStyle GetAlignColumnSide ( );
    void PutAlignColumnSide (
        GRAlignColumnStyle pVal );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFixedWidth ( );
    void PutFixedWidth (
        VARIANT_BOOL pVal );
    IGRFreeGridPtr GetFreeGrid ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumnEx (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumnEx (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AlignColumnSide (
        /*[out,retval]*/ GRAlignColumnStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignColumnSide (
        /*[in]*/ GRAlignColumnStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FixedWidth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedWidth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FreeGrid (
        /*[out,retval]*/ struct IGRFreeGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

struct __declspec(uuid("5dabf9ad-2396-4c11-bfd7-a5ee39772954"))
IGRFreeGridRow : IGRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFreeGrid))
    IGRFreeGridPtr FreeGrid;
    __declspec(property(get=GetLock,put=PutLock))
    GRLockType Lock;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL pVal );
    IGRFreeGridPtr GetFreeGrid ( );
    GRLockType GetLock ( );
    void PutLock (
        GRLockType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_KeepTogether (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_KeepTogether (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FreeGrid (
        /*[out,retval]*/ struct IGRFreeGrid * * pVal ) = 0;
      virtual HRESULT __stdcall get_Lock (
        /*[out,retval]*/ GRLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_Lock (
        /*[in]*/ GRLockType pVal ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_gregn6Lib =
    {0x4018f953,0x1bfe,0x441e,{0x8a,0x04,0xdc,0x8b,0xa1,0xff,0x06,0x0e}};
extern "C" const GUID __declspec(selectany) DIID__IGridppReportEvents =
    {0x330f80f5,0x4568,0x4f70,{0xbf,0xcb,0x68,0x3d,0x3b,0x90,0xfe,0xbb}};
extern "C" const GUID __declspec(selectany) IID_IGRObject =
    {0x07120975,0xb963,0x4f85,{0x9b,0x4d,0x0a,0xc9,0x79,0xfe,0xbb,0x5d}};
extern "C" const GUID __declspec(selectany) IID_IGRFont =
    {0xd4708b2f,0xdc00,0x4ef6,{0x95,0x59,0xa5,0xdd,0x9e,0x86,0x04,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IGRPen =
    {0xc9ef8e78,0x8e3a,0x428c,{0x93,0xc5,0xf5,0x2e,0x14,0x6c,0xb6,0xff}};
extern "C" const GUID __declspec(selectany) IID_IGRBorder =
    {0xfcdb44d7,0x4e0b,0x4eb6,{0xa1,0xe2,0x09,0x26,0x89,0xe8,0xa4,0x82}};
extern "C" const GUID __declspec(selectany) IID_IGRTextFormat =
    {0x4c56923d,0x4012,0x4d28,{0x82,0x83,0x1b,0x29,0x4c,0x5c,0x2a,0x06}};
extern "C" const GUID __declspec(selectany) IID_IGRChartAxis =
    {0x1d1e02b3,0xe1bd,0x4c84,{0x95,0xf8,0xbb,0x19,0xbb,0xb4,0x81,0xf0}};
extern "C" const GUID __declspec(selectany) IID_IGRChartSeries =
    {0xca0a5cbe,0x7eec,0x44fd,{0xab,0xfd,0xfc,0x65,0xbf,0xed,0x86,0x18}};
extern "C" const GUID __declspec(selectany) IID_IGRChartSeriesCollection =
    {0xa1c0e90d,0xb75a,0x4ffd,{0xa5,0x42,0x54,0xc9,0xe4,0x47,0x85,0xa6}};
extern "C" const GUID __declspec(selectany) IID_IGRParameter =
    {0x23af6c8a,0x0f15,0x45e3,{0xa1,0x0d,0x93,0x73,0xbb,0x15,0xac,0x86}};
extern "C" const GUID __declspec(selectany) IID_IGRParameters =
    {0xd40307c2,0x9342,0x4c0d,{0x97,0x34,0xa1,0x03,0x41,0x81,0x86,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IGRPrinter =
    {0x17b23325,0x7316,0x4098,{0x9f,0xe3,0xb5,0xa1,0xc2,0x4d,0xb2,0x96}};
extern "C" const GUID __declspec(selectany) IID_IGRDateTime =
    {0x95eb847d,0x6550,0x4fc7,{0xa1,0x23,0xde,0x05,0x0e,0x03,0x28,0xaa}};
extern "C" const GUID __declspec(selectany) IID_IGRSharePrintSetupObject =
    {0x5bcb27bb,0x9750,0x4b28,{0x93,0x84,0x77,0x80,0x1f,0xb0,0xd4,0xeb}};
extern "C" const GUID __declspec(selectany) DIID__IGRDisplayViewerEvents =
    {0x2564dce8,0xfedb,0x4eb6,{0xb7,0xf9,0x50,0x26,0xf7,0xf1,0x04,0x1e}};
extern "C" const GUID __declspec(selectany) DIID__IGRPrintViewerEvents =
    {0xa9e920a1,0xc722,0x4a81,{0x9f,0xcf,0x4d,0x5e,0xbf,0xfa,0x21,0xf4}};
extern "C" const GUID __declspec(selectany) CLSID_GridppReport =
    {0xf9364159,0x6aed,0x4f9c,{0x8b,0xaf,0xd7,0xc7,0xed,0x61,0x60,0xa8}};
extern "C" const GUID __declspec(selectany) CLSID_GRDisplayViewer =
    {0x1b5ea181,0xa38d,0x4f42,{0x88,0xb2,0x6a,0xf7,0x4c,0xf6,0xd6,0xc0}};
extern "C" const GUID __declspec(selectany) CLSID_GRDisplayViewerProps =
    {0x7fd5dc62,0xded0,0x4138,{0x9c,0x48,0x55,0xf0,0xa0,0xfe,0x7b,0x66}};
extern "C" const GUID __declspec(selectany) CLSID_GRPrintViewer =
    {0x44cbb5de,0x5afb,0x4c3d,{0x8f,0x3f,0x0f,0x70,0xca,0x53,0x72,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_GRPrintViewerProps =
    {0x6ca58cb2,0x2ad1,0x4ad0,{0xb3,0xcc,0x5f,0x5c,0x00,0x0b,0xbd,0xee}};
extern "C" const GUID __declspec(selectany) IID_IGRGroup =
    {0xf803ae1d,0xb578,0x490a,{0xa1,0xfe,0x38,0x97,0x6a,0xd2,0xb6,0x25}};
extern "C" const GUID __declspec(selectany) IID_IGRGroups =
    {0x488b2328,0x67c0,0x42d1,{0xa1,0x33,0x30,0x3f,0xf6,0x0d,0x8a,0xe2}};
extern "C" const GUID __declspec(selectany) IID_IGRDetailGrid =
    {0xcb11f828,0xa97b,0x4bc3,{0x9b,0x7a,0x9d,0x2d,0xde,0xb1,0xc2,0x29}};
extern "C" const GUID __declspec(selectany) IID_IGRSection =
    {0x77fd1006,0x7067,0x41ff,{0xa7,0x12,0x0f,0x35,0x6a,0x6a,0xce,0x8c}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnSection =
    {0xc765e825,0x5f52,0x44cb,{0xaa,0xb6,0xfa,0x89,0x37,0x6d,0xa4,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IGRPageHeader =
    {0x7fc1d3a0,0x693f,0x486e,{0xbd,0xf3,0x02,0xe9,0x8f,0x50,0xf9,0xf3}};
extern "C" const GUID __declspec(selectany) IID_IGRPageFooter =
    {0xaacdaa8b,0x5ebb,0x4cc7,{0xbc,0xb9,0xc3,0x00,0xfe,0x71,0x84,0xa5}};
extern "C" const GUID __declspec(selectany) IID_IGRReportSection =
    {0x53e18537,0x559d,0x4ef2,{0x94,0xc3,0x47,0xa1,0xef,0x38,0x10,0x0f}};
extern "C" const GUID __declspec(selectany) IID_IGRReportHeader =
    {0xf82df93f,0x5ff2,0x40a6,{0xb5,0x0b,0x01,0x66,0x66,0xec,0x08,0xca}};
extern "C" const GUID __declspec(selectany) IID_IGRReportHeaders =
    {0x6fa2be8f,0xb674,0x49a9,{0xa0,0x81,0xfe,0x39,0x68,0xae,0x8d,0x8d}};
extern "C" const GUID __declspec(selectany) IID_IGRReportFooter =
    {0xb2cc2c43,0xcf42,0x4e38,{0xbd,0xbb,0x5c,0x04,0xdf,0x11,0x79,0x3f}};
extern "C" const GUID __declspec(selectany) IID_IGRReportFooters =
    {0xce4b64d4,0x5b5c,0x4b74,{0x84,0x70,0x1c,0xc6,0x2f,0x8e,0x9f,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IGRGroupSection =
    {0x36971202,0xd715,0x4afc,{0x83,0xd4,0x7c,0x0d,0xdd,0x88,0x72,0xe8}};
extern "C" const GUID __declspec(selectany) IID_IGRGroupHeader =
    {0x5c2fc87f,0x12f8,0x4a09,{0x8a,0x4a,0x79,0x26,0x71,0xc0,0x3c,0x74}};
extern "C" const GUID __declspec(selectany) IID_IGRGroupFooter =
    {0xb753063d,0xaeba,0x4e5e,{0xb5,0x3a,0xf8,0x9b,0x68,0xf1,0xf6,0x22}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnContent =
    {0x23f65787,0xd22b,0x4ca6,{0xba,0x49,0xd2,0x2b,0x63,0xca,0x35,0x3a}};
extern "C" const GUID __declspec(selectany) IID_IGRControls =
    {0x48636e6a,0x758e,0x46c0,{0xb3,0x7a,0xc2,0xa2,0xca,0xc9,0x46,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IGRCellBase =
    {0xe5561733,0x9cd9,0x4d47,{0xae,0x6b,0x3c,0xb1,0x0a,0x3d,0x67,0x72}};
extern "C" const GUID __declspec(selectany) IID_IGRFreeGridCell =
    {0xcd0a6964,0xd013,0x4db6,{0x96,0xc4,0x5b,0x1d,0xe0,0xdb,0x8f,0x1c}};
extern "C" const GUID __declspec(selectany) IID_IGRControl =
    {0x07120975,0xb963,0x4f75,{0x9b,0x4d,0x0a,0xc9,0x79,0xfe,0xbb,0x5d}};
extern "C" const GUID __declspec(selectany) IID_IGRTextBox =
    {0x6a246ac9,0x1715,0x40b6,{0xa4,0x83,0xde,0x9f,0x3e,0x8d,0xa4,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IGRStaticBox =
    {0xb4af4881,0x7230,0x4ae0,{0x8d,0x3a,0x02,0xf9,0x6f,0x33,0x94,0x54}};
extern "C" const GUID __declspec(selectany) IID_IGRShapeBox =
    {0xc04a6143,0x7500,0x41ef,{0x80,0x62,0xbd,0x89,0xa0,0xa9,0x2d,0x40}};
extern "C" const GUID __declspec(selectany) IID_IGRSystemVarBox =
    {0x28845384,0xed9f,0x4d2e,{0x98,0x6e,0xd5,0x2a,0xc3,0x7a,0x10,0x8f}};
extern "C" const GUID __declspec(selectany) IID_IGRFieldBox =
    {0xfe9aa791,0x4c55,0x4e06,{0xa5,0x92,0x08,0xd8,0xdf,0x88,0xa9,0x41}};
extern "C" const GUID __declspec(selectany) IID_IGRSummaryBox =
    {0x24de1ebe,0x5d9c,0x40ec,{0xa1,0x1a,0x21,0xaf,0x7d,0x0c,0x0d,0x36}};
extern "C" const GUID __declspec(selectany) IID_IGRRichTextBox =
    {0xc04a6148,0x7511,0x41ef,{0x80,0x62,0xbd,0x89,0xa0,0xa9,0x2d,0x40}};
extern "C" const GUID __declspec(selectany) IID_IGRMemoBox =
    {0x39a2c13a,0xd695,0x44bd,{0x83,0x39,0xa9,0x4f,0xa6,0x4c,0xb6,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IGRLine =
    {0xc4aca069,0xb92c,0x401a,{0xb1,0x75,0x35,0x4e,0x00,0xd5,0x38,0xd9}};
extern "C" const GUID __declspec(selectany) IID_IGRBarcode =
    {0x530a8e53,0xdfd5,0x4b95,{0xa4,0xf3,0x63,0x6e,0x00,0xd8,0x01,0xd8}};
extern "C" const GUID __declspec(selectany) IID_IGRChart =
    {0xe66ebbf5,0xed8d,0x44e7,{0x8a,0x6c,0xe6,0x57,0x9a,0xdc,0xc7,0xd4}};
extern "C" const GUID __declspec(selectany) IID_IGRRecordset =
    {0x93cd76f7,0x5439,0x437f,{0x8f,0xa5,0xa6,0x50,0xf2,0xca,0x77,0x3c}};
extern "C" const GUID __declspec(selectany) IID_IGRCrossTab =
    {0xc3112650,0x36d2,0x4928,{0x9d,0x6c,0xc0,0xa2,0x1c,0xcc,0x1e,0xba}};
extern "C" const GUID __declspec(selectany) IID_IGRFields =
    {0xf00ce27d,0xd1e3,0x4ef6,{0x98,0x77,0xbf,0x32,0x33,0xeb,0xf5,0x51}};
extern "C" const GUID __declspec(selectany) IID_IGRField =
    {0x04cea260,0xdd00,0x4954,{0xa8,0x1f,0xf0,0xa2,0x01,0x34,0x3c,0xb9}};
extern "C" const GUID __declspec(selectany) IID_IGRBinaryObject =
    {0x45f9b62d,0x9e33,0x484a,{0xbb,0x3c,0xbd,0x58,0x00,0x7b,0xda,0xa2}};
extern "C" const GUID __declspec(selectany) IID_IGRPicture =
    {0x17807bd9,0x44bc,0x4550,{0xb1,0x04,0xc2,0xa0,0x74,0x78,0x6b,0xff}};
extern "C" const GUID __declspec(selectany) IID_IGRPictureBox =
    {0xc04a6148,0x7500,0x41ef,{0x80,0x62,0xbd,0x89,0xa0,0xa9,0x2d,0x40}};
extern "C" const GUID __declspec(selectany) IID_IGRImageList =
    {0x01056f48,0xf4ab,0x4d9f,{0xbe,0x45,0x61,0x4f,0x33,0x13,0x71,0x7d}};
extern "C" const GUID __declspec(selectany) IID_IGRGraphics =
    {0x5eb6e1e6,0x00b9,0x4469,{0xab,0x22,0xee,0x43,0x75,0xd7,0x0e,0x39}};
extern "C" const GUID __declspec(selectany) IID_IGRUtility =
    {0xfe08c5a0,0x22b5,0x4664,{0x9d,0xaa,0x4b,0xb9,0x7c,0x2c,0x07,0x71}};
extern "C" const GUID __declspec(selectany) IID_IGRSubReport =
    {0xcdaa7f5b,0xe100,0x49b7,{0x93,0xf2,0x6b,0x66,0xfc,0x93,0xbe,0x55}};
extern "C" const GUID __declspec(selectany) IID_IGridppReport =
    {0x4fa44042,0x1421,0x46de,{0x9a,0xca,0xa4,0x47,0x53,0xff,0x06,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IGRPrintViewer =
    {0x0574abeb,0xb0da,0x465d,{0x9e,0xb7,0x28,0x6c,0x00,0xf3,0x62,0x8f}};
extern "C" const GUID __declspec(selectany) IID_IGRColumn =
    {0x72a79692,0x2f9e,0x4fec,{0x92,0xcc,0x6b,0x4a,0x73,0x75,0xa3,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnCell =
    {0xe2f421d7,0x73fa,0x462f,{0x9b,0xf5,0x7d,0xa3,0xe5,0x12,0xca,0x00}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnContentCell =
    {0xbb12aebd,0x5839,0x4a5e,{0x99,0x44,0x65,0xb6,0x79,0x83,0x81,0xc8}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnContentCells =
    {0xaf39550b,0x2a23,0x418a,{0xac,0xec,0x81,0x2c,0x70,0xea,0x5a,0x62}};
extern "C" const GUID __declspec(selectany) IID_IGRColumns =
    {0x42f6af5f,0x5fc4,0x4f44,{0x98,0x12,0x1f,0xbd,0x92,0x24,0xce,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnTitleCell =
    {0x83cc68ef,0xb558,0x45bb,{0x80,0x23,0x6c,0x4f,0x3b,0xda,0xda,0x7b}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnTitleCells =
    {0x97502458,0x7024,0x4194,{0x95,0x98,0x5b,0x62,0x00,0x1d,0x8c,0x1a}};
extern "C" const GUID __declspec(selectany) IID_IGRColumnTitle =
    {0x08513fc1,0xccce,0x4603,{0x8d,0xd1,0x35,0xba,0x1c,0xa8,0xd1,0xcd}};
extern "C" const GUID __declspec(selectany) IID_IGRDisplayViewer =
    {0xfba070ab,0x385f,0x4988,{0xb7,0xa1,0xce,0x6b,0x72,0x79,0x9b,0x48}};
extern "C" const GUID __declspec(selectany) IID_IGRExportOption =
    {0x60eb191f,0x5e63,0x41e7,{0x80,0x7f,0xc6,0x6e,0xc7,0xa8,0xef,0x26}};
extern "C" const GUID __declspec(selectany) IID_IGRE2CellOption =
    {0xebf161f0,0xf347,0x441a,{0x9c,0x0d,0x0a,0xca,0x78,0x24,0x79,0x3b}};
extern "C" const GUID __declspec(selectany) IID_IGRE2XLSOption =
    {0x60eb191f,0x5e63,0x41e7,{0x80,0x8f,0xc6,0x6e,0xc7,0xa8,0xef,0x26}};
extern "C" const GUID __declspec(selectany) IID_IGRE2TXTOption =
    {0x3bb506ab,0x425b,0x43b0,{0xbc,0x82,0x28,0xa6,0x1f,0xcc,0xf6,0x86}};
extern "C" const GUID __declspec(selectany) IID_IGRE2HTMOption =
    {0xf5d15e31,0xfa9a,0x42be,{0xbe,0x9c,0x86,0x88,0xe7,0xd9,0xd6,0xa0}};
extern "C" const GUID __declspec(selectany) IID_IGRE2RTFOption =
    {0xf4aa885f,0xaf9c,0x4032,{0xa6,0x5a,0xf3,0xdf,0xd4,0x58,0xc2,0x89}};
extern "C" const GUID __declspec(selectany) IID_IGRE2PDFOption =
    {0x273631dd,0x1cac,0x49e9,{0x92,0xee,0x58,0x4f,0x48,0x92,0x1a,0x1e}};
extern "C" const GUID __declspec(selectany) IID_IGRE2CSVOption =
    {0xf623a5e8,0x4ae4,0x494e,{0x97,0x5b,0x3c,0x54,0x04,0x42,0x86,0x25}};
extern "C" const GUID __declspec(selectany) IID_IGRE2IMGOption =
    {0x81727f33,0x8d8c,0x45dc,{0xb5,0x25,0x07,0xab,0xdc,0x5f,0xb6,0x52}};
extern "C" const GUID __declspec(selectany) IID_IGRFreeGrid =
    {0x5f9d573a,0x8350,0x4a94,{0xbb,0x9f,0x2d,0x0f,0xa7,0x87,0xec,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IGRFreeGridColumn =
    {0x8fe11b07,0x22dc,0x4691,{0x85,0xd7,0x04,0x69,0x36,0x4b,0x4b,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGRFreeGridRow =
    {0x5dabf9ad,0x2396,0x4c11,{0xbf,0xd7,0xa5,0xee,0x39,0x77,0x29,0x54}};

//
// Function implementation mapping
//

#pragma start_map_region("f:\w\vs2017\amaze\shipyy\x64\release\gregn.tli")
__declspec(implementation_key(1)) HRESULT _IGridppReportEvents::Initialize ( );
__declspec(implementation_key(2)) HRESULT _IGridppReportEvents::FetchRecord ( );
__declspec(implementation_key(3)) HRESULT _IGridppReportEvents::BeforePostRecord ( );
__declspec(implementation_key(4)) HRESULT _IGridppReportEvents::BeforeSort ( _bstr_t SortFields );
__declspec(implementation_key(5)) HRESULT _IGridppReportEvents::RuntimeError ( long ErrorID, _bstr_t ErrorMsg );
__declspec(implementation_key(6)) HRESULT _IGridppReportEvents::ProcessBegin ( );
__declspec(implementation_key(7)) HRESULT _IGridppReportEvents::ProcessEnd ( );
__declspec(implementation_key(8)) HRESULT _IGridppReportEvents::GroupBegin ( struct IGRGroup * pSender );
__declspec(implementation_key(9)) HRESULT _IGridppReportEvents::GroupEnd ( struct IGRGroup * pSender );
__declspec(implementation_key(10)) HRESULT _IGridppReportEvents::ProcessRecord ( );
__declspec(implementation_key(11)) HRESULT _IGridppReportEvents::GeneratePagesBegin ( );
__declspec(implementation_key(12)) HRESULT _IGridppReportEvents::GeneratePagesEnd ( );
__declspec(implementation_key(13)) HRESULT _IGridppReportEvents::PageProcessRecord ( );
__declspec(implementation_key(14)) HRESULT _IGridppReportEvents::PageStart ( );
__declspec(implementation_key(15)) HRESULT _IGridppReportEvents::PageEnd ( );
__declspec(implementation_key(16)) HRESULT _IGridppReportEvents::SectionFormat ( struct IGRSection * pSender );
__declspec(implementation_key(17)) HRESULT _IGridppReportEvents::FieldGetDisplayText ( struct IGRField * pSender );
__declspec(implementation_key(18)) HRESULT _IGridppReportEvents::TextBoxGetDisplayText ( struct IGRTextBox * pSender );
__declspec(implementation_key(19)) HRESULT _IGridppReportEvents::ControlCustomDraw ( struct IGRControl * pSender, struct IGRGraphics * pGraphics );
__declspec(implementation_key(20)) HRESULT _IGridppReportEvents::ChartRequestData ( struct IGRChart * pSender );
__declspec(implementation_key(21)) HRESULT _IGridppReportEvents::PrintBegin ( );
__declspec(implementation_key(22)) HRESULT _IGridppReportEvents::PrintEnd ( );
__declspec(implementation_key(23)) HRESULT _IGridppReportEvents::PrintPage ( long PageNo );
__declspec(implementation_key(24)) HRESULT _IGridppReportEvents::PrintAborted ( );
__declspec(implementation_key(25)) HRESULT _IGridppReportEvents::ExportBegin ( struct IGRExportOption * pOptionObject );
__declspec(implementation_key(26)) HRESULT _IGridppReportEvents::ExportEnd ( struct IGRExportOption * pOptionObject );
__declspec(implementation_key(27)) HRESULT _IGridppReportEvents::ShowPreviewWnd ( struct IGRPrintViewer * pPrintViewer );
__declspec(implementation_key(28)) HRESULT _IGridppReportEvents::ShowDesignerWnd ( IDispatch * pDesigner );
__declspec(implementation_key(29)) HRESULT _IGridppReportEvents::HyperlinkClick ( struct IGRControl * pSender, _bstr_t HyperlinkText, VARIANT_BOOL FromPreviewPage );
__declspec(implementation_key(30)) _bstr_t IGRObject::GetTag ( );
__declspec(implementation_key(31)) void IGRObject::PutTag ( _bstr_t pVal );
__declspec(implementation_key(32)) HRESULT IGRObject::Assign ( IDispatch * Object );
__declspec(implementation_key(33)) HRESULT IGRObject::_ObjSave ( );
__declspec(implementation_key(34)) HRESULT IGRObject::_ObjLoad ( );
__declspec(implementation_key(35)) IFontPtr IGRFont::GetOleFont ( );
__declspec(implementation_key(36)) void IGRFont::PutOleFont ( struct IFont * pVal );
__declspec(implementation_key(37)) IFontPtr IGRFont::GetUsingOleFont ( );
__declspec(implementation_key(38)) _bstr_t IGRFont::GetName ( );
__declspec(implementation_key(39)) void IGRFont::PutName ( _bstr_t pVal );
__declspec(implementation_key(40)) double IGRFont::GetPoint ( );
__declspec(implementation_key(41)) void IGRFont::PutPoint ( double pVal );
__declspec(implementation_key(42)) long IGRFont::GetCharset ( );
__declspec(implementation_key(43)) void IGRFont::PutCharset ( long pVal );
__declspec(implementation_key(44)) long IGRFont::GetWeight ( );
__declspec(implementation_key(45)) void IGRFont::PutWeight ( long pVal );
__declspec(implementation_key(46)) VARIANT_BOOL IGRFont::GetBold ( );
__declspec(implementation_key(47)) void IGRFont::PutBold ( VARIANT_BOOL pVal );
__declspec(implementation_key(48)) VARIANT_BOOL IGRFont::GetItalic ( );
__declspec(implementation_key(49)) void IGRFont::PutItalic ( VARIANT_BOOL pVal );
__declspec(implementation_key(50)) VARIANT_BOOL IGRFont::GetUnderline ( );
__declspec(implementation_key(51)) void IGRFont::PutUnderline ( VARIANT_BOOL pVal );
__declspec(implementation_key(52)) VARIANT_BOOL IGRFont::GetStrikethrough ( );
__declspec(implementation_key(53)) void IGRFont::PutStrikethrough ( VARIANT_BOOL pVal );
__declspec(implementation_key(54)) IGRFontPtr IGRFont::Clone ( );
__declspec(implementation_key(55)) GRPenStyle IGRPen::GetStyle ( );
__declspec(implementation_key(56)) void IGRPen::PutStyle ( GRPenStyle pVal );
__declspec(implementation_key(57)) double IGRPen::GetWidth ( );
__declspec(implementation_key(58)) void IGRPen::PutWidth ( double pVal );
__declspec(implementation_key(59)) OLE_COLOR IGRPen::GetColor ( );
__declspec(implementation_key(60)) void IGRPen::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(61)) IGRPenPtr IGRBorder::GetPen ( );
__declspec(implementation_key(62)) GRBorderStyles IGRBorder::GetStyles ( );
__declspec(implementation_key(63)) void IGRBorder::PutStyles ( GRBorderStyles pVal );
__declspec(implementation_key(64)) long IGRBorder::GetInnerIndent ( );
__declspec(implementation_key(65)) void IGRBorder::PutInnerIndent ( long pVal );
__declspec(implementation_key(66)) IGRPenPtr IGRBorder::GetInnerPen ( );
__declspec(implementation_key(67)) GRBorderStyles IGRBorder::GetInnerStyles ( );
__declspec(implementation_key(68)) void IGRBorder::PutInnerStyles ( GRBorderStyles pVal );
__declspec(implementation_key(69)) VARIANT_BOOL IGRBorder::GetShadow ( );
__declspec(implementation_key(70)) void IGRBorder::PutShadow ( VARIANT_BOOL pVal );
__declspec(implementation_key(71)) long IGRBorder::GetShadowWidth ( );
__declspec(implementation_key(72)) void IGRBorder::PutShadowWidth ( long pVal );
__declspec(implementation_key(73)) OLE_COLOR IGRBorder::GetShadowColor ( );
__declspec(implementation_key(74)) void IGRBorder::PutShadowColor ( OLE_COLOR pVal );
__declspec(implementation_key(75)) VARIANT_BOOL IGRTextFormat::GetWordWrap ( );
__declspec(implementation_key(76)) void IGRTextFormat::PutWordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(77)) VARIANT_BOOL IGRTextFormat::GetEndEllipsis ( );
__declspec(implementation_key(78)) void IGRTextFormat::PutEndEllipsis ( VARIANT_BOOL pVal );
__declspec(implementation_key(79)) GRTextAlign IGRTextFormat::GetTextAlign ( );
__declspec(implementation_key(80)) void IGRTextFormat::PutTextAlign ( GRTextAlign pVal );
__declspec(implementation_key(81)) GRTextOrientation IGRTextFormat::GetTextOrientation ( );
__declspec(implementation_key(82)) void IGRTextFormat::PutTextOrientation ( GRTextOrientation pVal );
__declspec(implementation_key(83)) double IGRTextFormat::GetTextAngle ( );
__declspec(implementation_key(84)) void IGRTextFormat::PutTextAngle ( double pVal );
__declspec(implementation_key(85)) double IGRTextFormat::GetCharacterSpacing ( );
__declspec(implementation_key(86)) void IGRTextFormat::PutCharacterSpacing ( double pVal );
__declspec(implementation_key(87)) double IGRTextFormat::GetLineSpacing ( );
__declspec(implementation_key(88)) void IGRTextFormat::PutLineSpacing ( double pVal );
__declspec(implementation_key(89)) double IGRTextFormat::GetFontWidthRatio ( );
__declspec(implementation_key(90)) void IGRTextFormat::PutFontWidthRatio ( double pVal );
__declspec(implementation_key(91)) long IGRTextFormat::GetFirstCharIndent ( );
__declspec(implementation_key(92)) void IGRTextFormat::PutFirstCharIndent ( long pVal );
__declspec(implementation_key(93)) double IGRTextFormat::GetParagraphSpacing ( );
__declspec(implementation_key(94)) void IGRTextFormat::PutParagraphSpacing ( double pVal );
__declspec(implementation_key(95)) VARIANT_BOOL IGRTextFormat::GetHtmlTags ( );
__declspec(implementation_key(96)) void IGRTextFormat::PutHtmlTags ( VARIANT_BOOL pVal );
__declspec(implementation_key(97)) IGRTextFormatPtr IGRTextFormat::Clone ( );
__declspec(implementation_key(98)) _bstr_t IGRChartAxis::GetLabel ( );
__declspec(implementation_key(99)) void IGRChartAxis::PutLabel ( _bstr_t pVal );
__declspec(implementation_key(100)) double IGRChartAxis::GetMax ( );
__declspec(implementation_key(101)) void IGRChartAxis::PutMax ( double pVal );
__declspec(implementation_key(102)) double IGRChartAxis::GetMin ( );
__declspec(implementation_key(103)) void IGRChartAxis::PutMin ( double pVal );
__declspec(implementation_key(104)) double IGRChartAxis::GetSpace ( );
__declspec(implementation_key(105)) void IGRChartAxis::PutSpace ( double pVal );
__declspec(implementation_key(106)) double IGRChartAxis::GetTextAngle ( );
__declspec(implementation_key(107)) void IGRChartAxis::PutTextAngle ( double pVal );
__declspec(implementation_key(108)) VARIANT_BOOL IGRChartAxis::GetTextVisible ( );
__declspec(implementation_key(109)) void IGRChartAxis::PutTextVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(110)) _bstr_t IGRChartAxis::GetTextFormat ( );
__declspec(implementation_key(111)) void IGRChartAxis::PutTextFormat ( _bstr_t pVal );
__declspec(implementation_key(112)) VARIANT_BOOL IGRChartAxis::GetLineVisible ( );
__declspec(implementation_key(113)) void IGRChartAxis::PutLineVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(114)) VARIANT_BOOL IGRChartAxis::GetCoordLineVisible ( );
__declspec(implementation_key(115)) void IGRChartAxis::PutCoordLineVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(116)) IGRPenPtr IGRChartAxis::GetLinePen ( );
__declspec(implementation_key(117)) IGRPenPtr IGRChartAxis::GetCoordLinePen ( );
__declspec(implementation_key(118)) long IGRChartAxis::GetMarginBeginWeight ( );
__declspec(implementation_key(119)) void IGRChartAxis::PutMarginBeginWeight ( long pVal );
__declspec(implementation_key(120)) long IGRChartAxis::GetMarginEndWeight ( );
__declspec(implementation_key(121)) void IGRChartAxis::PutMarginEndWeight ( long pVal );
__declspec(implementation_key(122)) long IGRChartAxis::GetScaleCount ( );
__declspec(implementation_key(123)) HRESULT IGRChartAxis::AddCustomScale ( double ScaleVal, _bstr_t Text );
__declspec(implementation_key(124)) HRESULT IGRChartAxis::EmptyCustomScale ( );
__declspec(implementation_key(125)) _bstr_t IGRChartAxis::GetScaleText ( long Index );
__declspec(implementation_key(126)) double IGRChartAxis::GetScaleValue ( long Index );
__declspec(implementation_key(127)) HRESULT IGRChartAxis::AddCustomCoordLine ( double ScaleVal, _bstr_t Text, double LineWidth, OLE_COLOR LineColor, GRPenStyle LineStyle );
__declspec(implementation_key(128)) HRESULT IGRChartAxis::EmptyCustomCoordLine ( );
__declspec(implementation_key(129)) GRLockType IGRChartAxis::GetLock ( );
__declspec(implementation_key(130)) void IGRChartAxis::PutLock ( GRLockType pVal );
__declspec(implementation_key(131)) GRChartType IGRChartSeries::GetChartType ( );
__declspec(implementation_key(132)) void IGRChartSeries::PutChartType ( GRChartType pVal );
__declspec(implementation_key(133)) VARIANT_BOOL IGRChartSeries::GetByY2Axis ( );
__declspec(implementation_key(134)) void IGRChartSeries::PutByY2Axis ( VARIANT_BOOL pVal );
__declspec(implementation_key(135)) _bstr_t IGRChartSeries::GetSeriesName ( );
__declspec(implementation_key(136)) void IGRChartSeries::PutSeriesName ( _bstr_t pVal );
__declspec(implementation_key(137)) _bstr_t IGRChartSeries::GetXValueField ( );
__declspec(implementation_key(138)) void IGRChartSeries::PutXValueField ( _bstr_t pVal );
__declspec(implementation_key(139)) _bstr_t IGRChartSeries::GetYValueField ( );
__declspec(implementation_key(140)) void IGRChartSeries::PutYValueField ( _bstr_t pVal );
__declspec(implementation_key(141)) _bstr_t IGRChartSeries::GetZValueField ( );
__declspec(implementation_key(142)) void IGRChartSeries::PutZValueField ( _bstr_t pVal );
__declspec(implementation_key(143)) _bstr_t IGRChartSeries::GetLabelText ( );
__declspec(implementation_key(144)) void IGRChartSeries::PutLabelText ( _bstr_t pVal );
__declspec(implementation_key(145)) double IGRChartSeries::GetLabelTextAngle ( );
__declspec(implementation_key(146)) void IGRChartSeries::PutLabelTextAngle ( double pVal );
__declspec(implementation_key(147)) VARIANT_BOOL IGRChartSeries::GetLabelAsGroup ( );
__declspec(implementation_key(148)) void IGRChartSeries::PutLabelAsGroup ( VARIANT_BOOL pVal );
__declspec(implementation_key(149)) VARIANT_BOOL IGRChartSeries::GetLabelInBar ( );
__declspec(implementation_key(150)) void IGRChartSeries::PutLabelInBar ( VARIANT_BOOL pVal );
__declspec(implementation_key(151)) _bstr_t IGRChartSeries::GetTooltipText ( );
__declspec(implementation_key(152)) void IGRChartSeries::PutTooltipText ( _bstr_t pVal );
__declspec(implementation_key(153)) _bstr_t IGRChartSeries::GetValueFormat ( );
__declspec(implementation_key(154)) void IGRChartSeries::PutValueFormat ( _bstr_t pVal );
__declspec(implementation_key(155)) IGRPenPtr IGRChartSeries::GetBorderPen ( );
__declspec(implementation_key(156)) OLE_COLOR IGRChartSeries::GetFillColor ( );
__declspec(implementation_key(157)) void IGRChartSeries::PutFillColor ( OLE_COLOR pVal );
__declspec(implementation_key(158)) VARIANT_BOOL IGRChartSeries::GetFillColorAuto ( );
__declspec(implementation_key(159)) void IGRChartSeries::PutFillColorAuto ( VARIANT_BOOL pVal );
__declspec(implementation_key(160)) GRPointMarkerStyle IGRChartSeries::GetMarkerStyle ( );
__declspec(implementation_key(161)) void IGRChartSeries::PutMarkerStyle ( GRPointMarkerStyle pVal );
__declspec(implementation_key(162)) long IGRChartSeries::GetMarkerSize ( );
__declspec(implementation_key(163)) void IGRChartSeries::PutMarkerSize ( long pVal );
__declspec(implementation_key(164)) OLE_COLOR IGRChartSeries::GetMarkerColor ( );
__declspec(implementation_key(165)) void IGRChartSeries::PutMarkerColor ( OLE_COLOR pVal );
__declspec(implementation_key(166)) VARIANT_BOOL IGRChartSeries::GetMarkerColorAuto ( );
__declspec(implementation_key(167)) void IGRChartSeries::PutMarkerColorAuto ( VARIANT_BOOL pVal );
__declspec(implementation_key(168)) IGRPenPtr IGRChartSeries::GetMarkerPen ( );
__declspec(implementation_key(169)) VARIANT_BOOL IGRChartSeries::GetMarkerLegendShow ( );
__declspec(implementation_key(170)) void IGRChartSeries::PutMarkerLegendShow ( VARIANT_BOOL pVal );
__declspec(implementation_key(171)) GRLockType IGRChartSeries::GetLock ( );
__declspec(implementation_key(172)) void IGRChartSeries::PutLock ( GRLockType pVal );
__declspec(implementation_key(173)) IGRChartSeriesPtr IGRChartSeriesCollection::GetItem ( const _variant_t & Index );
__declspec(implementation_key(174)) IUnknownPtr IGRChartSeriesCollection::Get_NewEnum ( );
__declspec(implementation_key(175)) long IGRChartSeriesCollection::GetCount ( );
__declspec(implementation_key(176)) IGRChartSeriesPtr IGRChartSeriesCollection::Add ( );
__declspec(implementation_key(177)) HRESULT IGRChartSeriesCollection::Remove ( const _variant_t & Index );
__declspec(implementation_key(178)) HRESULT IGRChartSeriesCollection::RemoveAll ( );
__declspec(implementation_key(179)) long IGRChartSeriesCollection::IndexByName ( _bstr_t Name );
__declspec(implementation_key(180)) IGRChartSeriesPtr IGRChartSeriesCollection::ItemAt ( long Index );
__declspec(implementation_key(181)) HRESULT IGRChartSeriesCollection::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(182)) GRParameterDataType IGRParameter::GetDataType ( );
__declspec(implementation_key(183)) void IGRParameter::PutDataType ( GRParameterDataType pVal );
__declspec(implementation_key(184)) _bstr_t IGRParameter::GetName ( );
__declspec(implementation_key(185)) void IGRParameter::PutName ( _bstr_t pVal );
__declspec(implementation_key(186)) _variant_t IGRParameter::GetValue ( );
__declspec(implementation_key(187)) void IGRParameter::PutValue ( const _variant_t & pVal );
__declspec(implementation_key(188)) _bstr_t IGRParameter::GetFormat ( );
__declspec(implementation_key(189)) void IGRParameter::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(190)) long IGRParameter::GetAsInteger ( );
__declspec(implementation_key(191)) void IGRParameter::PutAsInteger ( long pVal );
__declspec(implementation_key(192)) double IGRParameter::GetAsFloat ( );
__declspec(implementation_key(193)) void IGRParameter::PutAsFloat ( double pVal );
__declspec(implementation_key(194)) _bstr_t IGRParameter::GetAsString ( );
__declspec(implementation_key(195)) void IGRParameter::PutAsString ( _bstr_t pVal );
__declspec(implementation_key(196)) VARIANT_BOOL IGRParameter::GetAsBoolean ( );
__declspec(implementation_key(197)) void IGRParameter::PutAsBoolean ( VARIANT_BOOL pVal );
__declspec(implementation_key(198)) DATE IGRParameter::GetAsDateTime ( );
__declspec(implementation_key(199)) void IGRParameter::PutAsDateTime ( DATE pVal );
__declspec(implementation_key(200)) _bstr_t IGRParameter::GetDisplayText ( );
__declspec(implementation_key(201)) VARIANT_BOOL IGRParameter::GetIsNull ( );
__declspec(implementation_key(202)) HRESULT IGRParameter::Clear ( );
__declspec(implementation_key(203)) GRLockType IGRParameter::GetLock ( );
__declspec(implementation_key(204)) void IGRParameter::PutLock ( GRLockType pVal );
__declspec(implementation_key(205)) IGRParameterPtr IGRParameters::GetItem ( const _variant_t & Index );
__declspec(implementation_key(206)) IUnknownPtr IGRParameters::Get_NewEnum ( );
__declspec(implementation_key(207)) long IGRParameters::GetCount ( );
__declspec(implementation_key(208)) IGRParameterPtr IGRParameters::Add ( );
__declspec(implementation_key(209)) HRESULT IGRParameters::Remove ( const _variant_t & Index );
__declspec(implementation_key(210)) HRESULT IGRParameters::RemoveAll ( );
__declspec(implementation_key(211)) long IGRParameters::IndexByName ( _bstr_t Name );
__declspec(implementation_key(212)) IGRParameterPtr IGRParameters::ItemAt ( long Index );
__declspec(implementation_key(213)) HRESULT IGRParameters::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(214)) GRPrintRangeType IGRPrinter::GetPrintRangeType ( );
__declspec(implementation_key(215)) void IGRPrinter::PutPrintRangeType ( GRPrintRangeType pVal );
__declspec(implementation_key(216)) GRPrintPageType IGRPrinter::GetPrintPageType ( );
__declspec(implementation_key(217)) void IGRPrinter::PutPrintPageType ( GRPrintPageType pVal );
__declspec(implementation_key(218)) _bstr_t IGRPrinter::GetSelectionPrintPages ( );
__declspec(implementation_key(219)) void IGRPrinter::PutSelectionPrintPages ( _bstr_t pVal );
__declspec(implementation_key(220)) long IGRPrinter::GetPageCount ( );
__declspec(implementation_key(221)) void IGRPrinter::PutPageCount ( long pVal );
__declspec(implementation_key(222)) long IGRPrinter::GetCurPageNo ( );
__declspec(implementation_key(223)) void IGRPrinter::PutCurPageNo ( long pVal );
__declspec(implementation_key(224)) long IGRPrinter::GetCopies ( );
__declspec(implementation_key(225)) void IGRPrinter::PutCopies ( long pVal );
__declspec(implementation_key(226)) VARIANT_BOOL IGRPrinter::GetCollate ( );
__declspec(implementation_key(227)) void IGRPrinter::PutCollate ( VARIANT_BOOL pVal );
__declspec(implementation_key(228)) GRDuplexKind IGRPrinter::GetDuplex ( );
__declspec(implementation_key(229)) void IGRPrinter::PutDuplex ( GRDuplexKind pVal );
__declspec(implementation_key(230)) double IGRPrinter::GetLeftMargin ( );
__declspec(implementation_key(231)) void IGRPrinter::PutLeftMargin ( double pVal );
__declspec(implementation_key(232)) double IGRPrinter::GetRightMargin ( );
__declspec(implementation_key(233)) void IGRPrinter::PutRightMargin ( double pVal );
__declspec(implementation_key(234)) double IGRPrinter::GetTopMargin ( );
__declspec(implementation_key(235)) void IGRPrinter::PutTopMargin ( double pVal );
__declspec(implementation_key(236)) double IGRPrinter::GetBottomMargin ( );
__declspec(implementation_key(237)) void IGRPrinter::PutBottomMargin ( double pVal );
__declspec(implementation_key(238)) double IGRPrinter::GetPaperWidth ( );
__declspec(implementation_key(239)) void IGRPrinter::PutPaperWidth ( double pVal );
__declspec(implementation_key(240)) double IGRPrinter::GetPaperLength ( );
__declspec(implementation_key(241)) void IGRPrinter::PutPaperLength ( double pVal );
__declspec(implementation_key(242)) GRPaperOrientation IGRPrinter::GetPaperOrientation ( );
__declspec(implementation_key(243)) void IGRPrinter::PutPaperOrientation ( GRPaperOrientation pVal );
__declspec(implementation_key(244)) long IGRPrinter::GetPaperSize ( );
__declspec(implementation_key(245)) void IGRPrinter::PutPaperSize ( long pVal );
__declspec(implementation_key(246)) GRPaperKind IGRPrinter::GetPaperKind ( );
__declspec(implementation_key(247)) void IGRPrinter::PutPaperKind ( GRPaperKind pVal );
__declspec(implementation_key(248)) _bstr_t IGRPrinter::GetPaperName ( );
__declspec(implementation_key(249)) void IGRPrinter::PutPaperName ( _bstr_t pVal );
__declspec(implementation_key(250)) _bstr_t IGRPrinter::GetPrinterName ( );
__declspec(implementation_key(251)) void IGRPrinter::PutPrinterName ( _bstr_t pVal );
__declspec(implementation_key(252)) GRPaperSourceKind IGRPrinter::GetPaperSource ( );
__declspec(implementation_key(253)) void IGRPrinter::PutPaperSource ( GRPaperSourceKind pVal );
__declspec(implementation_key(254)) double IGRPrinter::GetPrintOffsetX ( );
__declspec(implementation_key(255)) void IGRPrinter::PutPrintOffsetX ( double pVal );
__declspec(implementation_key(256)) double IGRPrinter::GetPrintOffsetY ( );
__declspec(implementation_key(257)) void IGRPrinter::PutPrintOffsetY ( double pVal );
__declspec(implementation_key(258)) VARIANT_BOOL IGRPrinter::GetPrintOffsetSaveToLocal ( );
__declspec(implementation_key(259)) void IGRPrinter::PutPrintOffsetSaveToLocal ( VARIANT_BOOL pVal );
__declspec(implementation_key(260)) GRSheetPages IGRPrinter::GetSheetPages ( );
__declspec(implementation_key(261)) void IGRPrinter::PutSheetPages ( GRSheetPages pVal );
__declspec(implementation_key(262)) long IGRPrinter::GetSheetPaperSize ( );
__declspec(implementation_key(263)) void IGRPrinter::PutSheetPaperSize ( long pVal );
__declspec(implementation_key(264)) VARIANT_BOOL IGRPrinter::GetCanCollate ( );
__declspec(implementation_key(265)) VARIANT_BOOL IGRPrinter::GetCanDuplex ( );
__declspec(implementation_key(266)) VARIANT_BOOL IGRPrinter::GetOnline ( );
__declspec(implementation_key(267)) VARIANT_BOOL IGRPrinter::GetSupportCustomPaper ( );
__declspec(implementation_key(268)) double IGRPrinter::GetDesignLeftMargin ( );
__declspec(implementation_key(269)) void IGRPrinter::PutDesignLeftMargin ( double pVal );
__declspec(implementation_key(270)) double IGRPrinter::GetDesignRightMargin ( );
__declspec(implementation_key(271)) void IGRPrinter::PutDesignRightMargin ( double pVal );
__declspec(implementation_key(272)) double IGRPrinter::GetDesignTopMargin ( );
__declspec(implementation_key(273)) void IGRPrinter::PutDesignTopMargin ( double pVal );
__declspec(implementation_key(274)) double IGRPrinter::GetDesignBottomMargin ( );
__declspec(implementation_key(275)) void IGRPrinter::PutDesignBottomMargin ( double pVal );
__declspec(implementation_key(276)) double IGRPrinter::GetDesignPaperWidth ( );
__declspec(implementation_key(277)) void IGRPrinter::PutDesignPaperWidth ( double pVal );
__declspec(implementation_key(278)) double IGRPrinter::GetDesignPaperLength ( );
__declspec(implementation_key(279)) void IGRPrinter::PutDesignPaperLength ( double pVal );
__declspec(implementation_key(280)) GRPaperOrientation IGRPrinter::GetDesignPaperOrientation ( );
__declspec(implementation_key(281)) void IGRPrinter::PutDesignPaperOrientation ( GRPaperOrientation pVal );
__declspec(implementation_key(282)) GRPaperSourceKind IGRPrinter::GetDesignPaperSource ( );
__declspec(implementation_key(283)) void IGRPrinter::PutDesignPaperSource ( GRPaperSourceKind pVal );
__declspec(implementation_key(284)) GRCollateKind IGRPrinter::GetDesignPrintCollate ( );
__declspec(implementation_key(285)) void IGRPrinter::PutDesignPrintCollate ( GRCollateKind pVal );
__declspec(implementation_key(286)) GRDuplexKind IGRPrinter::GetDesignPrintDuplex ( );
__declspec(implementation_key(287)) void IGRPrinter::PutDesignPrintDuplex ( GRDuplexKind pVal );
__declspec(implementation_key(288)) _bstr_t IGRPrinter::GetDesignPaperName ( );
__declspec(implementation_key(289)) void IGRPrinter::PutDesignPaperName ( _bstr_t pVal );
__declspec(implementation_key(290)) long IGRPrinter::GetDesignPaperSize ( );
__declspec(implementation_key(291)) void IGRPrinter::PutDesignPaperSize ( long pVal );
__declspec(implementation_key(292)) GRPaperKind IGRPrinter::GetDesignPaperKind ( );
__declspec(implementation_key(293)) void IGRPrinter::PutDesignPaperKind ( GRPaperKind pVal );
__declspec(implementation_key(294)) _bstr_t IGRPrinter::GetDesignPrinterName ( );
__declspec(implementation_key(295)) void IGRPrinter::PutDesignPrinterName ( _bstr_t pVal );
__declspec(implementation_key(296)) VARIANT_BOOL IGRPrinter::PrintDialog ( );
__declspec(implementation_key(297)) VARIANT_BOOL IGRPrinter::PrinterSetupDialog ( );
__declspec(implementation_key(298)) VARIANT_BOOL IGRPrinter::PageSetupDialog ( );
__declspec(implementation_key(299)) HRESULT IGRPrinter::_OpenPrinter ( );
__declspec(implementation_key(300)) HRESULT IGRPrinter::_ClosePrinter ( );
__declspec(implementation_key(301)) long IGRDateTime::GetYear ( );
__declspec(implementation_key(302)) long IGRDateTime::GetMonth ( );
__declspec(implementation_key(303)) long IGRDateTime::GetDay ( );
__declspec(implementation_key(304)) long IGRDateTime::GetHour ( );
__declspec(implementation_key(305)) long IGRDateTime::GetMinute ( );
__declspec(implementation_key(306)) long IGRDateTime::GetSecond ( );
__declspec(implementation_key(307)) long IGRDateTime::GetDayOfWeek ( );
__declspec(implementation_key(308)) long IGRDateTime::GetDayOfYear ( );
__declspec(implementation_key(309)) double IGRDateTime::GetAsFloat ( );
__declspec(implementation_key(310)) void IGRDateTime::PutAsFloat ( double pVal );
__declspec(implementation_key(311)) HRESULT IGRDateTime::ValueFromDate ( long Year, long Month, long Day );
__declspec(implementation_key(312)) HRESULT IGRDateTime::ValueFromDateTime ( long Year, long Month, long Day, long Hour, long Minute, long Second );
__declspec(implementation_key(313)) _bstr_t IGRDateTime::Format ( _bstr_t Format );
__declspec(implementation_key(314)) double IGRSharePrintSetupObject::GetLeftMargin ( );
__declspec(implementation_key(315)) void IGRSharePrintSetupObject::PutLeftMargin ( double pVal );
__declspec(implementation_key(316)) double IGRSharePrintSetupObject::GetRightMargin ( );
__declspec(implementation_key(317)) void IGRSharePrintSetupObject::PutRightMargin ( double pVal );
__declspec(implementation_key(318)) double IGRSharePrintSetupObject::GetTopMargin ( );
__declspec(implementation_key(319)) void IGRSharePrintSetupObject::PutTopMargin ( double pVal );
__declspec(implementation_key(320)) double IGRSharePrintSetupObject::GetBottomMargin ( );
__declspec(implementation_key(321)) void IGRSharePrintSetupObject::PutBottomMargin ( double pVal );
__declspec(implementation_key(322)) double IGRSharePrintSetupObject::GetPaperWidth ( );
__declspec(implementation_key(323)) void IGRSharePrintSetupObject::PutPaperWidth ( double pVal );
__declspec(implementation_key(324)) double IGRSharePrintSetupObject::GetPaperLength ( );
__declspec(implementation_key(325)) void IGRSharePrintSetupObject::PutPaperLength ( double pVal );
__declspec(implementation_key(326)) GRPaperOrientation IGRSharePrintSetupObject::GetPaperOrientation ( );
__declspec(implementation_key(327)) void IGRSharePrintSetupObject::PutPaperOrientation ( GRPaperOrientation pVal );
__declspec(implementation_key(328)) long IGRSharePrintSetupObject::GetPaperSize ( );
__declspec(implementation_key(329)) void IGRSharePrintSetupObject::PutPaperSize ( long pVal );
__declspec(implementation_key(330)) _bstr_t IGRSharePrintSetupObject::GetPaperName ( );
__declspec(implementation_key(331)) void IGRSharePrintSetupObject::PutPaperName ( _bstr_t pVal );
__declspec(implementation_key(332)) _bstr_t IGRSharePrintSetupObject::GetPrinterName ( );
__declspec(implementation_key(333)) void IGRSharePrintSetupObject::PutPrinterName ( _bstr_t pVal );
__declspec(implementation_key(334)) GRPaperSourceKind IGRSharePrintSetupObject::GetPaperSource ( );
__declspec(implementation_key(335)) void IGRSharePrintSetupObject::PutPaperSource ( GRPaperSourceKind pVal );
__declspec(implementation_key(336)) GRUnit IGRSharePrintSetupObject::GetUnit ( );
__declspec(implementation_key(337)) void IGRSharePrintSetupObject::PutUnit ( GRUnit pVal );
__declspec(implementation_key(338)) GRPaperKind IGRSharePrintSetupObject::GetPaperKind ( );
__declspec(implementation_key(339)) void IGRSharePrintSetupObject::PutPaperKind ( GRPaperKind pVal );
__declspec(implementation_key(340)) VARIANT_BOOL IGRSharePrintSetupObject::PrintDialog ( );
__declspec(implementation_key(341)) VARIANT_BOOL IGRSharePrintSetupObject::PrinterSetupDialog ( );
__declspec(implementation_key(342)) VARIANT_BOOL IGRSharePrintSetupObject::PageSetupDialog ( );
__declspec(implementation_key(343)) HRESULT _IGRDisplayViewerEvents::Click ( );
__declspec(implementation_key(344)) HRESULT _IGRDisplayViewerEvents::DblClick ( );
__declspec(implementation_key(345)) HRESULT _IGRDisplayViewerEvents::KeyDown ( GRShiftStates Shift, long Key );
__declspec(implementation_key(346)) HRESULT _IGRDisplayViewerEvents::KeyPress ( char Key );
__declspec(implementation_key(347)) HRESULT _IGRDisplayViewerEvents::KeyUp ( GRShiftStates Shift, long Key );
__declspec(implementation_key(348)) HRESULT _IGRDisplayViewerEvents::MouseDown ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(349)) HRESULT _IGRDisplayViewerEvents::MouseUp ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(350)) HRESULT _IGRDisplayViewerEvents::MouseMove ( GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(351)) HRESULT _IGRDisplayViewerEvents::ControlClick ( struct IGRControl * pSender );
__declspec(implementation_key(352)) HRESULT _IGRDisplayViewerEvents::ControlDblClick ( struct IGRControl * pSender );
__declspec(implementation_key(353)) HRESULT _IGRDisplayViewerEvents::SectionClick ( struct IGRSection * pSender );
__declspec(implementation_key(354)) HRESULT _IGRDisplayViewerEvents::SectionDblClick ( struct IGRSection * pSender );
__declspec(implementation_key(355)) HRESULT _IGRDisplayViewerEvents::ContentCellClick ( struct IGRColumnContentCell * pSender );
__declspec(implementation_key(356)) HRESULT _IGRDisplayViewerEvents::ContentCellDblClick ( struct IGRColumnContentCell * pSender );
__declspec(implementation_key(357)) HRESULT _IGRDisplayViewerEvents::TitleCellClick ( struct IGRColumnTitleCell * pSender );
__declspec(implementation_key(358)) HRESULT _IGRDisplayViewerEvents::TitleCellDblClick ( struct IGRColumnTitleCell * pSender );
__declspec(implementation_key(359)) HRESULT _IGRDisplayViewerEvents::ChartClickSeries ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex );
__declspec(implementation_key(360)) HRESULT _IGRDisplayViewerEvents::ChartDblClickSeries ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex );
__declspec(implementation_key(361)) HRESULT _IGRDisplayViewerEvents::ChartClickLegend ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex );
__declspec(implementation_key(362)) HRESULT _IGRDisplayViewerEvents::ChartDblClickLegend ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex );
__declspec(implementation_key(363)) HRESULT _IGRDisplayViewerEvents::ColumnLayoutChange ( );
__declspec(implementation_key(364)) HRESULT _IGRDisplayViewerEvents::SelectionCellChange ( long OldRow, long OldCol );
__declspec(implementation_key(365)) HRESULT _IGRDisplayViewerEvents::StatusChange ( );
__declspec(implementation_key(366)) HRESULT _IGRDisplayViewerEvents::CloseButtonClick ( );
__declspec(implementation_key(367)) HRESULT _IGRDisplayViewerEvents::CustomButtonClick ( long BtnID );
__declspec(implementation_key(368)) HRESULT _IGRDisplayViewerEvents::ToolbarCommandClick ( GRToolControlType2 ControlType );
__declspec(implementation_key(369)) HRESULT _IGRDisplayViewerEvents::BatchFetchRecord ( );
__declspec(implementation_key(370)) HRESULT _IGRPrintViewerEvents::Click ( );
__declspec(implementation_key(371)) HRESULT _IGRPrintViewerEvents::DblClick ( );
__declspec(implementation_key(372)) HRESULT _IGRPrintViewerEvents::KeyDown ( GRShiftStates Shift, long Key );
__declspec(implementation_key(373)) HRESULT _IGRPrintViewerEvents::KeyPress ( char Key );
__declspec(implementation_key(374)) HRESULT _IGRPrintViewerEvents::KeyUp ( GRShiftStates Shift, long Key );
__declspec(implementation_key(375)) HRESULT _IGRPrintViewerEvents::MouseDown ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(376)) HRESULT _IGRPrintViewerEvents::MouseUp ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(377)) HRESULT _IGRPrintViewerEvents::MouseMove ( GRShiftStates Shift, long xPos, long yPos );
__declspec(implementation_key(378)) HRESULT _IGRPrintViewerEvents::CurPageChange ( long NewCurPageNo );
__declspec(implementation_key(379)) HRESULT _IGRPrintViewerEvents::StatusChange ( );
__declspec(implementation_key(380)) HRESULT _IGRPrintViewerEvents::RulerClick ( VARIANT_BOOL IsHorzRuler );
__declspec(implementation_key(381)) HRESULT _IGRPrintViewerEvents::RulerDblClick ( VARIANT_BOOL IsHorzRuler );
__declspec(implementation_key(382)) HRESULT _IGRPrintViewerEvents::PageClick ( );
__declspec(implementation_key(383)) HRESULT _IGRPrintViewerEvents::PageDblClick ( );
__declspec(implementation_key(384)) HRESULT _IGRPrintViewerEvents::CloseButtonClick ( );
__declspec(implementation_key(385)) HRESULT _IGRPrintViewerEvents::CustomButtonClick ( long BtnID );
__declspec(implementation_key(386)) HRESULT _IGRPrintViewerEvents::ToolbarCommandClick ( GRToolControlType ControlType );
__declspec(implementation_key(387)) IGRDetailGridPtr IGRGroup::GetParent ( );
__declspec(implementation_key(388)) IGRGroupHeaderPtr IGRGroup::GetHeader ( );
__declspec(implementation_key(389)) IGRGroupFooterPtr IGRGroup::GetFooter ( );
__declspec(implementation_key(390)) _bstr_t IGRGroup::GetName ( );
__declspec(implementation_key(391)) void IGRGroup::PutName ( _bstr_t pVal );
__declspec(implementation_key(392)) _bstr_t IGRGroup::GetByFields ( );
__declspec(implementation_key(393)) void IGRGroup::PutByFields ( _bstr_t pVal );
__declspec(implementation_key(394)) VARIANT_BOOL IGRGroup::GetPageGroup ( );
__declspec(implementation_key(395)) void IGRGroup::PutPageGroup ( VARIANT_BOOL pVal );
__declspec(implementation_key(396)) long IGRGroup::GetLimitsPerPage ( );
__declspec(implementation_key(397)) void IGRGroup::PutLimitsPerPage ( long pVal );
__declspec(implementation_key(398)) _bstr_t IGRGroup::GetSortSummaryBox ( );
__declspec(implementation_key(399)) void IGRGroup::PutSortSummaryBox ( _bstr_t pVal );
__declspec(implementation_key(400)) VARIANT_BOOL IGRGroup::GetSortAsc ( );
__declspec(implementation_key(401)) void IGRGroup::PutSortAsc ( VARIANT_BOOL pVal );
__declspec(implementation_key(402)) _bstr_t IGRGroup::GetGroupBeginScript ( );
__declspec(implementation_key(403)) void IGRGroup::PutGroupBeginScript ( _bstr_t pVal );
__declspec(implementation_key(404)) _bstr_t IGRGroup::GetGroupEndScript ( );
__declspec(implementation_key(405)) void IGRGroup::PutGroupEndScript ( _bstr_t pVal );
__declspec(implementation_key(406)) IGRRecordsetPtr IGRGroup::Get_Dataset ( );
__declspec(implementation_key(407)) HRESULT IGRGroup::_BeginOneGroup ( );
__declspec(implementation_key(408)) HRESULT IGRGroup::_EndOneGroup ( );
__declspec(implementation_key(409)) HRESULT IGRGroup::_ProcessGroupRecord ( );
__declspec(implementation_key(410)) GRLockType IGRGroup::GetLock ( );
__declspec(implementation_key(411)) void IGRGroup::PutLock ( GRLockType pVal );
__declspec(implementation_key(412)) IGRGroupPtr IGRGroups::GetItem ( const _variant_t & Index );
__declspec(implementation_key(413)) IUnknownPtr IGRGroups::Get_NewEnum ( );
__declspec(implementation_key(414)) long IGRGroups::GetCount ( );
__declspec(implementation_key(415)) IGRGroupPtr IGRGroups::Add ( );
__declspec(implementation_key(416)) HRESULT IGRGroups::Remove ( const _variant_t & Index );
__declspec(implementation_key(417)) HRESULT IGRGroups::RemoveAll ( );
__declspec(implementation_key(418)) long IGRGroups::IndexByName ( _bstr_t Name );
__declspec(implementation_key(419)) IGRGroupPtr IGRGroups::ItemAt ( long Index );
__declspec(implementation_key(420)) HRESULT IGRGroups::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(421)) IGRColumnContentPtr IGRDetailGrid::GetColumnContent ( );
__declspec(implementation_key(422)) IGRColumnTitlePtr IGRDetailGrid::GetColumnTitle ( );
__declspec(implementation_key(423)) IGRColumnsPtr IGRDetailGrid::GetColumns ( );
__declspec(implementation_key(424)) IGRGroupsPtr IGRDetailGrid::GetGroups ( );
__declspec(implementation_key(425)) IGRRecordsetPtr IGRDetailGrid::GetRecordset ( );
__declspec(implementation_key(426)) IGRCrossTabPtr IGRDetailGrid::GetCrossTab ( );
__declspec(implementation_key(427)) IGRRecordsetPtr IGRDetailGrid::GetMasterRecordset ( );
__declspec(implementation_key(428)) VARIANT_BOOL IGRDetailGrid::GetIsCrossTab ( );
__declspec(implementation_key(429)) void IGRDetailGrid::PutIsCrossTab ( VARIANT_BOOL pVal );
__declspec(implementation_key(430)) VARIANT_BOOL IGRDetailGrid::GetHasMasterRecordset ( );
__declspec(implementation_key(431)) void IGRDetailGrid::PutHasMasterRecordset ( VARIANT_BOOL pVal );
__declspec(implementation_key(432)) _bstr_t IGRDetailGrid::GetRelationFields ( );
__declspec(implementation_key(433)) void IGRDetailGrid::PutRelationFields ( _bstr_t pVal );
__declspec(implementation_key(434)) IGRFontPtr IGRDetailGrid::GetFont ( );
__declspec(implementation_key(435)) IGRBorderPtr IGRDetailGrid::GetBorder ( );
__declspec(implementation_key(436)) IGRPenPtr IGRDetailGrid::GetColLinePen ( );
__declspec(implementation_key(437)) IGRPenPtr IGRDetailGrid::GetRowLinePen ( );
__declspec(implementation_key(438)) OLE_COLOR IGRDetailGrid::GetBackColor ( );
__declspec(implementation_key(439)) void IGRDetailGrid::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(440)) VARIANT_BOOL IGRDetailGrid::GetShowColLine ( );
__declspec(implementation_key(441)) void IGRDetailGrid::PutShowColLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(442)) VARIANT_BOOL IGRDetailGrid::GetShowRowLine ( );
__declspec(implementation_key(443)) void IGRDetailGrid::PutShowRowLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(444)) GRNewPageStyle IGRDetailGrid::GetNewPage ( );
__declspec(implementation_key(445)) void IGRDetailGrid::PutNewPage ( GRNewPageStyle pVal );
__declspec(implementation_key(446)) long IGRDetailGrid::GetFixCols ( );
__declspec(implementation_key(447)) void IGRDetailGrid::PutFixCols ( long pVal );
__declspec(implementation_key(448)) VARIANT_BOOL IGRDetailGrid::GetCenterView ( );
__declspec(implementation_key(449)) void IGRDetailGrid::PutCenterView ( VARIANT_BOOL pVal );
__declspec(implementation_key(450)) VARIANT_BOOL IGRDetailGrid::GetGrowToBottom ( );
__declspec(implementation_key(451)) void IGRDetailGrid::PutGrowToBottom ( VARIANT_BOOL pVal );
__declspec(implementation_key(452)) GRPrintType IGRDetailGrid::GetBorderPrintType ( );
__declspec(implementation_key(453)) void IGRDetailGrid::PutBorderPrintType ( GRPrintType pVal );
__declspec(implementation_key(454)) GRPrintType IGRDetailGrid::GetGridLinePrintType ( );
__declspec(implementation_key(455)) void IGRDetailGrid::PutGridLinePrintType ( GRPrintType pVal );
__declspec(implementation_key(456)) GRPageColumnDirection IGRDetailGrid::GetPageColumnDirection ( );
__declspec(implementation_key(457)) void IGRDetailGrid::PutPageColumnDirection ( GRPageColumnDirection pVal );
__declspec(implementation_key(458)) long IGRDetailGrid::GetPageColumnCount ( );
__declspec(implementation_key(459)) void IGRDetailGrid::PutPageColumnCount ( long pVal );
__declspec(implementation_key(460)) double IGRDetailGrid::GetPageColumnSpacing ( );
__declspec(implementation_key(461)) void IGRDetailGrid::PutPageColumnSpacing ( double pVal );
__declspec(implementation_key(462)) VARIANT_BOOL IGRDetailGrid::GetPageColumnGroupNA ( );
__declspec(implementation_key(463)) void IGRDetailGrid::PutPageColumnGroupNA ( VARIANT_BOOL pVal );
__declspec(implementation_key(464)) GRColumnPrintAdaptMethod IGRDetailGrid::GetPrintAdaptMethod ( );
__declspec(implementation_key(465)) void IGRDetailGrid::PutPrintAdaptMethod ( GRColumnPrintAdaptMethod pVal );
__declspec(implementation_key(466)) VARIANT_BOOL IGRDetailGrid::GetPrintAdaptRepeat ( );
__declspec(implementation_key(467)) void IGRDetailGrid::PutPrintAdaptRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(468)) VARIANT_BOOL IGRDetailGrid::GetPrintAdaptFitText ( );
__declspec(implementation_key(469)) void IGRDetailGrid::PutPrintAdaptFitText ( VARIANT_BOOL pVal );
__declspec(implementation_key(470)) long IGRDetailGrid::GetPrintAdaptRFCStep ( );
__declspec(implementation_key(471)) void IGRDetailGrid::PutPrintAdaptRFCStep ( long pVal );
__declspec(implementation_key(472)) VARIANT_BOOL IGRDetailGrid::GetPrintAdaptTryToOnePage ( );
__declspec(implementation_key(473)) void IGRDetailGrid::PutPrintAdaptTryToOnePage ( VARIANT_BOOL pVal );
__declspec(implementation_key(474)) VARIANT_BOOL IGRDetailGrid::GetAppendBlankRow ( );
__declspec(implementation_key(475)) void IGRDetailGrid::PutAppendBlankRow ( VARIANT_BOOL pVal );
__declspec(implementation_key(476)) VARIANT_BOOL IGRDetailGrid::GetAppendBlankRowAtLast ( );
__declspec(implementation_key(477)) void IGRDetailGrid::PutAppendBlankRowAtLast ( VARIANT_BOOL pVal );
__declspec(implementation_key(478)) VARIANT_BOOL IGRDetailGrid::GetAppendBlankCol ( );
__declspec(implementation_key(479)) void IGRDetailGrid::PutAppendBlankCol ( VARIANT_BOOL pVal );
__declspec(implementation_key(480)) double IGRDetailGrid::GetAppendBlankColWidth ( );
__declspec(implementation_key(481)) void IGRDetailGrid::PutAppendBlankColWidth ( double pVal );
__declspec(implementation_key(482)) IGRColumnPtr IGRDetailGrid::AddColumn ( _bstr_t Name, _bstr_t Title, _bstr_t DataField, double Width );
__declspec(implementation_key(483)) HRESULT IGRDetailGrid::ClearColumns ( );
__declspec(implementation_key(484)) IGRColumnTitleCellPtr IGRDetailGrid::FindGroupTitleCell ( _bstr_t Name );
__declspec(implementation_key(485)) IGRColumnTitleCellPtr IGRDetailGrid::AddGroupTitle ( _bstr_t Name, _bstr_t Title );
__declspec(implementation_key(486)) HRESULT IGRDetailGrid::ClearGroupTitles ( );
__declspec(implementation_key(487)) HRESULT IGRDetailGrid::ColumnMoveToEnd ( const _variant_t & ColumnIndex );
__declspec(implementation_key(488)) HRESULT IGRDetailGrid::ColumnMoveTo ( _bstr_t ColumnName, _bstr_t NewGroupTitleCellName, long NewShowOrderNo );
__declspec(implementation_key(489)) HRESULT IGRDetailGrid::StartNewGroup ( const _variant_t & GroupIndex );
__declspec(implementation_key(490)) IGRColumnPtr IGRDetailGrid::ColumnByShowOrder ( long OrderNo );
__declspec(implementation_key(491)) GRBorderStyles IGRDetailGrid::GetBorderStyles ( );
__declspec(implementation_key(492)) void IGRDetailGrid::PutBorderStyles ( GRBorderStyles pVal );
__declspec(implementation_key(493)) double IGRDetailGrid::GetBorderWidth ( );
__declspec(implementation_key(494)) void IGRDetailGrid::PutBorderWidth ( double pVal );
__declspec(implementation_key(495)) OLE_COLOR IGRDetailGrid::GetBorderColor ( );
__declspec(implementation_key(496)) void IGRDetailGrid::PutBorderColor ( OLE_COLOR pVal );
__declspec(implementation_key(497)) OLE_COLOR IGRDetailGrid::GetColLineColor ( );
__declspec(implementation_key(498)) void IGRDetailGrid::PutColLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(499)) double IGRDetailGrid::GetColLineWidth ( );
__declspec(implementation_key(500)) void IGRDetailGrid::PutColLineWidth ( double pVal );
__declspec(implementation_key(501)) OLE_COLOR IGRDetailGrid::GetRowLineColor ( );
__declspec(implementation_key(502)) void IGRDetailGrid::PutRowLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(503)) double IGRDetailGrid::GetRowLineWidth ( );
__declspec(implementation_key(504)) void IGRDetailGrid::PutRowLineWidth ( double pVal );
__declspec(implementation_key(505)) GRLockType IGRDetailGrid::GetLock ( );
__declspec(implementation_key(506)) void IGRDetailGrid::PutLock ( GRLockType pVal );
__declspec(implementation_key(507)) GRSectionType IGRSection::GetSectionType ( );
__declspec(implementation_key(508)) IUnknownPtr IGRSection::GetParent ( );
__declspec(implementation_key(509)) IGRFontPtr IGRSection::GetFont ( );
__declspec(implementation_key(510)) IGRControlsPtr IGRSection::GetControls ( );
__declspec(implementation_key(511)) _bstr_t IGRSection::GetName ( );
__declspec(implementation_key(512)) void IGRSection::PutName ( _bstr_t pVal );
__declspec(implementation_key(513)) double IGRSection::GetHeight ( );
__declspec(implementation_key(514)) void IGRSection::PutHeight ( double pVal );
__declspec(implementation_key(515)) VARIANT_BOOL IGRSection::GetCanGrow ( );
__declspec(implementation_key(516)) void IGRSection::PutCanGrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(517)) VARIANT_BOOL IGRSection::GetCanShrink ( );
__declspec(implementation_key(518)) void IGRSection::PutCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(519)) OLE_COLOR IGRSection::GetBackColor ( );
__declspec(implementation_key(520)) void IGRSection::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(521)) VARIANT_BOOL IGRSection::GetVisible ( );
__declspec(implementation_key(522)) void IGRSection::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(523)) VARIANT_BOOL IGRSection::GetKeepTogether ( );
__declspec(implementation_key(524)) void IGRSection::PutKeepTogether ( VARIANT_BOOL pVal );
__declspec(implementation_key(525)) _bstr_t IGRSection::GetBookmarkText ( );
__declspec(implementation_key(526)) void IGRSection::PutBookmarkText ( _bstr_t pVal );
__declspec(implementation_key(527)) _bstr_t IGRSection::GetFormatScript ( );
__declspec(implementation_key(528)) void IGRSection::PutFormatScript ( _bstr_t pVal );
__declspec(implementation_key(529)) HRESULT IGRSection::_HasSectionFormatScript ( );
__declspec(implementation_key(530)) IGRDetailGridPtr IGRColumnSection::GetDetailGrid ( );
__declspec(implementation_key(531)) GRDisplayCursor IGRColumnSection::GetCursor ( );
__declspec(implementation_key(532)) void IGRColumnSection::PutCursor ( GRDisplayCursor pVal );
__declspec(implementation_key(533)) HRESULT IGRColumnSection::SetCellsBackColor ( OLE_COLOR BackColor );
__declspec(implementation_key(534)) HRESULT IGRColumnSection::SetCellsForeColor ( OLE_COLOR ForeColor );
__declspec(implementation_key(535)) HRESULT IGRColumnSection::LoadCursorFile ( _bstr_t PathFile );
__declspec(implementation_key(536)) GRLockType IGRPageHeader::GetLock ( );
__declspec(implementation_key(537)) void IGRPageHeader::PutLock ( GRLockType pVal );
__declspec(implementation_key(538)) GRLockType IGRPageFooter::GetLock ( );
__declspec(implementation_key(539)) void IGRPageFooter::PutLock ( GRLockType pVal );
__declspec(implementation_key(540)) GRNewPageStyle IGRReportSection::GetNewPage ( );
__declspec(implementation_key(541)) void IGRReportSection::PutNewPage ( GRNewPageStyle pVal );
__declspec(implementation_key(542)) VARIANT_BOOL IGRReportSection::GetRepeatOnPage ( );
__declspec(implementation_key(543)) void IGRReportSection::PutRepeatOnPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(544)) VARIANT_BOOL IGRReportSection::GetCenterWithDetailGrid ( );
__declspec(implementation_key(545)) void IGRReportSection::PutCenterWithDetailGrid ( VARIANT_BOOL pVal );
__declspec(implementation_key(546)) GRLockType IGRReportHeader::GetLock ( );
__declspec(implementation_key(547)) void IGRReportHeader::PutLock ( GRLockType pVal );
__declspec(implementation_key(548)) IGRReportHeaderPtr IGRReportHeaders::GetItem ( const _variant_t & Index );
__declspec(implementation_key(549)) IUnknownPtr IGRReportHeaders::Get_NewEnum ( );
__declspec(implementation_key(550)) long IGRReportHeaders::GetCount ( );
__declspec(implementation_key(551)) IGRReportHeaderPtr IGRReportHeaders::Add ( );
__declspec(implementation_key(552)) HRESULT IGRReportHeaders::Remove ( const _variant_t & Index );
__declspec(implementation_key(553)) HRESULT IGRReportHeaders::RemoveAll ( );
__declspec(implementation_key(554)) long IGRReportHeaders::IndexByName ( _bstr_t Name );
__declspec(implementation_key(555)) IGRReportHeaderPtr IGRReportHeaders::ItemAt ( long Index );
__declspec(implementation_key(556)) HRESULT IGRReportHeaders::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(557)) VARIANT_BOOL IGRReportFooter::GetPrintAtBottom ( );
__declspec(implementation_key(558)) void IGRReportFooter::PutPrintAtBottom ( VARIANT_BOOL pVal );
__declspec(implementation_key(559)) VARIANT_BOOL IGRReportFooter::GetAppendBlankRowExclude ( );
__declspec(implementation_key(560)) void IGRReportFooter::PutAppendBlankRowExclude ( VARIANT_BOOL pVal );
__declspec(implementation_key(561)) GRLockType IGRReportFooter::GetLock ( );
__declspec(implementation_key(562)) void IGRReportFooter::PutLock ( GRLockType pVal );
__declspec(implementation_key(563)) IGRReportFooterPtr IGRReportFooters::GetItem ( const _variant_t & Index );
__declspec(implementation_key(564)) IUnknownPtr IGRReportFooters::Get_NewEnum ( );
__declspec(implementation_key(565)) long IGRReportFooters::GetCount ( );
__declspec(implementation_key(566)) IGRReportFooterPtr IGRReportFooters::Add ( );
__declspec(implementation_key(567)) HRESULT IGRReportFooters::Remove ( const _variant_t & Index );
__declspec(implementation_key(568)) HRESULT IGRReportFooters::RemoveAll ( );
__declspec(implementation_key(569)) long IGRReportFooters::IndexByName ( _bstr_t Name );
__declspec(implementation_key(570)) IGRReportFooterPtr IGRReportFooters::ItemAt ( long Index );
__declspec(implementation_key(571)) HRESULT IGRReportFooters::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(572)) IGRGroupPtr IGRGroupSection::GetGroup ( );
__declspec(implementation_key(573)) GRNewPageStyle IGRGroupSection::GetNewPage ( );
__declspec(implementation_key(574)) void IGRGroupSection::PutNewPage ( GRNewPageStyle pVal );
__declspec(implementation_key(575)) VARIANT_BOOL IGRGroupSection::GetPrintGridBorder ( );
__declspec(implementation_key(576)) void IGRGroupSection::PutPrintGridBorder ( VARIANT_BOOL pVal );
__declspec(implementation_key(577)) VARIANT_BOOL IGRGroupSection::GetHNewPageFixed ( );
__declspec(implementation_key(578)) void IGRGroupSection::PutHNewPageFixed ( VARIANT_BOOL pVal );
__declspec(implementation_key(579)) GRNewPageColumnStyle IGRGroupSection::GetNewPageColumn ( );
__declspec(implementation_key(580)) void IGRGroupSection::PutNewPageColumn ( GRNewPageColumnStyle pVal );
__declspec(implementation_key(581)) VARIANT_BOOL IGRGroupSection::GetRepeatOnPage ( );
__declspec(implementation_key(582)) void IGRGroupSection::PutRepeatOnPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(583)) VARIANT_BOOL IGRGroupHeader::GetOccupyColumn ( );
__declspec(implementation_key(584)) void IGRGroupHeader::PutOccupyColumn ( VARIANT_BOOL pVal );
__declspec(implementation_key(585)) _bstr_t IGRGroupHeader::GetOccupiedColumns ( );
__declspec(implementation_key(586)) void IGRGroupHeader::PutOccupiedColumns ( _bstr_t pVal );
__declspec(implementation_key(587)) GROCGroupHeaderVAlign IGRGroupHeader::GetVAlign ( );
__declspec(implementation_key(588)) void IGRGroupHeader::PutVAlign ( GROCGroupHeaderVAlign pVal );
__declspec(implementation_key(589)) VARIANT_BOOL IGRGroupHeader::GetSameAsColumn ( );
__declspec(implementation_key(590)) void IGRGroupHeader::PutSameAsColumn ( VARIANT_BOOL pVal );
__declspec(implementation_key(591)) VARIANT_BOOL IGRGroupHeader::GetIncludeFooter ( );
__declspec(implementation_key(592)) void IGRGroupHeader::PutIncludeFooter ( VARIANT_BOOL pVal );
__declspec(implementation_key(593)) GRGrpKpTogetherStyle IGRGroupHeader::GetGroupKeepTogether ( );
__declspec(implementation_key(594)) void IGRGroupHeader::PutGroupKeepTogether ( GRGrpKpTogetherStyle pVal );
__declspec(implementation_key(595)) GRLockType IGRGroupHeader::GetLock ( );
__declspec(implementation_key(596)) void IGRGroupHeader::PutLock ( GRLockType pVal );
__declspec(implementation_key(597)) VARIANT_BOOL IGRGroupFooter::GetPrintAtBottom ( );
__declspec(implementation_key(598)) void IGRGroupFooter::PutPrintAtBottom ( VARIANT_BOOL pVal );
__declspec(implementation_key(599)) VARIANT_BOOL IGRGroupFooter::GetAppendBlankRowExclude ( );
__declspec(implementation_key(600)) void IGRGroupFooter::PutAppendBlankRowExclude ( VARIANT_BOOL pVal );
__declspec(implementation_key(601)) GRLockType IGRGroupFooter::GetLock ( );
__declspec(implementation_key(602)) void IGRGroupFooter::PutLock ( GRLockType pVal );
__declspec(implementation_key(603)) IGRColumnContentCellsPtr IGRColumnContent::GetContentCells ( );
__declspec(implementation_key(604)) OLE_COLOR IGRColumnContent::GetAlternatingBackColor ( );
__declspec(implementation_key(605)) void IGRColumnContent::PutAlternatingBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(606)) long IGRColumnContent::GetRowsPerPage ( );
__declspec(implementation_key(607)) void IGRColumnContent::PutRowsPerPage ( long pVal );
__declspec(implementation_key(608)) VARIANT_BOOL IGRColumnContent::GetRowsIncludeGroup ( );
__declspec(implementation_key(609)) void IGRColumnContent::PutRowsIncludeGroup ( VARIANT_BOOL pVal );
__declspec(implementation_key(610)) VARIANT_BOOL IGRColumnContent::GetAdjustRowHeight ( );
__declspec(implementation_key(611)) void IGRColumnContent::PutAdjustRowHeight ( VARIANT_BOOL pVal );
__declspec(implementation_key(612)) VARIANT_BOOL IGRColumnContent::GetGrowToNextRow ( );
__declspec(implementation_key(613)) void IGRColumnContent::PutGrowToNextRow ( VARIANT_BOOL pVal );
__declspec(implementation_key(614)) GRLockType IGRColumnContent::GetLock ( );
__declspec(implementation_key(615)) void IGRColumnContent::PutLock ( GRLockType pVal );
__declspec(implementation_key(616)) IGRControlPtr IGRControls::GetItem ( const _variant_t & Index );
__declspec(implementation_key(617)) IUnknownPtr IGRControls::Get_NewEnum ( );
__declspec(implementation_key(618)) long IGRControls::GetCount ( );
__declspec(implementation_key(619)) IGRControlPtr IGRControls::Add ( GRControlType ControlType );
__declspec(implementation_key(620)) HRESULT IGRControls::Remove ( const _variant_t & Index );
__declspec(implementation_key(621)) HRESULT IGRControls::RemoveAll ( );
__declspec(implementation_key(622)) long IGRControls::IndexByName ( _bstr_t Name );
__declspec(implementation_key(623)) IGRControlPtr IGRControls::ItemAt ( long Index );
__declspec(implementation_key(624)) HRESULT IGRControls::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(625)) IGRBorderPtr IGRCellBase::GetBorder ( );
__declspec(implementation_key(626)) IGRTextFormatPtr IGRCellBase::GetTextFormat ( );
__declspec(implementation_key(627)) IGRFontPtr IGRCellBase::GetFont ( );
__declspec(implementation_key(628)) IGRControlsPtr IGRCellBase::GetControls ( );
__declspec(implementation_key(629)) VARIANT_BOOL IGRCellBase::GetFreeCell ( );
__declspec(implementation_key(630)) void IGRCellBase::PutFreeCell ( VARIANT_BOOL pVal );
__declspec(implementation_key(631)) VARIANT_BOOL IGRCellBase::GetBorderCustom ( );
__declspec(implementation_key(632)) void IGRCellBase::PutBorderCustom ( VARIANT_BOOL pVal );
__declspec(implementation_key(633)) OLE_COLOR IGRCellBase::GetBackColor ( );
__declspec(implementation_key(634)) void IGRCellBase::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(635)) OLE_COLOR IGRCellBase::GetForeColor ( );
__declspec(implementation_key(636)) void IGRCellBase::PutForeColor ( OLE_COLOR pVal );
__declspec(implementation_key(637)) VARIANT_BOOL IGRCellBase::GetCanGrow ( );
__declspec(implementation_key(638)) void IGRCellBase::PutCanGrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(639)) VARIANT_BOOL IGRCellBase::GetCanShrink ( );
__declspec(implementation_key(640)) void IGRCellBase::PutCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(641)) GRPrintType IGRCellBase::GetPrintType ( );
__declspec(implementation_key(642)) void IGRCellBase::PutPrintType ( GRPrintType pVal );
__declspec(implementation_key(643)) GRDisplayCursor IGRCellBase::GetCursor ( );
__declspec(implementation_key(644)) void IGRCellBase::PutCursor ( GRDisplayCursor pVal );
__declspec(implementation_key(645)) VARIANT_BOOL IGRCellBase::GetShrinkFontToFit ( );
__declspec(implementation_key(646)) void IGRCellBase::PutShrinkFontToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(647)) long IGRCellBase::GetPaddingLeft ( );
__declspec(implementation_key(648)) void IGRCellBase::PutPaddingLeft ( long pVal );
__declspec(implementation_key(649)) long IGRCellBase::GetPaddingRight ( );
__declspec(implementation_key(650)) void IGRCellBase::PutPaddingRight ( long pVal );
__declspec(implementation_key(651)) long IGRCellBase::GetPaddingTop ( );
__declspec(implementation_key(652)) void IGRCellBase::PutPaddingTop ( long pVal );
__declspec(implementation_key(653)) long IGRCellBase::GetPaddingBottom ( );
__declspec(implementation_key(654)) void IGRCellBase::PutPaddingBottom ( long pVal );
__declspec(implementation_key(655)) VARIANT_BOOL IGRCellBase::GetShowMoneyLabel ( );
__declspec(implementation_key(656)) void IGRCellBase::PutShowMoneyLabel ( VARIANT_BOOL pVal );
__declspec(implementation_key(657)) VARIANT_BOOL IGRCellBase::GetShowMoneyLine ( );
__declspec(implementation_key(658)) void IGRCellBase::PutShowMoneyLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(659)) HRESULT IGRCellBase::LoadCursorFile ( _bstr_t PathFile );
__declspec(implementation_key(660)) OLE_HANDLE IGRCellBase::Get_CursorHandle ( );
__declspec(implementation_key(661)) _bstr_t IGRCellBase::GetGetDisplayTextScript ( );
__declspec(implementation_key(662)) void IGRCellBase::PutGetDisplayTextScript ( _bstr_t pVal );
__declspec(implementation_key(663)) long IGRFreeGridCell::GetColSpan ( );
__declspec(implementation_key(664)) void IGRFreeGridCell::PutColSpan ( long pVal );
__declspec(implementation_key(665)) long IGRFreeGridCell::GetRowSpan ( );
__declspec(implementation_key(666)) void IGRFreeGridCell::PutRowSpan ( long pVal );
__declspec(implementation_key(667)) _bstr_t IGRFreeGridCell::GetText ( );
__declspec(implementation_key(668)) void IGRFreeGridCell::PutText ( _bstr_t pVal );
__declspec(implementation_key(669)) _bstr_t IGRFreeGridCell::GetDataName ( );
__declspec(implementation_key(670)) void IGRFreeGridCell::PutDataName ( _bstr_t pVal );
__declspec(implementation_key(671)) GRLockType IGRFreeGridCell::GetLock ( );
__declspec(implementation_key(672)) void IGRFreeGridCell::PutLock ( GRLockType pVal );
__declspec(implementation_key(673)) GRControlType IGRControl::GetControlType ( );
__declspec(implementation_key(674)) IGRFontPtr IGRControl::GetFont ( );
__declspec(implementation_key(675)) IUnknownPtr IGRControl::GetParent ( );
__declspec(implementation_key(676)) _bstr_t IGRControl::GetName ( );
__declspec(implementation_key(677)) void IGRControl::PutName ( _bstr_t pVal );
__declspec(implementation_key(678)) OLE_COLOR IGRControl::GetBackColor ( );
__declspec(implementation_key(679)) void IGRControl::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(680)) GRBackStyle IGRControl::GetBackStyle ( );
__declspec(implementation_key(681)) void IGRControl::PutBackStyle ( GRBackStyle pVal );
__declspec(implementation_key(682)) OLE_COLOR IGRControl::GetForeColor ( );
__declspec(implementation_key(683)) void IGRControl::PutForeColor ( OLE_COLOR pVal );
__declspec(implementation_key(684)) IGRBorderPtr IGRControl::GetBorder ( );
__declspec(implementation_key(685)) double IGRControl::GetLeft ( );
__declspec(implementation_key(686)) void IGRControl::PutLeft ( double pVal );
__declspec(implementation_key(687)) double IGRControl::GetTop ( );
__declspec(implementation_key(688)) void IGRControl::PutTop ( double pVal );
__declspec(implementation_key(689)) double IGRControl::GetWidth ( );
__declspec(implementation_key(690)) void IGRControl::PutWidth ( double pVal );
__declspec(implementation_key(691)) double IGRControl::GetHeight ( );
__declspec(implementation_key(692)) void IGRControl::PutHeight ( double pVal );
__declspec(implementation_key(693)) long IGRControl::GetPaddingLeft ( );
__declspec(implementation_key(694)) void IGRControl::PutPaddingLeft ( long pVal );
__declspec(implementation_key(695)) long IGRControl::GetPaddingRight ( );
__declspec(implementation_key(696)) void IGRControl::PutPaddingRight ( long pVal );
__declspec(implementation_key(697)) long IGRControl::GetPaddingTop ( );
__declspec(implementation_key(698)) void IGRControl::PutPaddingTop ( long pVal );
__declspec(implementation_key(699)) long IGRControl::GetPaddingBottom ( );
__declspec(implementation_key(700)) void IGRControl::PutPaddingBottom ( long pVal );
__declspec(implementation_key(701)) GRAnchorStyles IGRControl::GetAnchor ( );
__declspec(implementation_key(702)) void IGRControl::PutAnchor ( GRAnchorStyles pVal );
__declspec(implementation_key(703)) GRDockStyle IGRControl::GetDock ( );
__declspec(implementation_key(704)) void IGRControl::PutDock ( GRDockStyle pVal );
__declspec(implementation_key(705)) GRCenterStyle IGRControl::GetCenter ( );
__declspec(implementation_key(706)) void IGRControl::PutCenter ( GRCenterStyle pVal );
__declspec(implementation_key(707)) _bstr_t IGRControl::GetAlignColumn ( );
__declspec(implementation_key(708)) void IGRControl::PutAlignColumn ( _bstr_t pVal );
__declspec(implementation_key(709)) _bstr_t IGRControl::GetAlignColumnEx ( );
__declspec(implementation_key(710)) void IGRControl::PutAlignColumnEx ( _bstr_t pVal );
__declspec(implementation_key(711)) GRAlignColumnStyle IGRControl::GetAlignColumnSide ( );
__declspec(implementation_key(712)) void IGRControl::PutAlignColumnSide ( GRAlignColumnStyle pVal );
__declspec(implementation_key(713)) VARIANT_BOOL IGRControl::GetLocked ( );
__declspec(implementation_key(714)) void IGRControl::PutLocked ( VARIANT_BOOL pVal );
__declspec(implementation_key(715)) GRShiftMode IGRControl::GetShiftMode ( );
__declspec(implementation_key(716)) void IGRControl::PutShiftMode ( GRShiftMode pVal );
__declspec(implementation_key(717)) GRPrintType IGRControl::GetPrintType ( );
__declspec(implementation_key(718)) void IGRControl::PutPrintType ( GRPrintType pVal );
__declspec(implementation_key(719)) VARIANT_BOOL IGRControl::GetVisible ( );
__declspec(implementation_key(720)) void IGRControl::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(721)) GRDisplayCursor IGRControl::GetCursor ( );
__declspec(implementation_key(722)) void IGRControl::PutCursor ( GRDisplayCursor pVal );
__declspec(implementation_key(723)) VARIANT_BOOL IGRControl::GetCustomDraw ( );
__declspec(implementation_key(724)) void IGRControl::PutCustomDraw ( VARIANT_BOOL pVal );
__declspec(implementation_key(725)) _bstr_t IGRControl::GetHyperlinkText ( );
__declspec(implementation_key(726)) void IGRControl::PutHyperlinkText ( _bstr_t pVal );
__declspec(implementation_key(727)) _bstr_t IGRControl::GetCustomDrawScript ( );
__declspec(implementation_key(728)) void IGRControl::PutCustomDrawScript ( _bstr_t pVal );
__declspec(implementation_key(729)) IGRTextBoxPtr IGRControl::GetAsTextBox ( );
__declspec(implementation_key(730)) IGRChartPtr IGRControl::GetAsChart ( );
__declspec(implementation_key(731)) IGRStaticBoxPtr IGRControl::GetAsStaticBox ( );
__declspec(implementation_key(732)) IGRShapeBoxPtr IGRControl::GetAsShapeBox ( );
__declspec(implementation_key(733)) IGRSystemVarBoxPtr IGRControl::GetAsSystemVarBox ( );
__declspec(implementation_key(734)) IGRFieldBoxPtr IGRControl::GetAsFieldBox ( );
__declspec(implementation_key(735)) IGRSummaryBoxPtr IGRControl::GetAsSummaryBox ( );
__declspec(implementation_key(736)) IGRPictureBoxPtr IGRControl::GetAsPictureBox ( );
__declspec(implementation_key(737)) IGRRichTextBoxPtr IGRControl::GetAsRichTextBox ( );
__declspec(implementation_key(738)) IGRMemoBoxPtr IGRControl::GetAsMemoBox ( );
__declspec(implementation_key(739)) IGRSubReportPtr IGRControl::GetAsSubReport ( );
__declspec(implementation_key(740)) IGRLinePtr IGRControl::GetAsLine ( );
__declspec(implementation_key(741)) IGRBarcodePtr IGRControl::GetAsBarcode ( );
__declspec(implementation_key(742)) IGRFreeGridPtr IGRControl::GetAsFreeGrid ( );
__declspec(implementation_key(743)) HRESULT IGRControl::SetBounds ( double Left, double Top, double Right, double Bottom );
__declspec(implementation_key(744)) HRESULT IGRControl::BringToFront ( );
__declspec(implementation_key(745)) HRESULT IGRControl::SendToBack ( );
__declspec(implementation_key(746)) HRESULT IGRControl::LoadCursorFile ( _bstr_t PathFile );
__declspec(implementation_key(747)) HRESULT IGRControl::DrawDefault ( );
__declspec(implementation_key(748)) OLE_COLOR IGRControl::Get_RealViewBackColor ( );
__declspec(implementation_key(749)) OLE_HANDLE IGRControl::Get_CursorHandle ( );
__declspec(implementation_key(750)) OLE_HANDLE IGRControl::Get_ControlHandle ( );
__declspec(implementation_key(751)) HRESULT IGRControl::_HasCustomDrawScript ( );
__declspec(implementation_key(752)) HRESULT IGRControl::_Draw ( OLE_HANDLE pDrawDevice, OLE_HANDLE pDrawRect );
__declspec(implementation_key(753)) double IGRControl::GetBorderWidth ( );
__declspec(implementation_key(754)) void IGRControl::PutBorderWidth ( double pVal );
__declspec(implementation_key(755)) OLE_COLOR IGRControl::GetBorderColor ( );
__declspec(implementation_key(756)) void IGRControl::PutBorderColor ( OLE_COLOR pVal );
__declspec(implementation_key(757)) GRBorderStyles IGRControl::GetBorderStyles ( );
__declspec(implementation_key(758)) void IGRControl::PutBorderStyles ( GRBorderStyles pVal );
__declspec(implementation_key(759)) IGRTextFormatPtr IGRTextBox::GetTextFormat ( );
__declspec(implementation_key(760)) VARIANT_BOOL IGRTextBox::GetCanGrow ( );
__declspec(implementation_key(761)) void IGRTextBox::PutCanGrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(762)) VARIANT_BOOL IGRTextBox::GetCanShrink ( );
__declspec(implementation_key(763)) void IGRTextBox::PutCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(764)) VARIANT_BOOL IGRTextBox::GetShrinkFontToFit ( );
__declspec(implementation_key(765)) void IGRTextBox::PutShrinkFontToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(766)) VARIANT_BOOL IGRTextBox::GetSpanToNewPage ( );
__declspec(implementation_key(767)) void IGRTextBox::PutSpanToNewPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(768)) VARIANT_BOOL IGRTextBox::GetShowMoneyLabel ( );
__declspec(implementation_key(769)) void IGRTextBox::PutShowMoneyLabel ( VARIANT_BOOL pVal );
__declspec(implementation_key(770)) VARIANT_BOOL IGRTextBox::GetShowMoneyLine ( );
__declspec(implementation_key(771)) void IGRTextBox::PutShowMoneyLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(772)) _bstr_t IGRTextBox::GetDisplayText ( );
__declspec(implementation_key(773)) void IGRTextBox::PutDisplayText ( _bstr_t pVal );
__declspec(implementation_key(774)) _bstr_t IGRTextBox::GetGetDisplayTextScript ( );
__declspec(implementation_key(775)) void IGRTextBox::PutGetDisplayTextScript ( _bstr_t pVal );
__declspec(implementation_key(776)) VARIANT_BOOL IGRTextBox::GetWordWrap ( );
__declspec(implementation_key(777)) void IGRTextBox::PutWordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(778)) VARIANT_BOOL IGRTextBox::GetEndEllipsis ( );
__declspec(implementation_key(779)) void IGRTextBox::PutEndEllipsis ( VARIANT_BOOL pVal );
__declspec(implementation_key(780)) GRTextAlign IGRTextBox::GetTextAlign ( );
__declspec(implementation_key(781)) void IGRTextBox::PutTextAlign ( GRTextAlign pVal );
__declspec(implementation_key(782)) _bstr_t IGRTextBox::Get_ExportXlsFormat ( );
__declspec(implementation_key(783)) HRESULT IGRTextBox::_FetchExportData ( double * pValue, BSTR * pFormatText, GRFieldType * pDataType );
__declspec(implementation_key(784)) HRESULT IGRTextBox::_HasGetDisplayTextScript ( );
__declspec(implementation_key(785)) _bstr_t IGRStaticBox::GetText ( );
__declspec(implementation_key(786)) void IGRStaticBox::PutText ( _bstr_t pVal );
__declspec(implementation_key(787)) _bstr_t IGRStaticBox::GetParameter ( );
__declspec(implementation_key(788)) void IGRStaticBox::PutParameter ( _bstr_t pVal );
__declspec(implementation_key(789)) GRLockType IGRStaticBox::GetLock ( );
__declspec(implementation_key(790)) void IGRStaticBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(791)) GRShapeType IGRShapeBox::GetShapeType ( );
__declspec(implementation_key(792)) void IGRShapeBox::PutShapeType ( GRShapeType pVal );
__declspec(implementation_key(793)) IGRPenPtr IGRShapeBox::GetLinePen ( );
__declspec(implementation_key(794)) OLE_COLOR IGRShapeBox::GetFillColor ( );
__declspec(implementation_key(795)) void IGRShapeBox::PutFillColor ( OLE_COLOR pVal );
__declspec(implementation_key(796)) GRBackStyle IGRShapeBox::GetFillStyle ( );
__declspec(implementation_key(797)) void IGRShapeBox::PutFillStyle ( GRBackStyle pVal );
__declspec(implementation_key(798)) GRLineType IGRShapeBox::GetLineType ( );
__declspec(implementation_key(799)) void IGRShapeBox::PutLineType ( GRLineType pVal );
__declspec(implementation_key(800)) long IGRShapeBox::GetCornerDx ( );
__declspec(implementation_key(801)) void IGRShapeBox::PutCornerDx ( long pVal );
__declspec(implementation_key(802)) long IGRShapeBox::GetCornerDy ( );
__declspec(implementation_key(803)) void IGRShapeBox::PutCornerDy ( long pVal );
__declspec(implementation_key(804)) GRLockType IGRShapeBox::GetLock ( );
__declspec(implementation_key(805)) void IGRShapeBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(806)) GRSystemVarType IGRSystemVarBox::GetSystemVar ( );
__declspec(implementation_key(807)) void IGRSystemVarBox::PutSystemVar ( GRSystemVarType pVal );
__declspec(implementation_key(808)) long IGRSystemVarBox::GetGroupIndex ( );
__declspec(implementation_key(809)) void IGRSystemVarBox::PutGroupIndex ( long pVal );
__declspec(implementation_key(810)) _bstr_t IGRSystemVarBox::GetFormat ( );
__declspec(implementation_key(811)) void IGRSystemVarBox::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(812)) GRLockType IGRSystemVarBox::GetLock ( );
__declspec(implementation_key(813)) void IGRSystemVarBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(814)) _bstr_t IGRFieldBox::GetDataField ( );
__declspec(implementation_key(815)) void IGRFieldBox::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(816)) GRLockType IGRFieldBox::GetLock ( );
__declspec(implementation_key(817)) void IGRFieldBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(818)) GRSummaryFun IGRSummaryBox::GetSummaryFun ( );
__declspec(implementation_key(819)) void IGRSummaryBox::PutSummaryFun ( GRSummaryFun pVal );
__declspec(implementation_key(820)) _bstr_t IGRSummaryBox::GetDataField ( );
__declspec(implementation_key(821)) void IGRSummaryBox::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(822)) _bstr_t IGRSummaryBox::GetFormat ( );
__declspec(implementation_key(823)) void IGRSummaryBox::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(824)) double IGRSummaryBox::GetValue ( );
__declspec(implementation_key(825)) void IGRSummaryBox::PutValue ( double pVal );
__declspec(implementation_key(826)) long IGRSummaryBox::GetRankNo ( );
__declspec(implementation_key(827)) void IGRSummaryBox::PutRankNo ( long pVal );
__declspec(implementation_key(828)) _bstr_t IGRSummaryBox::GetDisplayField ( );
__declspec(implementation_key(829)) void IGRSummaryBox::PutDisplayField ( _bstr_t pVal );
__declspec(implementation_key(830)) _bstr_t IGRSummaryBox::GetConditionScript ( );
__declspec(implementation_key(831)) void IGRSummaryBox::PutConditionScript ( _bstr_t pVal );
__declspec(implementation_key(832)) GRLockType IGRSummaryBox::GetLock ( );
__declspec(implementation_key(833)) void IGRSummaryBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(834)) VARIANT_BOOL IGRRichTextBox::GetCanGrow ( );
__declspec(implementation_key(835)) void IGRRichTextBox::PutCanGrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(836)) VARIANT_BOOL IGRRichTextBox::GetCanShrink ( );
__declspec(implementation_key(837)) void IGRRichTextBox::PutCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(838)) _bstr_t IGRRichTextBox::GetDataField ( );
__declspec(implementation_key(839)) void IGRRichTextBox::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(840)) _bstr_t IGRRichTextBox::GetRTF ( );
__declspec(implementation_key(841)) void IGRRichTextBox::PutRTF ( _bstr_t pVal );
__declspec(implementation_key(842)) HRESULT IGRRichTextBox::LoadFromFile ( _bstr_t PathFile );
__declspec(implementation_key(843)) HRESULT IGRRichTextBox::LoadFromMemory ( unsigned char * pBuffer, long BytesCount );
__declspec(implementation_key(844)) HRESULT IGRRichTextBox::_Prepare ( );
__declspec(implementation_key(845)) HRESULT IGRRichTextBox::_FetchExportText ( BSTR * pExportText );
__declspec(implementation_key(846)) GRLockType IGRRichTextBox::GetLock ( );
__declspec(implementation_key(847)) void IGRRichTextBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(848)) _bstr_t IGRMemoBox::GetText ( );
__declspec(implementation_key(849)) void IGRMemoBox::PutText ( _bstr_t pVal );
__declspec(implementation_key(850)) _bstr_t IGRMemoBox::GetFlowTo ( );
__declspec(implementation_key(851)) void IGRMemoBox::PutFlowTo ( _bstr_t pVal );
__declspec(implementation_key(852)) double IGRMemoBox::GetAsFloat ( );
__declspec(implementation_key(853)) GRTextOrientation IGRMemoBox::GetTextOrientation ( );
__declspec(implementation_key(854)) void IGRMemoBox::PutTextOrientation ( GRTextOrientation pVal );
__declspec(implementation_key(855)) double IGRMemoBox::GetTextAngle ( );
__declspec(implementation_key(856)) void IGRMemoBox::PutTextAngle ( double pVal );
__declspec(implementation_key(857)) double IGRMemoBox::GetCharacterSpacing ( );
__declspec(implementation_key(858)) void IGRMemoBox::PutCharacterSpacing ( double pVal );
__declspec(implementation_key(859)) double IGRMemoBox::GetLineSpacing ( );
__declspec(implementation_key(860)) void IGRMemoBox::PutLineSpacing ( double pVal );
__declspec(implementation_key(861)) VARIANT_BOOL IGRMemoBox::GetHtmlTags ( );
__declspec(implementation_key(862)) void IGRMemoBox::PutHtmlTags ( VARIANT_BOOL pVal );
__declspec(implementation_key(863)) GRLockType IGRMemoBox::GetLock ( );
__declspec(implementation_key(864)) void IGRMemoBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(865)) IGRPenPtr IGRLine::GetLinePen ( );
__declspec(implementation_key(866)) double IGRLine::GetX1 ( );
__declspec(implementation_key(867)) void IGRLine::PutX1 ( double pVal );
__declspec(implementation_key(868)) double IGRLine::GetY1 ( );
__declspec(implementation_key(869)) void IGRLine::PutY1 ( double pVal );
__declspec(implementation_key(870)) double IGRLine::GetX2 ( );
__declspec(implementation_key(871)) void IGRLine::PutX2 ( double pVal );
__declspec(implementation_key(872)) double IGRLine::GetY2 ( );
__declspec(implementation_key(873)) void IGRLine::PutY2 ( double pVal );
__declspec(implementation_key(874)) GRLockType IGRLine::GetLock ( );
__declspec(implementation_key(875)) void IGRLine::PutLock ( GRLockType pVal );
__declspec(implementation_key(876)) GRBarcodeType IGRBarcode::GetBarcodeType ( );
__declspec(implementation_key(877)) void IGRBarcode::PutBarcodeType ( GRBarcodeType pVal );
__declspec(implementation_key(878)) GRStringAlignment IGRBarcode::GetAlignment ( );
__declspec(implementation_key(879)) void IGRBarcode::PutAlignment ( GRStringAlignment pVal );
__declspec(implementation_key(880)) double IGRBarcode::GetBarRatio ( );
__declspec(implementation_key(881)) void IGRBarcode::PutBarRatio ( double pVal );
__declspec(implementation_key(882)) double IGRBarcode::GetBarWidth ( );
__declspec(implementation_key(883)) void IGRBarcode::PutBarWidth ( double pVal );
__declspec(implementation_key(884)) GRBarcodeCaptionPosition IGRBarcode::GetCaptionPosition ( );
__declspec(implementation_key(885)) void IGRBarcode::PutCaptionPosition ( GRBarcodeCaptionPosition pVal );
__declspec(implementation_key(886)) GRStringAlignment IGRBarcode::GetCaptionAlignment ( );
__declspec(implementation_key(887)) void IGRBarcode::PutCaptionAlignment ( GRStringAlignment pVal );
__declspec(implementation_key(888)) VARIANT_BOOL IGRBarcode::GetCheckSum ( );
__declspec(implementation_key(889)) void IGRBarcode::PutCheckSum ( VARIANT_BOOL pVal );
__declspec(implementation_key(890)) GRBarcodeDirection IGRBarcode::GetDirection ( );
__declspec(implementation_key(891)) void IGRBarcode::PutDirection ( GRBarcodeDirection pVal );
__declspec(implementation_key(892)) _bstr_t IGRBarcode::GetText ( );
__declspec(implementation_key(893)) void IGRBarcode::PutText ( _bstr_t pVal );
__declspec(implementation_key(894)) _bstr_t IGRBarcode::GetDisplayText ( );
__declspec(implementation_key(895)) long IGRBarcode::GetPDF417Rows ( );
__declspec(implementation_key(896)) void IGRBarcode::PutPDF417Rows ( long pVal );
__declspec(implementation_key(897)) long IGRBarcode::GetPDF417Columns ( );
__declspec(implementation_key(898)) void IGRBarcode::PutPDF417Columns ( long pVal );
__declspec(implementation_key(899)) long IGRBarcode::GetPDF417ErrorLevel ( );
__declspec(implementation_key(900)) void IGRBarcode::PutPDF417ErrorLevel ( long pVal );
__declspec(implementation_key(901)) VARIANT_BOOL IGRBarcode::GetPDF417Simple ( );
__declspec(implementation_key(902)) void IGRBarcode::PutPDF417Simple ( VARIANT_BOOL pVal );
__declspec(implementation_key(903)) long IGRBarcode::GetQRCodeErrorLevel ( );
__declspec(implementation_key(904)) void IGRBarcode::PutQRCodeErrorLevel ( long pVal );
__declspec(implementation_key(905)) long IGRBarcode::GetQRCodeVersion ( );
__declspec(implementation_key(906)) void IGRBarcode::PutQRCodeVersion ( long pVal );
__declspec(implementation_key(907)) long IGRBarcode::GetQRCodeMask ( );
__declspec(implementation_key(908)) void IGRBarcode::PutQRCodeMask ( long pVal );
__declspec(implementation_key(909)) GRDtmxEncoding IGRBarcode::GetDtmxEncoding ( );
__declspec(implementation_key(910)) void IGRBarcode::PutDtmxEncoding ( GRDtmxEncoding pVal );
__declspec(implementation_key(911)) GRDtmxMatrixSize IGRBarcode::GetDtmxMatrixSize ( );
__declspec(implementation_key(912)) void IGRBarcode::PutDtmxMatrixSize ( GRDtmxMatrixSize pVal );
__declspec(implementation_key(913)) long IGRBarcode::GetDtmxModuleSize ( );
__declspec(implementation_key(914)) void IGRBarcode::PutDtmxModuleSize ( long pVal );
__declspec(implementation_key(915)) _bstr_t IGRBarcode::GetDataField ( );
__declspec(implementation_key(916)) void IGRBarcode::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(917)) GRLockType IGRBarcode::GetLock ( );
__declspec(implementation_key(918)) void IGRBarcode::PutLock ( GRLockType pVal );
__declspec(implementation_key(919)) _bstr_t IGRChart::GetTitle ( );
__declspec(implementation_key(920)) void IGRChart::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(921)) IGRFontPtr IGRChart::GetTitleFont ( );
__declspec(implementation_key(922)) IGRFontPtr IGRChart::GetValueFont ( );
__declspec(implementation_key(923)) VARIANT_BOOL IGRChart::GetChart3D ( );
__declspec(implementation_key(924)) void IGRChart::PutChart3D ( VARIANT_BOOL pVal );
__declspec(implementation_key(925)) VARIANT_BOOL IGRChart::GetSingleSeriesColored ( );
__declspec(implementation_key(926)) void IGRChart::PutSingleSeriesColored ( VARIANT_BOOL pVal );
__declspec(implementation_key(927)) IGRChartAxisPtr IGRChart::GetXAxis ( );
__declspec(implementation_key(928)) IGRChartAxisPtr IGRChart::GetYAxis ( );
__declspec(implementation_key(929)) IGRChartAxisPtr IGRChart::GetY2Axis ( );
__declspec(implementation_key(930)) IGRChartSeriesCollectionPtr IGRChart::GetSeries ( );
__declspec(implementation_key(931)) IGRRecordsetPtr IGRChart::GetRecordset ( );
__declspec(implementation_key(932)) _bstr_t IGRChart::GetSeriesField ( );
__declspec(implementation_key(933)) void IGRChart::PutSeriesField ( _bstr_t pVal );
__declspec(implementation_key(934)) VARIANT_BOOL IGRChart::GetSeriesAuto ( );
__declspec(implementation_key(935)) void IGRChart::PutSeriesAuto ( VARIANT_BOOL pVal );
__declspec(implementation_key(936)) _bstr_t IGRChart::GetGroupField ( );
__declspec(implementation_key(937)) void IGRChart::PutGroupField ( _bstr_t pVal );
__declspec(implementation_key(938)) VARIANT_BOOL IGRChart::GetGroupAuto ( );
__declspec(implementation_key(939)) void IGRChart::PutGroupAuto ( VARIANT_BOOL pVal );
__declspec(implementation_key(940)) VARIANT_BOOL IGRChart::GetLegendVisible ( );
__declspec(implementation_key(941)) void IGRChart::PutLegendVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(942)) VARIANT_BOOL IGRChart::GetLegendValueVisible ( );
__declspec(implementation_key(943)) void IGRChart::PutLegendValueVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(944)) VARIANT_BOOL IGRChart::GetLegendShowSum ( );
__declspec(implementation_key(945)) void IGRChart::PutLegendShowSum ( VARIANT_BOOL pVal );
__declspec(implementation_key(946)) VARIANT_BOOL IGRChart::GetLegendAtBottom ( );
__declspec(implementation_key(947)) void IGRChart::PutLegendAtBottom ( VARIANT_BOOL pVal );
__declspec(implementation_key(948)) long IGRChart::GetLegendColumnCount ( );
__declspec(implementation_key(949)) void IGRChart::PutLegendColumnCount ( long pVal );
__declspec(implementation_key(950)) _bstr_t IGRChart::GetLegendSumLabel ( );
__declspec(implementation_key(951)) void IGRChart::PutLegendSumLabel ( _bstr_t pVal );
__declspec(implementation_key(952)) long IGRChart::GetGroupCount ( );
__declspec(implementation_key(953)) void IGRChart::PutGroupCount ( long pVal );
__declspec(implementation_key(954)) long IGRChart::GetSeriesCount ( );
__declspec(implementation_key(955)) void IGRChart::PutSeriesCount ( long pVal );
__declspec(implementation_key(956)) GRDisplayCursor IGRChart::GetSeriesCursor ( );
__declspec(implementation_key(957)) void IGRChart::PutSeriesCursor ( GRDisplayCursor pVal );
__declspec(implementation_key(958)) GRDisplayCursor IGRChart::GetLegendCursor ( );
__declspec(implementation_key(959)) void IGRChart::PutLegendCursor ( GRDisplayCursor pVal );
__declspec(implementation_key(960)) long IGRChart::GetBarWidthPercent ( );
__declspec(implementation_key(961)) void IGRChart::PutBarWidthPercent ( long pVal );
__declspec(implementation_key(962)) VARIANT_BOOL IGRChart::GetNegativeAsZero ( );
__declspec(implementation_key(963)) void IGRChart::PutNegativeAsZero ( VARIANT_BOOL pVal );
__declspec(implementation_key(964)) double IGRChart::GetBubbleScalePerCm ( );
__declspec(implementation_key(965)) void IGRChart::PutBubbleScalePerCm ( double pVal );
__declspec(implementation_key(966)) _bstr_t IGRChart::GetGroupLabel ( long GroupIndex );
__declspec(implementation_key(967)) void IGRChart::PutGroupLabel ( long GroupIndex, _bstr_t pVal );
__declspec(implementation_key(968)) _bstr_t IGRChart::GetSeriesLabel ( long SeriesIndex );
__declspec(implementation_key(969)) void IGRChart::PutSeriesLabel ( long SeriesIndex, _bstr_t pVal );
__declspec(implementation_key(970)) double IGRChart::GetValue ( long SeriesIndex, long GroupIndex );
__declspec(implementation_key(971)) void IGRChart::PutValue ( long SeriesIndex, long GroupIndex, double pVal );
__declspec(implementation_key(972)) long IGRChart::GetValueCount ( long SeriesIndex );
__declspec(implementation_key(973)) long IGRChart::GetFillColorCount ( );
__declspec(implementation_key(974)) OLE_COLOR IGRChart::GetFillColor ( long Index );
__declspec(implementation_key(975)) HRESULT IGRChart::AddFillColor ( OLE_COLOR FillColor );
__declspec(implementation_key(976)) HRESULT IGRChart::EmptyFillColors ( );
__declspec(implementation_key(977)) HRESULT IGRChart::PrepareSnapShot ( );
__declspec(implementation_key(978)) HRESULT IGRChart::SnapShot ( );
__declspec(implementation_key(979)) VARIANT_BOOL IGRChart::LoadDataFromXML ( _bstr_t XML, VARIANT_BOOL FirstSeries, VARIANT_BOOL AutoSeries, VARIANT_BOOL AutoGroup );
__declspec(implementation_key(980)) VARIANT_BOOL IGRChart::LoadXYDataFromXML ( _bstr_t XML, VARIANT_BOOL AutoSeries );
__declspec(implementation_key(981)) VARIANT_BOOL IGRChart::LoadXYZDataFromXML ( _bstr_t XML, VARIANT_BOOL AutoSeries );
__declspec(implementation_key(982)) HRESULT IGRChart::AddXYValue ( long SeriesIndex, double XVal, double YVal );
__declspec(implementation_key(983)) HRESULT IGRChart::AddXYZValue ( long SeriesIndex, double XVal, double YVal, double ZVal );
__declspec(implementation_key(984)) HRESULT IGRChart::EmptyValues ( );
__declspec(implementation_key(985)) HRESULT IGRChart::GetXYValue ( long SeriesIndex, long Index, double * pXVal, double * pYVal );
__declspec(implementation_key(986)) HRESULT IGRChart::GetXYZValue ( long SeriesIndex, long Index, double * pXVal, double * pYVal, double * pZVal );
__declspec(implementation_key(987)) _bstr_t IGRChart::GetValueText ( long SeriesIndex, long GroupIndex );
__declspec(implementation_key(988)) HRESULT IGRChart::SetValueText ( long SeriesIndex, long GroupIndex, _bstr_t ValueText );
__declspec(implementation_key(989)) HRESULT IGRChart::MapToRecordset ( long SeriesIndex, long GroupIndex );
__declspec(implementation_key(990)) OLE_HANDLE IGRChart::Get_SeriesCursorHandle ( );
__declspec(implementation_key(991)) OLE_HANDLE IGRChart::Get_LegendCursorHandle ( );
__declspec(implementation_key(992)) GRLockType IGRChart::GetLock ( );
__declspec(implementation_key(993)) void IGRChart::PutLock ( GRLockType pVal );
__declspec(implementation_key(994)) IGRFieldsPtr IGRRecordset::GetFields ( );
__declspec(implementation_key(995)) long IGRRecordset::GetRecordCount ( );
__declspec(implementation_key(996)) long IGRRecordset::GetRecordNo ( );
__declspec(implementation_key(997)) _bstr_t IGRRecordset::GetConnectionString ( );
__declspec(implementation_key(998)) void IGRRecordset::PutConnectionString ( _bstr_t pVal );
__declspec(implementation_key(999)) _bstr_t IGRRecordset::GetQuerySQL ( );
__declspec(implementation_key(1000)) void IGRRecordset::PutQuerySQL ( _bstr_t pVal );
__declspec(implementation_key(1001)) VARIANT_BOOL IGRRecordset::GetSkipQuery ( );
__declspec(implementation_key(1002)) void IGRRecordset::PutSkipQuery ( VARIANT_BOOL pVal );
__declspec(implementation_key(1003)) _bstr_t IGRRecordset::GetXmlTableName ( );
__declspec(implementation_key(1004)) void IGRRecordset::PutXmlTableName ( _bstr_t pVal );
__declspec(implementation_key(1005)) _bstr_t IGRRecordset::GetSortFields ( );
__declspec(implementation_key(1006)) void IGRRecordset::PutSortFields ( _bstr_t pVal );
__declspec(implementation_key(1007)) VARIANT_BOOL IGRRecordset::GetSortAsc ( );
__declspec(implementation_key(1008)) void IGRRecordset::PutSortAsc ( VARIANT_BOOL pVal );
__declspec(implementation_key(1009)) VARIANT_BOOL IGRRecordset::GetSortCaseSensitive ( );
__declspec(implementation_key(1010)) void IGRRecordset::PutSortCaseSensitive ( VARIANT_BOOL pVal );
__declspec(implementation_key(1011)) VARIANT_BOOL IGRRecordset::GetEditable ( );
__declspec(implementation_key(1012)) void IGRRecordset::PutEditable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1013)) _bstr_t IGRRecordset::GetFetchRecordScript ( );
__declspec(implementation_key(1014)) void IGRRecordset::PutFetchRecordScript ( _bstr_t pVal );
__declspec(implementation_key(1015)) _bstr_t IGRRecordset::GetBeforePostRecordScript ( );
__declspec(implementation_key(1016)) void IGRRecordset::PutBeforePostRecordScript ( _bstr_t pVal );
__declspec(implementation_key(1017)) _bstr_t IGRRecordset::GetProcessRecordScript ( );
__declspec(implementation_key(1018)) void IGRRecordset::PutProcessRecordScript ( _bstr_t pVal );
__declspec(implementation_key(1019)) _bstr_t IGRRecordset::GetPageProcessRecordScript ( );
__declspec(implementation_key(1020)) void IGRRecordset::PutPageProcessRecordScript ( _bstr_t pVal );
__declspec(implementation_key(1021)) IGRFieldPtr IGRRecordset::FieldByName ( _bstr_t Name );
__declspec(implementation_key(1022)) IGRFieldPtr IGRRecordset::FieldByDBName ( _bstr_t Name );
__declspec(implementation_key(1023)) HRESULT IGRRecordset::Append ( );
__declspec(implementation_key(1024)) HRESULT IGRRecordset::Edit ( );
__declspec(implementation_key(1025)) HRESULT IGRRecordset::Cancel ( );
__declspec(implementation_key(1026)) HRESULT IGRRecordset::Post ( );
__declspec(implementation_key(1027)) HRESULT IGRRecordset::First ( );
__declspec(implementation_key(1028)) HRESULT IGRRecordset::Next ( );
__declspec(implementation_key(1029)) HRESULT IGRRecordset::Prior ( );
__declspec(implementation_key(1030)) HRESULT IGRRecordset::Last ( );
__declspec(implementation_key(1031)) HRESULT IGRRecordset::MoveBy ( int Delta );
__declspec(implementation_key(1032)) VARIANT_BOOL IGRRecordset::Bof ( );
__declspec(implementation_key(1033)) VARIANT_BOOL IGRRecordset::Eof ( );
__declspec(implementation_key(1034)) HRESULT IGRRecordset::MoveTo ( long RecordNo );
__declspec(implementation_key(1035)) HRESULT IGRRecordset::Empty ( );
__declspec(implementation_key(1036)) IGRFieldPtr IGRRecordset::AddField ( _bstr_t Name, GRFieldType FieldType );
__declspec(implementation_key(1037)) HRESULT IGRRecordset::RemoveAllFields ( );
__declspec(implementation_key(1038)) VARIANT_BOOL IGRRecordset::Resort ( _bstr_t Fields, VARIANT_BOOL Ascending, VARIANT_BOOL CaseSensitive );
__declspec(implementation_key(1039)) _bstr_t IGRRecordset::SaveDataToXML ( );
__declspec(implementation_key(1040)) VARIANT_BOOL IGRRecordset::LoadData ( _bstr_t File );
__declspec(implementation_key(1041)) VARIANT_BOOL IGRRecordset::LoadDataFromXML ( _bstr_t XMLText );
__declspec(implementation_key(1042)) GRLockType IGRRecordset::GetLock ( );
__declspec(implementation_key(1043)) void IGRRecordset::PutLock ( GRLockType pVal );
__declspec(implementation_key(1044)) _bstr_t IGRCrossTab::GetHCrossFields ( );
__declspec(implementation_key(1045)) void IGRCrossTab::PutHCrossFields ( _bstr_t pVal );
__declspec(implementation_key(1046)) _bstr_t IGRCrossTab::GetVCrossFields ( );
__declspec(implementation_key(1047)) void IGRCrossTab::PutVCrossFields ( _bstr_t pVal );
__declspec(implementation_key(1048)) long IGRCrossTab::GetListCols ( );
__declspec(implementation_key(1049)) void IGRCrossTab::PutListCols ( long pVal );
__declspec(implementation_key(1050)) long IGRCrossTab::GetTotalCols ( );
__declspec(implementation_key(1051)) void IGRCrossTab::PutTotalCols ( long pVal );
__declspec(implementation_key(1052)) long IGRCrossTab::GetSubtotalCols ( );
__declspec(implementation_key(1053)) void IGRCrossTab::PutSubtotalCols ( long pVal );
__declspec(implementation_key(1054)) VARIANT_BOOL IGRCrossTab::GetHResort ( );
__declspec(implementation_key(1055)) void IGRCrossTab::PutHResort ( VARIANT_BOOL pVal );
__declspec(implementation_key(1056)) VARIANT_BOOL IGRCrossTab::GetHSortAsc ( );
__declspec(implementation_key(1057)) void IGRCrossTab::PutHSortAsc ( VARIANT_BOOL pVal );
__declspec(implementation_key(1058)) VARIANT_BOOL IGRCrossTab::GetVResort ( );
__declspec(implementation_key(1059)) void IGRCrossTab::PutVResort ( VARIANT_BOOL pVal );
__declspec(implementation_key(1060)) VARIANT_BOOL IGRCrossTab::GetVSortAsc ( );
__declspec(implementation_key(1061)) void IGRCrossTab::PutVSortAsc ( VARIANT_BOOL pVal );
__declspec(implementation_key(1062)) VARIANT_BOOL IGRCrossTab::GetHTotalAtFirst ( );
__declspec(implementation_key(1063)) void IGRCrossTab::PutHTotalAtFirst ( VARIANT_BOOL pVal );
__declspec(implementation_key(1064)) _bstr_t IGRCrossTab::GetHPercentColumns ( );
__declspec(implementation_key(1065)) void IGRCrossTab::PutHPercentColumns ( _bstr_t pVal );
__declspec(implementation_key(1066)) _bstr_t IGRCrossTab::GetVPercentColumns ( );
__declspec(implementation_key(1067)) void IGRCrossTab::PutVPercentColumns ( _bstr_t pVal );
__declspec(implementation_key(1068)) _bstr_t IGRCrossTab::GetTotalExcludeColumns ( );
__declspec(implementation_key(1069)) void IGRCrossTab::PutTotalExcludeColumns ( _bstr_t pVal );
__declspec(implementation_key(1070)) _bstr_t IGRCrossTab::GetTotalHPercentColumns ( );
__declspec(implementation_key(1071)) void IGRCrossTab::PutTotalHPercentColumns ( _bstr_t pVal );
__declspec(implementation_key(1072)) _bstr_t IGRCrossTab::GetTotalVPercentColumns ( );
__declspec(implementation_key(1073)) void IGRCrossTab::PutTotalVPercentColumns ( _bstr_t pVal );
__declspec(implementation_key(1074)) _bstr_t IGRCrossTab::GetPercentFormat ( );
__declspec(implementation_key(1075)) void IGRCrossTab::PutPercentFormat ( _bstr_t pVal );
__declspec(implementation_key(1076)) GRPeriodType IGRCrossTab::GetHCrossPeriodType ( );
__declspec(implementation_key(1077)) void IGRCrossTab::PutHCrossPeriodType ( GRPeriodType pVal );
__declspec(implementation_key(1078)) _bstr_t IGRCrossTab::GetBeginDateParameter ( );
__declspec(implementation_key(1079)) void IGRCrossTab::PutBeginDateParameter ( _bstr_t pVal );
__declspec(implementation_key(1080)) _bstr_t IGRCrossTab::GetEndDateParameter ( );
__declspec(implementation_key(1081)) void IGRCrossTab::PutEndDateParameter ( _bstr_t pVal );
__declspec(implementation_key(1082)) VARIANT_BOOL IGRCrossTab::GetGroupAutoSum ( );
__declspec(implementation_key(1083)) void IGRCrossTab::PutGroupAutoSum ( VARIANT_BOOL pVal );
__declspec(implementation_key(1084)) IGRRecordsetPtr IGRCrossTab::GetRecordset ( );
__declspec(implementation_key(1085)) HRESULT IGRCrossTab::HBeginAddItem ( );
__declspec(implementation_key(1086)) HRESULT IGRCrossTab::HEndAddItem ( );
__declspec(implementation_key(1087)) HRESULT IGRCrossTab::VBeginAddItem ( );
__declspec(implementation_key(1088)) HRESULT IGRCrossTab::VEndAddItem ( );
__declspec(implementation_key(1089)) DATE IGRCrossTab::GetCurPeriodBeginDate ( );
__declspec(implementation_key(1090)) DATE IGRCrossTab::GetCurPeriodEndDate ( );
__declspec(implementation_key(1091)) _bstr_t IGRCrossTab::GetDisabledSumFields ( );
__declspec(implementation_key(1092)) void IGRCrossTab::PutDisabledSumFields ( _bstr_t pVal );
__declspec(implementation_key(1093)) GRLockType IGRCrossTab::GetLock ( );
__declspec(implementation_key(1094)) void IGRCrossTab::PutLock ( GRLockType pVal );
__declspec(implementation_key(1095)) IGRFieldPtr IGRFields::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1096)) IUnknownPtr IGRFields::Get_NewEnum ( );
__declspec(implementation_key(1097)) long IGRFields::GetCount ( );
__declspec(implementation_key(1098)) IGRFieldPtr IGRFields::Add ( );
__declspec(implementation_key(1099)) HRESULT IGRFields::Remove ( const _variant_t & Index );
__declspec(implementation_key(1100)) HRESULT IGRFields::RemoveAll ( );
__declspec(implementation_key(1101)) long IGRFields::IndexByName ( _bstr_t Name );
__declspec(implementation_key(1102)) IGRFieldPtr IGRFields::ItemAt ( long Index );
__declspec(implementation_key(1103)) HRESULT IGRFields::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(1104)) _bstr_t IGRField::GetName ( );
__declspec(implementation_key(1105)) void IGRField::PutName ( _bstr_t pVal );
__declspec(implementation_key(1106)) _bstr_t IGRField::GetDBFieldName ( );
__declspec(implementation_key(1107)) void IGRField::PutDBFieldName ( _bstr_t pVal );
__declspec(implementation_key(1108)) GRFieldType IGRField::GetFieldType ( );
__declspec(implementation_key(1109)) void IGRField::PutFieldType ( GRFieldType pVal );
__declspec(implementation_key(1110)) long IGRField::GetLength ( );
__declspec(implementation_key(1111)) void IGRField::PutLength ( long pVal );
__declspec(implementation_key(1112)) VARIANT_BOOL IGRField::GetRTrimBlankChars ( );
__declspec(implementation_key(1113)) void IGRField::PutRTrimBlankChars ( VARIANT_BOOL pVal );
__declspec(implementation_key(1114)) _bstr_t IGRField::GetFormat ( );
__declspec(implementation_key(1115)) void IGRField::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(1116)) _variant_t IGRField::GetValue ( );
__declspec(implementation_key(1117)) void IGRField::PutValue ( const _variant_t & pVal );
__declspec(implementation_key(1118)) VARIANT_BOOL IGRField::GetAsBoolean ( );
__declspec(implementation_key(1119)) void IGRField::PutAsBoolean ( VARIANT_BOOL pVal );
__declspec(implementation_key(1120)) CURRENCY IGRField::GetAsCurrency ( );
__declspec(implementation_key(1121)) void IGRField::PutAsCurrency ( const CURRENCY & pVal );
__declspec(implementation_key(1122)) DATE IGRField::GetAsDateTime ( );
__declspec(implementation_key(1123)) void IGRField::PutAsDateTime ( DATE pVal );
__declspec(implementation_key(1124)) double IGRField::GetAsFloat ( );
__declspec(implementation_key(1125)) void IGRField::PutAsFloat ( double pVal );
__declspec(implementation_key(1126)) long IGRField::GetAsInteger ( );
__declspec(implementation_key(1127)) void IGRField::PutAsInteger ( long pVal );
__declspec(implementation_key(1128)) _bstr_t IGRField::GetAsString ( );
__declspec(implementation_key(1129)) void IGRField::PutAsString ( _bstr_t pVal );
__declspec(implementation_key(1130)) _bstr_t IGRField::GetDisplayText ( );
__declspec(implementation_key(1131)) void IGRField::PutDisplayText ( _bstr_t pVal );
__declspec(implementation_key(1132)) VARIANT_BOOL IGRField::GetIsNull ( );
__declspec(implementation_key(1133)) long IGRField::GetDataSize ( );
__declspec(implementation_key(1134)) LONG_PTR IGRField::GetDataBuffer ( );
__declspec(implementation_key(1135)) _bstr_t IGRField::GetRunningDBField ( );
__declspec(implementation_key(1136)) _bstr_t IGRField::GetGetDisplayTextScript ( );
__declspec(implementation_key(1137)) void IGRField::PutGetDisplayTextScript ( _bstr_t pVal );
__declspec(implementation_key(1138)) HRESULT IGRField::Clear ( );
__declspec(implementation_key(1139)) HRESULT IGRField::LoadFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1140)) HRESULT IGRField::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject );
__declspec(implementation_key(1141)) HRESULT IGRField::LoadFromMemory ( unsigned char * pBuffer, long ByteCount );
__declspec(implementation_key(1142)) GRLockType IGRField::GetLock ( );
__declspec(implementation_key(1143)) void IGRField::PutLock ( GRLockType pVal );
__declspec(implementation_key(1144)) long IGRBinaryObject::GetDataSize ( );
__declspec(implementation_key(1145)) _bstr_t IGRBinaryObject::GetAsBase64Text ( );
__declspec(implementation_key(1146)) VARIANT_BOOL IGRBinaryObject::LoadFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1147)) VARIANT_BOOL IGRBinaryObject::LoadFromField ( struct IGRField * Field );
__declspec(implementation_key(1148)) VARIANT_BOOL IGRBinaryObject::LoadFromBase64Text ( _bstr_t Base64Text );
__declspec(implementation_key(1149)) VARIANT_BOOL IGRBinaryObject::LoadFromVariant ( const _variant_t & Buf );
__declspec(implementation_key(1150)) VARIANT_BOOL IGRBinaryObject::SaveToFile ( _bstr_t PathFile );
__declspec(implementation_key(1151)) _variant_t IGRBinaryObject::SaveToVariant ( );
__declspec(implementation_key(1152)) HRESULT IGRBinaryObject::LoadFromMemory ( unsigned char * pData, long ByteCount );
__declspec(implementation_key(1153)) OLE_HANDLE IGRBinaryObject::GetDataBuf ( );
__declspec(implementation_key(1154)) GRPictureType IGRPicture::GetType ( );
__declspec(implementation_key(1155)) long IGRPicture::GetWidth ( );
__declspec(implementation_key(1156)) long IGRPicture::GetHeight ( );
__declspec(implementation_key(1157)) IPicturePtr IGRPicture::GetOlePicture ( );
__declspec(implementation_key(1158)) void IGRPicture::PutOlePicture ( struct IPicture * pVal );
__declspec(implementation_key(1159)) HRESULT IGRPicture::Render ( OLE_HANDLE hdc, long Left, long Top, long Width, long Height, GRPictureAlignment PictureAlignment, GRPictureSizeMode PictureSizeMode, unsigned long BackColor, VARIANT_BOOL FillBack, GRPictureTransparentMode Transparent, GRPictureRotateMode RotateMode );
__declspec(implementation_key(1160)) VARIANT_BOOL IGRPicture::LoadFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1161)) VARIANT_BOOL IGRPicture::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject );
__declspec(implementation_key(1162)) VARIANT_BOOL IGRPicture::SaveToFile ( _bstr_t PathFile );
__declspec(implementation_key(1163)) HRESULT IGRPicture::LoadFromMemory ( unsigned char * pData, long ByteCount );
__declspec(implementation_key(1164)) HRESULT IGRPicture::_GetDataBuffer ( OLE_HANDLE * ppData, long * pBytesCount );
__declspec(implementation_key(1165)) VARIANT_BOOL IGRPicture::LoadFromField ( _bstr_t DataField );
__declspec(implementation_key(1166)) GRPictureAlignment IGRPictureBox::GetAlignment ( );
__declspec(implementation_key(1167)) void IGRPictureBox::PutAlignment ( GRPictureAlignment pVal );
__declspec(implementation_key(1168)) GRPictureSizeMode IGRPictureBox::GetSizeMode ( );
__declspec(implementation_key(1169)) void IGRPictureBox::PutSizeMode ( GRPictureSizeMode pVal );
__declspec(implementation_key(1170)) _bstr_t IGRPictureBox::GetDataField ( );
__declspec(implementation_key(1171)) void IGRPictureBox::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(1172)) long IGRPictureBox::GetImageIndex ( );
__declspec(implementation_key(1173)) void IGRPictureBox::PutImageIndex ( long pVal );
__declspec(implementation_key(1174)) _bstr_t IGRPictureBox::GetImageFile ( );
__declspec(implementation_key(1175)) void IGRPictureBox::PutImageFile ( _bstr_t pVal );
__declspec(implementation_key(1176)) GRPictureTransparentMode IGRPictureBox::GetTransparentMode ( );
__declspec(implementation_key(1177)) void IGRPictureBox::PutTransparentMode ( GRPictureTransparentMode pVal );
__declspec(implementation_key(1178)) GRPictureRotateMode IGRPictureBox::GetRotateMode ( );
__declspec(implementation_key(1179)) void IGRPictureBox::PutRotateMode ( GRPictureRotateMode pVal );
__declspec(implementation_key(1180)) IGRPicturePtr IGRPictureBox::GetPicture ( );
__declspec(implementation_key(1181)) void IGRPictureBox::PutPicture ( struct IGRPicture * pVal );
__declspec(implementation_key(1182)) HRESULT IGRPictureBox::LoadFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1183)) HRESULT IGRPictureBox::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject );
__declspec(implementation_key(1184)) HRESULT IGRPictureBox::LoadFromMemory ( unsigned char * pBuffer, long BytesCount );
__declspec(implementation_key(1185)) HRESULT IGRPictureBox::LoadBmpPicture ( struct IPicture * newVal );
__declspec(implementation_key(1186)) HRESULT IGRPictureBox::AttachSystemImage ( GRSystemImage SystemImage );
__declspec(implementation_key(1187)) GRLockType IGRPictureBox::GetLock ( );
__declspec(implementation_key(1188)) void IGRPictureBox::PutLock ( GRLockType pVal );
__declspec(implementation_key(1189)) IGRPicturePtr IGRImageList::GetItem ( long Index );
__declspec(implementation_key(1190)) long IGRImageList::GetCount ( );
__declspec(implementation_key(1191)) HRESULT IGRImageList::Add ( struct IGRPicture * pPicture );
__declspec(implementation_key(1192)) HRESULT IGRImageList::AddFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1193)) HRESULT IGRImageList::AddFromBinary ( struct IGRBinaryObject * pBinaryObject );
__declspec(implementation_key(1194)) HRESULT IGRImageList::Remove ( long Index );
__declspec(implementation_key(1195)) HRESULT IGRImageList::RemoveAll ( );
__declspec(implementation_key(1196)) HRESULT IGRImageList::AddFromMemory ( unsigned char * pData, long ByteCount );
__declspec(implementation_key(1197)) GRLockType IGRImageList::GetLock ( );
__declspec(implementation_key(1198)) void IGRImageList::PutLock ( GRLockType pVal );
__declspec(implementation_key(1199)) HRESULT IGRGraphics::MoveTo ( double x, double y );
__declspec(implementation_key(1200)) HRESULT IGRGraphics::LineTo ( double x, double y );
__declspec(implementation_key(1201)) HRESULT IGRGraphics::FillRect ( double x, double y, double Width, double Height, OLE_COLOR FillColor );
__declspec(implementation_key(1202)) HRESULT IGRGraphics::DrawPixel ( double x, double y, OLE_COLOR Color );
__declspec(implementation_key(1203)) HRESULT IGRGraphics::Rectangle ( double x, double y, double Width, double Height, VARIANT_BOOL ToFill );
__declspec(implementation_key(1204)) HRESULT IGRGraphics::RoundRect ( double x, double y, double Width, double Height, long cornerx, long cornery, VARIANT_BOOL ToFill );
__declspec(implementation_key(1205)) HRESULT IGRGraphics::Ellipse ( double x, double y, double Width, double Height, VARIANT_BOOL ToFill );
__declspec(implementation_key(1206)) HRESULT IGRGraphics::Pie ( double x, double y, double r, double BeginAngleDegree, double EndAngleDegree, VARIANT_BOOL ToFill );
__declspec(implementation_key(1207)) HRESULT IGRGraphics::Arc ( double cx, double cy, double r, double BeginAngleDegree, double EndAngleDegree );
__declspec(implementation_key(1208)) HRESULT IGRGraphics::EllipseArc ( double Left, double Top, double Width, double Height, double BeginAngleDegree, double EndAngleDegree );
__declspec(implementation_key(1209)) HRESULT IGRGraphics::EllipsePie ( double Left, double Top, double Width, double Height, double BeginAngleDegree, double EndAngleDegree, VARIANT_BOOL ToFill );
__declspec(implementation_key(1210)) HRESULT IGRGraphics::DrawLabelText ( _bstr_t String, double x, double y );
__declspec(implementation_key(1211)) HRESULT IGRGraphics::DrawRotateText ( _bstr_t String, double x, double y, double RotateDegree );
__declspec(implementation_key(1212)) HRESULT IGRGraphics::DrawText ( _bstr_t String, double x, double y, double Width, double Height, GRTextAlign TextAlign, VARIANT_BOOL WordWrap );
__declspec(implementation_key(1213)) HRESULT IGRGraphics::DrawFormatText ( _bstr_t String, double x, double y, double Width, double Height, struct IGRTextFormat * TextFormat );
__declspec(implementation_key(1214)) double IGRGraphics::CalcLabelTextWidth ( _bstr_t String );
__declspec(implementation_key(1215)) double IGRGraphics::CalcLabelTextHeight ( _bstr_t String );
__declspec(implementation_key(1216)) long IGRGraphics::CalcTextOutLen ( double Width, double Height, _bstr_t Text, VARIANT_BOOL WordWrap );
__declspec(implementation_key(1217)) HRESULT IGRGraphics::DrawPicture ( struct IGRPicture * pPicture, double Left, double Top, double Width, double Height, GRPictureAlignment PictureAlignment, GRPictureSizeMode PictureSizeMode, GRPictureTransparentMode Transparent );
__declspec(implementation_key(1218)) HRESULT IGRGraphics::SelectFont ( struct IGRFont * pFont );
__declspec(implementation_key(1219)) HRESULT IGRGraphics::RestoreFont ( );
__declspec(implementation_key(1220)) HRESULT IGRGraphics::FontPointChangeTo ( double Point );
__declspec(implementation_key(1221)) HRESULT IGRGraphics::FontPointRestore ( );
__declspec(implementation_key(1222)) HRESULT IGRGraphics::SelectTextColor ( OLE_COLOR TextColor );
__declspec(implementation_key(1223)) HRESULT IGRGraphics::RestoreTextColor ( );
__declspec(implementation_key(1224)) HRESULT IGRGraphics::SelectPen ( double PenWidth, OLE_COLOR PenColor, GRPenStyle PenStyle );
__declspec(implementation_key(1225)) HRESULT IGRGraphics::RestorePen ( );
__declspec(implementation_key(1226)) HRESULT IGRGraphics::SelectFillColor ( OLE_COLOR BrushColor );
__declspec(implementation_key(1227)) HRESULT IGRGraphics::RestoreFillColor ( );
__declspec(implementation_key(1228)) HRESULT IGRGraphics::PushClipRect ( double x, double y, double Width, double Height );
__declspec(implementation_key(1229)) HRESULT IGRGraphics::PopClipRect ( );
__declspec(implementation_key(1230)) double IGRGraphics::GetLeft ( );
__declspec(implementation_key(1231)) double IGRGraphics::GetTop ( );
__declspec(implementation_key(1232)) double IGRGraphics::GetWidth ( );
__declspec(implementation_key(1233)) double IGRGraphics::GetHeight ( );
__declspec(implementation_key(1234)) VARIANT_BOOL IGRGraphics::GetByUnit ( );
__declspec(implementation_key(1235)) void IGRGraphics::PutByUnit ( VARIANT_BOOL pVal );
__declspec(implementation_key(1236)) double IGRGraphics::GetCCPInnerX ( );
__declspec(implementation_key(1237)) double IGRGraphics::GetCCPInnerY ( );
__declspec(implementation_key(1238)) double IGRGraphics::GetCCPOuterX ( );
__declspec(implementation_key(1239)) double IGRGraphics::GetCCPOuterY ( );
__declspec(implementation_key(1240)) HRESULT IGRGraphics::CurveTo ( double xInnerControl, double yInnerControl, double xOuterControl, double yOuterControl, double xEnd, double yEnd );
__declspec(implementation_key(1241)) HRESULT IGRGraphics::CalcCurveControlPoints ( double xFirst, double yFirst, double xMiddle, double yMiddle, double xAfter, double yAfter );
__declspec(implementation_key(1242)) HRESULT IGRGraphics::DrawPointMarker ( GRPointMarkerStyle MarkerStyle, double cx, double cy, double size );
__declspec(implementation_key(1243)) HRESULT IGRGraphics::DrawFormatTextShrinkToFit ( _bstr_t String, double x, double y, double Width, double Height, struct IGRTextFormat * TextFormat );
__declspec(implementation_key(1244)) double IGRGraphics::CalcDrawFormatTextHeight ( _bstr_t String, double Width, struct IGRTextFormat * TextFormat );
__declspec(implementation_key(1245)) double IGRGraphics::CalcDrawFormatTextWidth ( _bstr_t String, struct IGRTextFormat * TextFormat );
__declspec(implementation_key(1246)) long IGRGraphics::CalcDrawFormatTextOutLen ( _bstr_t Text, double Width, double Height, struct IGRTextFormat * TextFormat );
__declspec(implementation_key(1247)) IGRPicturePtr IGRUtility::CreatePicture ( );
__declspec(implementation_key(1248)) IGRRecordsetPtr IGRUtility::CreateRecordset ( );
__declspec(implementation_key(1249)) IGRTextFormatPtr IGRUtility::CreateTextFormat ( );
__declspec(implementation_key(1250)) IGRBinaryObjectPtr IGRUtility::CreateBinaryObject ( );
__declspec(implementation_key(1251)) IGRDateTimePtr IGRUtility::CreateDateTime ( );
__declspec(implementation_key(1252)) _bstr_t IGRUtility::NumberFormat ( double Value, _bstr_t Format );
__declspec(implementation_key(1253)) _bstr_t IGRUtility::NumberFormatToEnglish ( double Value, long Decimals );
__declspec(implementation_key(1254)) _bstr_t IGRUtility::NumberFormatToBigHZ ( double Value, long Decimals );
__declspec(implementation_key(1255)) _bstr_t IGRUtility::NumberFormatToBigHZAmount ( double Value );
__declspec(implementation_key(1256)) double IGRUtility::NumberRound45 ( double Value, long Decimals );
__declspec(implementation_key(1257)) double IGRUtility::NumberRound465 ( double Value, long Decimals );
__declspec(implementation_key(1258)) _bstr_t IGRUtility::DateTimeFormat ( DATE Date, _bstr_t Format );
__declspec(implementation_key(1259)) long IGRUtility::GetTooltipHoverTime ( );
__declspec(implementation_key(1260)) void IGRUtility::PutTooltipHoverTime ( long pVal );
__declspec(implementation_key(1261)) HRESULT IGRUtility::GetSkin ( long * ColorRed, long * ColorGreen, long * ColorBlue, long * Style );
__declspec(implementation_key(1262)) HRESULT IGRUtility::SetSkin ( long ColorRed, long ColorGreen, long ColorBlue, long Style );
__declspec(implementation_key(1263)) HRESULT IGRUtility::SetHyperlinkClickedColor ( long ColorRed, long ColorGreen, long ColorBlue );
__declspec(implementation_key(1264)) HRESULT IGRUtility::LoadDefaultPreviewWinIcon ( _bstr_t PathFile );
__declspec(implementation_key(1265)) _variant_t IGRUtility::GZCompress ( const _variant_t & Val );
__declspec(implementation_key(1266)) _variant_t IGRUtility::GZUncompress ( const _variant_t & Val );
__declspec(implementation_key(1267)) HRESULT IGRUtility::HTTPRequestSend ( _bstr_t URL, const _variant_t & data );
__declspec(implementation_key(1268)) _bstr_t IGRUtility::ShowFolderDialog ( );
__declspec(implementation_key(1269)) _bstr_t IGRUtility::ShowOpenFileDialog ( _bstr_t FileType, _bstr_t ExtFile, _bstr_t DefaultFile );
__declspec(implementation_key(1270)) _bstr_t IGRUtility::ShowSaveFileDialog ( _bstr_t FileType, _bstr_t ExtFile, _bstr_t DefaultFile );
__declspec(implementation_key(1271)) long IGRUtility::GetPrinterCount ( );
__declspec(implementation_key(1272)) _bstr_t IGRUtility::GetPrinterName ( long Index );
__declspec(implementation_key(1273)) long IGRUtility::GetPrinterPaperCount ( _bstr_t PrinterName );
__declspec(implementation_key(1274)) _bstr_t IGRUtility::GetPrinterPaperName ( long Index );
__declspec(implementation_key(1275)) HRESULT IGRUtility::DisableDebug ( );
__declspec(implementation_key(1276)) HRESULT IGRUtility::SetMoneyLabelText ( _bstr_t MoneyLabelText );
__declspec(implementation_key(1277)) VARIANT_BOOL IGRUtility::GetTextWrapByWord ( );
__declspec(implementation_key(1278)) void IGRUtility::PutTextWrapByWord ( VARIANT_BOOL pVal );
__declspec(implementation_key(1279)) VARIANT_BOOL IGRUtility::GetTextWrapToJustify ( );
__declspec(implementation_key(1280)) void IGRUtility::PutTextWrapToJustify ( VARIANT_BOOL pVal );
__declspec(implementation_key(1281)) _bstr_t IGRUtility::GetTextLeftPunctuations ( );
__declspec(implementation_key(1282)) void IGRUtility::PutTextLeftPunctuations ( _bstr_t pVal );
__declspec(implementation_key(1283)) _bstr_t IGRUtility::GetTextRightPunctuations ( );
__declspec(implementation_key(1284)) void IGRUtility::PutTextRightPunctuations ( _bstr_t pVal );
__declspec(implementation_key(1285)) OLE_COLOR IGRUtility::ColorFromRGB ( long r, long g, long b );
__declspec(implementation_key(1286)) _bstr_t IGRUtility::_GetResString ( long ResID );
__declspec(implementation_key(1287)) IGridppReportPtr IGRSubReport::GetReport ( );
__declspec(implementation_key(1288)) void IGRSubReport::PutReport ( struct IGridppReport * pVal );
__declspec(implementation_key(1289)) VARIANT_BOOL IGRSubReport::GetCanGrow ( );
__declspec(implementation_key(1290)) void IGRSubReport::PutCanGrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(1291)) VARIANT_BOOL IGRSubReport::GetCanShrink ( );
__declspec(implementation_key(1292)) void IGRSubReport::PutCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(1293)) VARIANT_BOOL IGRSubReport::GetSpanToNewPage ( );
__declspec(implementation_key(1294)) void IGRSubReport::PutSpanToNewPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(1295)) VARIANT_BOOL IGRSubReport::GetParentPageSettings ( );
__declspec(implementation_key(1296)) void IGRSubReport::PutParentPageSettings ( VARIANT_BOOL pVal );
__declspec(implementation_key(1297)) VARIANT_BOOL IGRSubReport::GetResetPageNumber ( );
__declspec(implementation_key(1298)) void IGRSubReport::PutResetPageNumber ( VARIANT_BOOL pVal );
__declspec(implementation_key(1299)) VARIANT_BOOL IGRSubReport::GetToNewExcelSheet ( );
__declspec(implementation_key(1300)) void IGRSubReport::PutToNewExcelSheet ( VARIANT_BOOL pVal );
__declspec(implementation_key(1301)) VARIANT_BOOL IGRSubReport::GetHideOnRecordsetEmpty ( );
__declspec(implementation_key(1302)) void IGRSubReport::PutHideOnRecordsetEmpty ( VARIANT_BOOL pVal );
__declspec(implementation_key(1303)) _bstr_t IGRSubReport::GetRelationFields ( );
__declspec(implementation_key(1304)) void IGRSubReport::PutRelationFields ( _bstr_t pVal );
__declspec(implementation_key(1305)) _bstr_t IGRSubReport::GetReportFile ( );
__declspec(implementation_key(1306)) void IGRSubReport::PutReportFile ( _bstr_t pVal );
__declspec(implementation_key(1307)) HRESULT IGRSubReport::_ResetSaveFlag ( );
__declspec(implementation_key(1308)) GRLockType IGRSubReport::GetLock ( );
__declspec(implementation_key(1309)) void IGRSubReport::PutLock ( GRLockType pVal );
__declspec(implementation_key(1310)) _bstr_t IGridppReport::GetVersion ( );
__declspec(implementation_key(1311)) long IGridppReport::GetLanguage ( );
__declspec(implementation_key(1312)) void IGridppReport::PutLanguage ( long pVal );
__declspec(implementation_key(1313)) IGRFontPtr IGridppReport::GetFont ( );
__declspec(implementation_key(1314)) OLE_COLOR IGridppReport::GetBackColor ( );
__declspec(implementation_key(1315)) void IGridppReport::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(1316)) IGRDetailGridPtr IGridppReport::GetDetailGrid ( );
__declspec(implementation_key(1317)) IGRPageHeaderPtr IGridppReport::GetPageHeader ( );
__declspec(implementation_key(1318)) IGRPageFooterPtr IGridppReport::GetPageFooter ( );
__declspec(implementation_key(1319)) IGRParametersPtr IGridppReport::GetParameters ( );
__declspec(implementation_key(1320)) IGRReportHeadersPtr IGridppReport::GetReportHeaders ( );
__declspec(implementation_key(1321)) IGRReportFootersPtr IGridppReport::GetReportFooters ( );
__declspec(implementation_key(1322)) IGRControlsPtr IGridppReport::GetFloatControls ( );
__declspec(implementation_key(1323)) IGRImageListPtr IGridppReport::GetImageList ( );
__declspec(implementation_key(1324)) IGRPrinterPtr IGridppReport::GetPrinter ( );
__declspec(implementation_key(1325)) IGridppReportPtr IGridppReport::GetParentReport ( );
__declspec(implementation_key(1326)) IGridppReportPtr IGridppReport::GetFiringReport ( );
__declspec(implementation_key(1327)) IGRGraphicsPtr IGridppReport::GetGraphics ( );
__declspec(implementation_key(1328)) IGRUtilityPtr IGridppReport::GetUtility ( );
__declspec(implementation_key(1329)) long IGridppReport::GetPageDivideCount ( );
__declspec(implementation_key(1330)) void IGridppReport::PutPageDivideCount ( long pVal );
__declspec(implementation_key(1331)) double IGridppReport::GetPageDivideSpacing ( );
__declspec(implementation_key(1332)) void IGridppReport::PutPageDivideSpacing ( double pVal );
__declspec(implementation_key(1333)) VARIANT_BOOL IGridppReport::GetPageDivideLine ( );
__declspec(implementation_key(1334)) void IGridppReport::PutPageDivideLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(1335)) VARIANT_BOOL IGridppReport::GetPrintAsDesignPaper ( );
__declspec(implementation_key(1336)) void IGridppReport::PutPrintAsDesignPaper ( VARIANT_BOOL pVal );
__declspec(implementation_key(1337)) VARIANT_BOOL IGridppReport::GetContinuePrint ( );
__declspec(implementation_key(1338)) void IGridppReport::PutContinuePrint ( VARIANT_BOOL pVal );
__declspec(implementation_key(1339)) VARIANT_BOOL IGridppReport::GetMonoPrint ( );
__declspec(implementation_key(1340)) void IGridppReport::PutMonoPrint ( VARIANT_BOOL pVal );
__declspec(implementation_key(1341)) VARIANT_BOOL IGridppReport::GetMirrorMargins ( );
__declspec(implementation_key(1342)) void IGridppReport::PutMirrorMargins ( VARIANT_BOOL pVal );
__declspec(implementation_key(1343)) IGRPicturePtr IGridppReport::GetBackImage ( );
__declspec(implementation_key(1344)) void IGridppReport::PutBackImage ( struct IGRPicture * pVal );
__declspec(implementation_key(1345)) _bstr_t IGridppReport::GetBackImageFile ( );
__declspec(implementation_key(1346)) void IGridppReport::PutBackImageFile ( _bstr_t pVal );
__declspec(implementation_key(1347)) VARIANT_BOOL IGridppReport::GetBackImagePreview ( );
__declspec(implementation_key(1348)) void IGridppReport::PutBackImagePreview ( VARIANT_BOOL pVal );
__declspec(implementation_key(1349)) VARIANT_BOOL IGridppReport::GetBackImagePrint ( );
__declspec(implementation_key(1350)) void IGridppReport::PutBackImagePrint ( VARIANT_BOOL pVal );
__declspec(implementation_key(1351)) IGRPicturePtr IGridppReport::GetWatermark ( );
__declspec(implementation_key(1352)) void IGridppReport::PutWatermark ( struct IGRPicture * pVal );
__declspec(implementation_key(1353)) GRPictureAlignment IGridppReport::GetWatermarkAlignment ( );
__declspec(implementation_key(1354)) void IGridppReport::PutWatermarkAlignment ( GRPictureAlignment pVal );
__declspec(implementation_key(1355)) GRPictureSizeMode IGridppReport::GetWatermarkSizeMode ( );
__declspec(implementation_key(1356)) void IGridppReport::PutWatermarkSizeMode ( GRPictureSizeMode pVal );
__declspec(implementation_key(1357)) _bstr_t IGridppReport::GetConnectionString ( );
__declspec(implementation_key(1358)) void IGridppReport::PutConnectionString ( _bstr_t pVal );
__declspec(implementation_key(1359)) _bstr_t IGridppReport::GetQuerySQL ( );
__declspec(implementation_key(1360)) void IGridppReport::PutQuerySQL ( _bstr_t pVal );
__declspec(implementation_key(1361)) VARIANT_BOOL IGridppReport::GetSkipQuery ( );
__declspec(implementation_key(1362)) void IGridppReport::PutSkipQuery ( VARIANT_BOOL pVal );
__declspec(implementation_key(1363)) _bstr_t IGridppReport::GetXmlTableName ( );
__declspec(implementation_key(1364)) void IGridppReport::PutXmlTableName ( _bstr_t pVal );
__declspec(implementation_key(1365)) GRStorageFormat IGridppReport::GetStorageFormat ( );
__declspec(implementation_key(1366)) void IGridppReport::PutStorageFormat ( GRStorageFormat pVal );
__declspec(implementation_key(1367)) GRTextEncodeMode IGridppReport::GetTextEncode ( );
__declspec(implementation_key(1368)) void IGridppReport::PutTextEncode ( GRTextEncodeMode pVal );
__declspec(implementation_key(1369)) GRUnit IGridppReport::GetUnit ( );
__declspec(implementation_key(1370)) void IGridppReport::PutUnit ( GRUnit pVal );
__declspec(implementation_key(1371)) GRScriptType IGridppReport::GetScriptType ( );
__declspec(implementation_key(1372)) void IGridppReport::PutScriptType ( GRScriptType pVal );
__declspec(implementation_key(1373)) long IGridppReport::GetCodePage ( );
__declspec(implementation_key(1374)) void IGridppReport::PutCodePage ( long pVal );
__declspec(implementation_key(1375)) VARIANT_BOOL IGridppReport::GetAlignToGrid ( );
__declspec(implementation_key(1376)) void IGridppReport::PutAlignToGrid ( VARIANT_BOOL pVal );
__declspec(implementation_key(1377)) VARIANT_BOOL IGridppReport::GetShowGrid ( );
__declspec(implementation_key(1378)) void IGridppReport::PutShowGrid ( VARIANT_BOOL pVal );
__declspec(implementation_key(1379)) long IGridppReport::GetGridColsPerUnit ( );
__declspec(implementation_key(1380)) void IGridppReport::PutGridColsPerUnit ( long pVal );
__declspec(implementation_key(1381)) long IGridppReport::GetGridRowsPerUnit ( );
__declspec(implementation_key(1382)) void IGridppReport::PutGridRowsPerUnit ( long pVal );
__declspec(implementation_key(1383)) _bstr_t IGridppReport::GetTitle ( );
__declspec(implementation_key(1384)) void IGridppReport::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(1385)) _bstr_t IGridppReport::GetAuthor ( );
__declspec(implementation_key(1386)) void IGridppReport::PutAuthor ( _bstr_t pVal );
__declspec(implementation_key(1387)) _bstr_t IGridppReport::GetDescription ( );
__declspec(implementation_key(1388)) void IGridppReport::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(1389)) long IGridppReport::GetShowMoneyDigit ( );
__declspec(implementation_key(1390)) void IGridppReport::PutShowMoneyDigit ( long pVal );
__declspec(implementation_key(1391)) double IGridppReport::GetShowMoneyWidth ( );
__declspec(implementation_key(1392)) void IGridppReport::PutShowMoneyWidth ( double pVal );
__declspec(implementation_key(1393)) OLE_COLOR IGridppReport::GetShowMoneyLineColor ( );
__declspec(implementation_key(1394)) void IGridppReport::PutShowMoneyLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(1395)) OLE_COLOR IGridppReport::GetShowMoneySepLineColor ( );
__declspec(implementation_key(1396)) void IGridppReport::PutShowMoneySepLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(1397)) _bstr_t IGridppReport::GetInitializeScript ( );
__declspec(implementation_key(1398)) void IGridppReport::PutInitializeScript ( _bstr_t pVal );
__declspec(implementation_key(1399)) _bstr_t IGridppReport::GetProcessBeginScript ( );
__declspec(implementation_key(1400)) void IGridppReport::PutProcessBeginScript ( _bstr_t pVal );
__declspec(implementation_key(1401)) _bstr_t IGridppReport::GetProcessEndScript ( );
__declspec(implementation_key(1402)) void IGridppReport::PutProcessEndScript ( _bstr_t pVal );
__declspec(implementation_key(1403)) _bstr_t IGridppReport::GetPageStartScript ( );
__declspec(implementation_key(1404)) void IGridppReport::PutPageStartScript ( _bstr_t pVal );
__declspec(implementation_key(1405)) _bstr_t IGridppReport::GetPageEndScript ( );
__declspec(implementation_key(1406)) void IGridppReport::PutPageEndScript ( _bstr_t pVal );
__declspec(implementation_key(1407)) _bstr_t IGridppReport::GetBeforeSortScript ( );
__declspec(implementation_key(1408)) void IGridppReport::PutBeforeSortScript ( _bstr_t pVal );
__declspec(implementation_key(1409)) _bstr_t IGridppReport::GetExportBeginScript ( );
__declspec(implementation_key(1410)) void IGridppReport::PutExportBeginScript ( _bstr_t pVal );
__declspec(implementation_key(1411)) _bstr_t IGridppReport::GetExportEndScript ( );
__declspec(implementation_key(1412)) void IGridppReport::PutExportEndScript ( _bstr_t pVal );
__declspec(implementation_key(1413)) _bstr_t IGridppReport::GetPrintBeginScript ( );
__declspec(implementation_key(1414)) void IGridppReport::PutPrintBeginScript ( _bstr_t pVal );
__declspec(implementation_key(1415)) _bstr_t IGridppReport::GetPrintEndScript ( );
__declspec(implementation_key(1416)) void IGridppReport::PutPrintEndScript ( _bstr_t pVal );
__declspec(implementation_key(1417)) _bstr_t IGridppReport::GetPrintPageScript ( );
__declspec(implementation_key(1418)) void IGridppReport::PutPrintPageScript ( _bstr_t pVal );
__declspec(implementation_key(1419)) _bstr_t IGridppReport::GetShowPreviewWndScript ( );
__declspec(implementation_key(1420)) void IGridppReport::PutShowPreviewWndScript ( _bstr_t pVal );
__declspec(implementation_key(1421)) VARIANT_BOOL IGridppReport::GetRunning ( );
__declspec(implementation_key(1422)) GRReportDisplayMode IGridppReport::GetDisplayMode ( );
__declspec(implementation_key(1423)) VARIANT_BOOL IGridppReport::GetFirstPass ( );
__declspec(implementation_key(1424)) double IGridppReport::GetPageBlankHeight ( );
__declspec(implementation_key(1425)) VARIANT_BOOL IGridppReport::GetHasFloatControl ( );
__declspec(implementation_key(1426)) VARIANT_BOOL IGridppReport::GetShowProgressUI ( );
__declspec(implementation_key(1427)) void IGridppReport::PutShowProgressUI ( VARIANT_BOOL pVal );
__declspec(implementation_key(1428)) VARIANT_BOOL IGridppReport::GetSummaryAccept ( );
__declspec(implementation_key(1429)) void IGridppReport::PutSummaryAccept ( VARIANT_BOOL pVal );
__declspec(implementation_key(1430)) long IGridppReport::GetMaxGenPages ( );
__declspec(implementation_key(1431)) void IGridppReport::PutMaxGenPages ( long pVal );
__declspec(implementation_key(1432)) VARIANT_BOOL IGridppReport::GetIsBlank ( );
__declspec(implementation_key(1433)) _bstr_t IGridppReport::GetLatestLoadedFile ( );
__declspec(implementation_key(1434)) void IGridppReport::PutLatestLoadedFile ( _bstr_t pVal );
__declspec(implementation_key(1435)) void IGridppReport::PutErrorProcessed ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1436)) VARIANT_BOOL IGridppReport::GetDataLoaded ( );
__declspec(implementation_key(1437)) IGRDetailGridPtr IGridppReport::GetRunningDetailGrid ( );
__declspec(implementation_key(1438)) HRESULT IGridppReport::About ( );
__declspec(implementation_key(1439)) IGRControlPtr IGridppReport::ControlByName ( _bstr_t Name );
__declspec(implementation_key(1440)) IGRColumnPtr IGridppReport::ColumnByName ( _bstr_t Name );
__declspec(implementation_key(1441)) IGRFieldPtr IGridppReport::FieldByName ( _bstr_t Name );
__declspec(implementation_key(1442)) IGRFieldPtr IGridppReport::FieldByDBName ( _bstr_t Name );
__declspec(implementation_key(1443)) IGRParameterPtr IGridppReport::ParameterByName ( _bstr_t Name );
__declspec(implementation_key(1444)) IGRControlPtr IGridppReport::FindFirstControl ( );
__declspec(implementation_key(1445)) IGRControlPtr IGridppReport::FindNextControl ( );
__declspec(implementation_key(1446)) double IGridppReport::PixelsToUnit ( long Pixels );
__declspec(implementation_key(1447)) long IGridppReport::UnitToPixels ( double UnitValue );
__declspec(implementation_key(1448)) double IGridppReport::SystemVarValue ( GRSystemVarType SystemVar );
__declspec(implementation_key(1449)) double IGridppReport::SystemVarValue2 ( GRSystemVarType SystemVar, long GroupIndex );
__declspec(implementation_key(1450)) IGRParameterPtr IGridppReport::AddParameter ( _bstr_t Name, GRParameterDataType DataType );
__declspec(implementation_key(1451)) IGRDetailGridPtr IGridppReport::InsertDetailGrid ( );
__declspec(implementation_key(1452)) IGRPageHeaderPtr IGridppReport::InsertPageHeader ( );
__declspec(implementation_key(1453)) IGRPageFooterPtr IGridppReport::InsertPageFooter ( );
__declspec(implementation_key(1454)) HRESULT IGridppReport::Clear ( );
__declspec(implementation_key(1455)) HRESULT IGridppReport::DeleteDetailGrid ( );
__declspec(implementation_key(1456)) HRESULT IGridppReport::DeletePageHeader ( );
__declspec(implementation_key(1457)) HRESULT IGridppReport::DeletePageFooter ( );
__declspec(implementation_key(1458)) HRESULT IGridppReport::Print ( VARIANT_BOOL ShowPrintDialog );
__declspec(implementation_key(1459)) HRESULT IGridppReport::PrintEx ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowPrintDialog );
__declspec(implementation_key(1460)) HRESULT IGridppReport::PrintPreview ( VARIANT_BOOL ShowModal );
__declspec(implementation_key(1461)) HRESULT IGridppReport::PrintPreviewEx ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowModal, VARIANT_BOOL MaximizeWindow );
__declspec(implementation_key(1462)) VARIANT_BOOL IGridppReport::BeginLoopPrint ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowPrintDialog );
__declspec(implementation_key(1463)) HRESULT IGridppReport::EndLoopPrint ( );
__declspec(implementation_key(1464)) HRESULT IGridppReport::LoopPrint ( );
__declspec(implementation_key(1465)) HRESULT IGridppReport::AbortPrint ( );
__declspec(implementation_key(1466)) VARIANT_BOOL IGridppReport::ExportDirect ( GRExportType ExportType, _bstr_t FileName, VARIANT_BOOL ShowOptionDlg, VARIANT_BOOL DoneOpen );
__declspec(implementation_key(1467)) HRESULT IGridppReport::AbortExport ( );
__declspec(implementation_key(1468)) HRESULT IGridppReport::GenerateDocumentFile ( _bstr_t FileName );
__declspec(implementation_key(1469)) HRESULT IGridppReport::ForceNewPage ( );
__declspec(implementation_key(1470)) HRESULT IGridppReport::Design ( VARIANT_BOOL ShowModal, VARIANT_BOOL MaximizeWindow );
__declspec(implementation_key(1471)) VARIANT_BOOL IGridppReport::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(1472)) VARIANT_BOOL IGridppReport::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(1473)) VARIANT_BOOL IGridppReport::LoadFromURL ( _bstr_t URL );
__declspec(implementation_key(1474)) VARIANT_BOOL IGridppReport::SaveToURL ( _bstr_t URL );
__declspec(implementation_key(1475)) VARIANT_BOOL IGridppReport::LoadFromStr ( _bstr_t data );
__declspec(implementation_key(1476)) _bstr_t IGridppReport::SaveToStr ( );
__declspec(implementation_key(1477)) VARIANT_BOOL IGridppReport::LoadFromVariant ( const _variant_t & Buf );
__declspec(implementation_key(1478)) _variant_t IGridppReport::SaveToVariant ( );
__declspec(implementation_key(1479)) VARIANT_BOOL IGridppReport::LoadDataFromURL ( _bstr_t URL );
__declspec(implementation_key(1480)) VARIANT_BOOL IGridppReport::LoadDataFromURLEx ( _bstr_t DataURL, _bstr_t DataParam );
__declspec(implementation_key(1481)) VARIANT_BOOL IGridppReport::LoadDataFromXML ( _bstr_t XMLData );
__declspec(implementation_key(1482)) _bstr_t IGridppReport::ExtractXMLFromURL ( _bstr_t URL );
__declspec(implementation_key(1483)) _bstr_t IGridppReport::ExtractXMLFromURLEx ( _bstr_t DataURL, _bstr_t DataParam );
__declspec(implementation_key(1484)) HRESULT IGridppReport::LoadBackImageFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1485)) HRESULT IGridppReport::LoadWatermarkFromFile ( _bstr_t PathFile );
__declspec(implementation_key(1486)) HRESULT IGridppReport::PrepareLoadData ( );
__declspec(implementation_key(1487)) HRESULT IGridppReport::CancelLoadData ( );
__declspec(implementation_key(1488)) VARIANT_BOOL IGridppReport::LoadFromMemory ( unsigned char * pData, long ByteCount );
__declspec(implementation_key(1489)) VARIANT_BOOL IGridppReport::SaveToMemory ( OLE_HANDLE * ppData, long * pBytesCount );
__declspec(implementation_key(1490)) HRESULT IGridppReport::LoadBackImageFromMemory ( unsigned char * pBuffer, long BytesCount );
__declspec(implementation_key(1491)) HRESULT IGridppReport::LoadWatermarkFromMemory ( unsigned char * pBuffer, long BytesCount );
__declspec(implementation_key(1492)) VARIANT_BOOL IGridppReport::Register ( _bstr_t SerialNo );
__declspec(implementation_key(1493)) long IGridppReport::GetSharePrintSetupOptions ( );
__declspec(implementation_key(1494)) void IGridppReport::PutSharePrintSetupOptions ( long pVal );
__declspec(implementation_key(1495)) IGRSharePrintSetupObjectPtr IGridppReport::GetSharePrintSetupObject ( );
__declspec(implementation_key(1496)) HRESULT IGridppReport::SharePrintSetupSetOptionEnabled ( GRSharePrintSetupOption Option, VARIANT_BOOL Enabled );
__declspec(implementation_key(1497)) HRESULT IGridppReport::SharePrintSetupEnableAllOptions ( );
__declspec(implementation_key(1498)) HRESULT IGridppReport::SharePrintSetupDisableAllOptions ( );
__declspec(implementation_key(1499)) VARIANT_BOOL IGridppReport::SharePrintSetupGetOptionEnabled ( GRSharePrintSetupOption Option );
__declspec(implementation_key(1500)) double IGridppReport::GetDesignLeftMargin ( );
__declspec(implementation_key(1501)) void IGridppReport::PutDesignLeftMargin ( double pVal );
__declspec(implementation_key(1502)) double IGridppReport::GetDesignRightMargin ( );
__declspec(implementation_key(1503)) void IGridppReport::PutDesignRightMargin ( double pVal );
__declspec(implementation_key(1504)) double IGridppReport::GetDesignTopMargin ( );
__declspec(implementation_key(1505)) void IGridppReport::PutDesignTopMargin ( double pVal );
__declspec(implementation_key(1506)) double IGridppReport::GetDesignBottomMargin ( );
__declspec(implementation_key(1507)) void IGridppReport::PutDesignBottomMargin ( double pVal );
__declspec(implementation_key(1508)) double IGridppReport::GetDesignPaperWidth ( );
__declspec(implementation_key(1509)) void IGridppReport::PutDesignPaperWidth ( double pVal );
__declspec(implementation_key(1510)) double IGridppReport::GetDesignPaperLength ( );
__declspec(implementation_key(1511)) void IGridppReport::PutDesignPaperLength ( double pVal );
__declspec(implementation_key(1512)) GRPaperOrientation IGridppReport::GetDesignPaperOrientation ( );
__declspec(implementation_key(1513)) void IGridppReport::PutDesignPaperOrientation ( GRPaperOrientation pVal );
__declspec(implementation_key(1514)) _bstr_t IGridppReport::GetDesignPaperName ( );
__declspec(implementation_key(1515)) void IGridppReport::PutDesignPaperName ( _bstr_t pVal );
__declspec(implementation_key(1516)) long IGridppReport::GetDesignPaperSize ( );
__declspec(implementation_key(1517)) void IGridppReport::PutDesignPaperSize ( long pVal );
__declspec(implementation_key(1518)) IGRReportHeaderPtr IGridppReport::GetReportHeader ( const _variant_t & Index );
__declspec(implementation_key(1519)) IGRReportFooterPtr IGridppReport::GetReportFooter ( const _variant_t & Index );
__declspec(implementation_key(1520)) long IGridppReport::GetReportHeaderCount ( );
__declspec(implementation_key(1521)) long IGridppReport::GetReportFooterCount ( );
__declspec(implementation_key(1522)) IGRReportHeaderPtr IGridppReport::InsertReportHeader ( );
__declspec(implementation_key(1523)) IGRReportFooterPtr IGridppReport::InsertReportFooter ( );
__declspec(implementation_key(1524)) HRESULT IGridppReport::DeleteReportHeader ( const _variant_t & Index );
__declspec(implementation_key(1525)) HRESULT IGridppReport::DeleteReportFooter ( const _variant_t & Index );
__declspec(implementation_key(1526)) VARIANT_BOOL IGridppReport::Export ( VARIANT_BOOL DoneOpen );
__declspec(implementation_key(1527)) IGRExportOptionPtr IGridppReport::PrepareExport ( GRExportType ExportType );
__declspec(implementation_key(1528)) HRESULT IGridppReport::UnprepareExport ( );
__declspec(implementation_key(1529)) VARIANT_BOOL IGridppReport::PrepareRecordset ( );
__declspec(implementation_key(1530)) HRESULT IGridppReport::CancelRecordset ( );
__declspec(implementation_key(1531)) OLE_HANDLE IGridppReport::Get_SystemImage ( GRSystemImage SystemImage );
__declspec(implementation_key(1532)) OLE_HANDLE IGridppReport::Get_ResHinst ( );
__declspec(implementation_key(1533)) HRESULT IGridppReport::_AttachDesigner ( IDispatch * pDesigner );
__declspec(implementation_key(1534)) HRESULT IGridppReport::_ObjSaveBegin ( );
__declspec(implementation_key(1535)) HRESULT IGridppReport::_ObjSaveEnd ( OLE_HANDLE * ppData, unsigned long * pBytesCount );
__declspec(implementation_key(1536)) HRESULT IGridppReport::_ObjLoadBegin ( unsigned char * pData, unsigned long BytesCount );
__declspec(implementation_key(1537)) HRESULT IGridppReport::_ObjLoadEnd ( );
__declspec(implementation_key(1538)) VARIANT_BOOL IGridppReport::_ObjLoadEof ( );
__declspec(implementation_key(1539)) IGridppReportPtr IGridppReport::_CreateProxyReport ( );
__declspec(implementation_key(1540)) HRESULT IGridppReport::_DestroyProxyReport ( );
__declspec(implementation_key(1541)) HRESULT IGridppReport::_RefreshPrinter ( );
__declspec(implementation_key(1542)) HRESULT IGridppReport::_PullData ( );
__declspec(implementation_key(1543)) OLE_HANDLE IGridppReport::_GetMoneyLabelVarHandle ( );
__declspec(implementation_key(1544)) GRDocType IGridppReport::GetDocType ( );
__declspec(implementation_key(1545)) void IGridppReport::PutDocType ( GRDocType pVal );
__declspec(implementation_key(1546)) VARIANT_BOOL IGridppReport::PrintDocumentData ( struct IGRBinaryObject * pBinaryObject );
__declspec(implementation_key(1547)) IGRBinaryObjectPtr IGridppReport::GenerateDocumentData ( );
__declspec(implementation_key(1548)) GRLockType IGridppReport::GetLock ( );
__declspec(implementation_key(1549)) void IGridppReport::PutLock ( GRLockType pVal );
__declspec(implementation_key(1550)) long IGridppReport::WebRegisterStatus ( );
__declspec(implementation_key(1551)) IGridppReportPtr IGRPrintViewer::GetReport ( );
__declspec(implementation_key(1552)) void IGRPrintViewer::PutReport ( struct IGridppReport * pVal );
__declspec(implementation_key(1553)) long IGRPrintViewer::GetCurPageNo ( );
__declspec(implementation_key(1554)) void IGRPrintViewer::PutCurPageNo ( long pVal );
__declspec(implementation_key(1555)) long IGRPrintViewer::GetPageCount ( );
__declspec(implementation_key(1556)) VARIANT_BOOL IGRPrintViewer::GetRunning ( );
__declspec(implementation_key(1557)) void IGRPrintViewer::PutDefaultToolbarCommand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1558)) void IGRPrintViewer::PutBorderStyle ( GRViewerBorderStyle pstyle );
__declspec(implementation_key(1559)) GRViewerBorderStyle IGRPrintViewer::GetBorderStyle ( );
__declspec(implementation_key(1560)) GRPreviewEditMode IGRPrintViewer::GetEditMode ( );
__declspec(implementation_key(1561)) void IGRPrintViewer::PutEditMode ( GRPreviewEditMode pVal );
__declspec(implementation_key(1562)) long IGRPrintViewer::GetRowPages ( );
__declspec(implementation_key(1563)) void IGRPrintViewer::PutRowPages ( long pVal );
__declspec(implementation_key(1564)) long IGRPrintViewer::GetColPages ( );
__declspec(implementation_key(1565)) void IGRPrintViewer::PutColPages ( long pVal );
__declspec(implementation_key(1566)) long IGRPrintViewer::GetZoomPercent ( );
__declspec(implementation_key(1567)) void IGRPrintViewer::PutZoomPercent ( long pVal );
__declspec(implementation_key(1568)) GRPrintViewMode IGRPrintViewer::GetViewMode ( );
__declspec(implementation_key(1569)) void IGRPrintViewer::PutViewMode ( GRPrintViewMode pVal );
__declspec(implementation_key(1570)) VARIANT_BOOL IGRPrintViewer::GetShowRuler ( );
__declspec(implementation_key(1571)) void IGRPrintViewer::PutShowRuler ( VARIANT_BOOL pVal );
__declspec(implementation_key(1572)) VARIANT_BOOL IGRPrintViewer::GetShowToolbar ( );
__declspec(implementation_key(1573)) void IGRPrintViewer::PutShowToolbar ( VARIANT_BOOL pVal );
__declspec(implementation_key(1574)) GRPrintGenerateStyle IGRPrintViewer::GetGenerateStyle ( );
__declspec(implementation_key(1575)) void IGRPrintViewer::PutGenerateStyle ( GRPrintGenerateStyle pVal );
__declspec(implementation_key(1576)) VARIANT_BOOL IGRPrintViewer::GetShowMarginCorner ( );
__declspec(implementation_key(1577)) void IGRPrintViewer::PutShowMarginCorner ( VARIANT_BOOL pVal );
__declspec(implementation_key(1578)) VARIANT_BOOL IGRPrintViewer::GetSearchable ( );
__declspec(implementation_key(1579)) void IGRPrintViewer::PutSearchable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1580)) VARIANT_BOOL IGRPrintViewer::GetShowBookmark ( );
__declspec(implementation_key(1581)) void IGRPrintViewer::PutShowBookmark ( VARIANT_BOOL pVal );
__declspec(implementation_key(1582)) VARIANT_BOOL IGRPrintViewer::GetShowPrintDlg ( );
__declspec(implementation_key(1583)) void IGRPrintViewer::PutShowPrintDlg ( VARIANT_BOOL pVal );
__declspec(implementation_key(1584)) HRESULT IGRPrintViewer::NextPage ( );
__declspec(implementation_key(1585)) HRESULT IGRPrintViewer::PriorPage ( );
__declspec(implementation_key(1586)) HRESULT IGRPrintViewer::FirstPage ( );
__declspec(implementation_key(1587)) HRESULT IGRPrintViewer::LastPage ( );
__declspec(implementation_key(1588)) HRESULT IGRPrintViewer::Print ( VARIANT_BOOL ShowPrintDialog );
__declspec(implementation_key(1589)) HRESULT IGRPrintViewer::Refresh ( );
__declspec(implementation_key(1590)) HRESULT IGRPrintViewer::Start ( );
__declspec(implementation_key(1591)) HRESULT IGRPrintViewer::Stop ( );
__declspec(implementation_key(1592)) HRESULT IGRPrintViewer::ZoomToHeight ( );
__declspec(implementation_key(1593)) HRESULT IGRPrintViewer::ZoomIn ( );
__declspec(implementation_key(1594)) HRESULT IGRPrintViewer::ZoomOut ( );
__declspec(implementation_key(1595)) HRESULT IGRPrintViewer::ZoomToFit ( );
__declspec(implementation_key(1596)) HRESULT IGRPrintViewer::ZoomToWidth ( );
__declspec(implementation_key(1597)) HRESULT IGRPrintViewer::AddToolbarControl ( GRToolControlType ControlType );
__declspec(implementation_key(1598)) HRESULT IGRPrintViewer::AddToolbarCustomButton ( long BtnID, _bstr_t BtnFileName, _bstr_t TooltipText );
__declspec(implementation_key(1599)) HRESULT IGRPrintViewer::RemoveToolbarControl ( GRToolControlType ControlType );
__declspec(implementation_key(1600)) HRESULT IGRPrintViewer::ResetToolbarContent ( );
__declspec(implementation_key(1601)) HRESULT IGRPrintViewer::UpdateToolbar ( );
__declspec(implementation_key(1602)) VARIANT_BOOL IGRPrintViewer::LoadFromDocumentFile ( _bstr_t FileName );
__declspec(implementation_key(1603)) HRESULT IGRPrintViewer::QuickRefresh ( );
__declspec(implementation_key(1604)) VARIANT_BOOL IGRPrintViewer::Search ( _bstr_t Text, VARIANT_BOOL CaseSensitive, VARIANT_BOOL WholeWord, VARIANT_BOOL ToUp, VARIANT_BOOL FromSelection, VARIANT_BOOL ShowDlg, VARIANT_BOOL ShowMsg );
__declspec(implementation_key(1605)) VARIANT_BOOL IGRPrintViewer::SearchAgain ( VARIANT_BOOL ShowMsg );
__declspec(implementation_key(1606)) HRESULT IGRPrintViewer::DoToolbarCommand ( GRToolControlType ControlType );
__declspec(implementation_key(1607)) HRESULT IGRPrintViewer::UpdateLanguage ( );
__declspec(implementation_key(1608)) HRESULT IGRPrintViewer::UpdateUI ( );
__declspec(implementation_key(1609)) VARIANT_BOOL IGRPrintViewer::GetOptionValue ( GRPrintViewerOption Option );
__declspec(implementation_key(1610)) HRESULT IGRPrintViewer::SetOptionValue ( GRPrintViewerOption Option, VARIANT_BOOL newVal );
__declspec(implementation_key(1611)) IGRColumnTitleCellPtr IGRColumn::GetTitleCell ( );
__declspec(implementation_key(1612)) IGRColumnContentCellPtr IGRColumn::GetContentCell ( );
__declspec(implementation_key(1613)) IGRDetailGridPtr IGRColumn::GetParent ( );
__declspec(implementation_key(1614)) _bstr_t IGRColumn::GetName ( );
__declspec(implementation_key(1615)) void IGRColumn::PutName ( _bstr_t pVal );
__declspec(implementation_key(1616)) VARIANT_BOOL IGRColumn::GetVisible ( );
__declspec(implementation_key(1617)) void IGRColumn::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1618)) double IGRColumn::GetWidth ( );
__declspec(implementation_key(1619)) void IGRColumn::PutWidth ( double pVal );
__declspec(implementation_key(1620)) VARIANT_BOOL IGRColumn::GetFixedWidth ( );
__declspec(implementation_key(1621)) void IGRColumn::PutFixedWidth ( VARIANT_BOOL pVal );
__declspec(implementation_key(1622)) GRLockType IGRColumn::GetLock ( );
__declspec(implementation_key(1623)) void IGRColumn::PutLock ( GRLockType pVal );
__declspec(implementation_key(1624)) IGRColumnPtr IGRColumnCell::GetColumn ( );
__declspec(implementation_key(1625)) _bstr_t IGRColumnCell::GetName ( );
__declspec(implementation_key(1626)) void IGRColumnCell::PutName ( _bstr_t pVal );
__declspec(implementation_key(1627)) VARIANT_BOOL IGRColumnCell::GetWordWrap ( );
__declspec(implementation_key(1628)) void IGRColumnCell::PutWordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(1629)) VARIANT_BOOL IGRColumnCell::GetEndEllipsis ( );
__declspec(implementation_key(1630)) void IGRColumnCell::PutEndEllipsis ( VARIANT_BOOL pVal );
__declspec(implementation_key(1631)) GRTextAlign IGRColumnCell::GetTextAlign ( );
__declspec(implementation_key(1632)) void IGRColumnCell::PutTextAlign ( GRTextAlign pVal );
__declspec(implementation_key(1633)) IGRColumnContentPtr IGRColumnContentCell::GetParent ( );
__declspec(implementation_key(1634)) _bstr_t IGRColumnContentCell::GetDataField ( );
__declspec(implementation_key(1635)) void IGRColumnContentCell::PutDataField ( _bstr_t pVal );
__declspec(implementation_key(1636)) GRLockType IGRColumnContentCell::GetLock ( );
__declspec(implementation_key(1637)) void IGRColumnContentCell::PutLock ( GRLockType pVal );
__declspec(implementation_key(1638)) IGRColumnContentCellPtr IGRColumnContentCells::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1639)) IUnknownPtr IGRColumnContentCells::Get_NewEnum ( );
__declspec(implementation_key(1640)) long IGRColumnContentCells::GetCount ( );
__declspec(implementation_key(1641)) long IGRColumnContentCells::IndexByName ( _bstr_t Name );
__declspec(implementation_key(1642)) IGRColumnContentCellPtr IGRColumnContentCells::ItemAt ( long Index );
__declspec(implementation_key(1643)) IGRColumnPtr IGRColumns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1644)) IUnknownPtr IGRColumns::Get_NewEnum ( );
__declspec(implementation_key(1645)) long IGRColumns::GetCount ( );
__declspec(implementation_key(1646)) IGRColumnPtr IGRColumns::Add ( );
__declspec(implementation_key(1647)) HRESULT IGRColumns::Remove ( const _variant_t & Index );
__declspec(implementation_key(1648)) HRESULT IGRColumns::RemoveAll ( );
__declspec(implementation_key(1649)) long IGRColumns::IndexByName ( _bstr_t Name );
__declspec(implementation_key(1650)) IGRColumnPtr IGRColumns::ItemAt ( long Index );
__declspec(implementation_key(1651)) HRESULT IGRColumns::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(1652)) VARIANT_BOOL IGRColumnTitleCell::GetVisible ( );
__declspec(implementation_key(1653)) void IGRColumnTitleCell::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1654)) VARIANT_BOOL IGRColumnTitleCell::GetGroupTitle ( );
__declspec(implementation_key(1655)) _bstr_t IGRColumnTitleCell::GetText ( );
__declspec(implementation_key(1656)) void IGRColumnTitleCell::PutText ( _bstr_t pVal );
__declspec(implementation_key(1657)) double IGRColumnTitleCell::GetHeight ( );
__declspec(implementation_key(1658)) void IGRColumnTitleCell::PutHeight ( double pVal );
__declspec(implementation_key(1659)) IGRColumnTitlePtr IGRColumnTitleCell::GetParent ( );
__declspec(implementation_key(1660)) IGRColumnTitleCellsPtr IGRColumnTitleCell::GetSubTitles ( );
__declspec(implementation_key(1661)) IGRColumnTitleCellPtr IGRColumnTitleCell::GetSupCell ( );
__declspec(implementation_key(1662)) HRESULT IGRColumnTitleCell::EncloseColumn ( const _variant_t & ColumnIndex );
__declspec(implementation_key(1663)) IGRColumnTitleCellPtr IGRColumnTitleCell::AddSubGroupTitle ( _bstr_t Name, _bstr_t Title );
__declspec(implementation_key(1664)) GRLockType IGRColumnTitleCell::GetLock ( );
__declspec(implementation_key(1665)) void IGRColumnTitleCell::PutLock ( GRLockType pVal );
__declspec(implementation_key(1666)) long IGRColumnTitleCells::GetCount ( );
__declspec(implementation_key(1667)) IGRColumnTitleCellPtr IGRColumnTitleCells::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1668)) IUnknownPtr IGRColumnTitleCells::Get_NewEnum ( );
__declspec(implementation_key(1669)) IGRColumnTitleCellPtr IGRColumnTitleCells::AddGroup ( _bstr_t Name, _bstr_t Title );
__declspec(implementation_key(1670)) HRESULT IGRColumnTitleCells::RemoveGroup ( const _variant_t & Index );
__declspec(implementation_key(1671)) long IGRColumnTitleCells::IndexByName ( _bstr_t Name );
__declspec(implementation_key(1672)) IGRColumnTitleCellPtr IGRColumnTitleCells::ItemAt ( long Index );
__declspec(implementation_key(1673)) HRESULT IGRColumnTitleCells::ChangeItemOrder ( const _variant_t & Index, long NewOrder );
__declspec(implementation_key(1674)) IGRColumnTitleCellsPtr IGRColumnTitle::GetTitleCells ( );
__declspec(implementation_key(1675)) GRRepeatStyle IGRColumnTitle::GetRepeatStyle ( );
__declspec(implementation_key(1676)) void IGRColumnTitle::PutRepeatStyle ( GRRepeatStyle pVal );
__declspec(implementation_key(1677)) GRLockType IGRColumnTitle::GetLock ( );
__declspec(implementation_key(1678)) void IGRColumnTitle::PutLock ( GRLockType pVal );
__declspec(implementation_key(1679)) void IGRDisplayViewer::PutBorderStyle ( GRViewerBorderStyle pstyle );
__declspec(implementation_key(1680)) GRViewerBorderStyle IGRDisplayViewer::GetBorderStyle ( );
__declspec(implementation_key(1681)) long IGRDisplayViewer::GetLeftGap ( );
__declspec(implementation_key(1682)) void IGRDisplayViewer::PutLeftGap ( long pVal );
__declspec(implementation_key(1683)) long IGRDisplayViewer::GetRightGap ( );
__declspec(implementation_key(1684)) void IGRDisplayViewer::PutRightGap ( long pVal );
__declspec(implementation_key(1685)) long IGRDisplayViewer::GetTopGap ( );
__declspec(implementation_key(1686)) void IGRDisplayViewer::PutTopGap ( long pVal );
__declspec(implementation_key(1687)) long IGRDisplayViewer::GetBottomGap ( );
__declspec(implementation_key(1688)) void IGRDisplayViewer::PutBottomGap ( long pVal );
__declspec(implementation_key(1689)) long IGRDisplayViewer::GetRowsPerPage ( );
__declspec(implementation_key(1690)) void IGRDisplayViewer::PutRowsPerPage ( long pVal );
__declspec(implementation_key(1691)) VARIANT_BOOL IGRDisplayViewer::GetShowHeader ( );
__declspec(implementation_key(1692)) void IGRDisplayViewer::PutShowHeader ( VARIANT_BOOL pVal );
__declspec(implementation_key(1693)) VARIANT_BOOL IGRDisplayViewer::GetShowFooter ( );
__declspec(implementation_key(1694)) void IGRDisplayViewer::PutShowFooter ( VARIANT_BOOL pVal );
__declspec(implementation_key(1695)) VARIANT_BOOL IGRDisplayViewer::GetShowToolbar ( );
__declspec(implementation_key(1696)) void IGRDisplayViewer::PutShowToolbar ( VARIANT_BOOL pVal );
__declspec(implementation_key(1697)) VARIANT_BOOL IGRDisplayViewer::GetResortable ( );
__declspec(implementation_key(1698)) void IGRDisplayViewer::PutResortable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1699)) VARIANT_BOOL IGRDisplayViewer::GetResortCaseSensitive ( );
__declspec(implementation_key(1700)) void IGRDisplayViewer::PutResortCaseSensitive ( VARIANT_BOOL pVal );
__declspec(implementation_key(1701)) VARIANT_BOOL IGRDisplayViewer::GetResortDefaultAsc ( );
__declspec(implementation_key(1702)) void IGRDisplayViewer::PutResortDefaultAsc ( VARIANT_BOOL pVal );
__declspec(implementation_key(1703)) VARIANT_BOOL IGRDisplayViewer::GetGridTitle3D ( );
__declspec(implementation_key(1704)) void IGRDisplayViewer::PutGridTitle3D ( VARIANT_BOOL pVal );
__declspec(implementation_key(1705)) VARIANT_BOOL IGRDisplayViewer::GetSearchable ( );
__declspec(implementation_key(1706)) void IGRDisplayViewer::PutSearchable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1707)) VARIANT_BOOL IGRDisplayViewer::GetGridCenterView ( );
__declspec(implementation_key(1708)) void IGRDisplayViewer::PutGridCenterView ( VARIANT_BOOL pVal );
__declspec(implementation_key(1709)) VARIANT_BOOL IGRDisplayViewer::GetGridCanShrink ( );
__declspec(implementation_key(1710)) void IGRDisplayViewer::PutGridCanShrink ( VARIANT_BOOL pVal );
__declspec(implementation_key(1711)) VARIANT_BOOL IGRDisplayViewer::GetResizeToFit ( );
__declspec(implementation_key(1712)) void IGRDisplayViewer::PutResizeToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(1713)) OLE_COLOR IGRDisplayViewer::GetSelectionBackColor ( );
__declspec(implementation_key(1714)) void IGRDisplayViewer::PutSelectionBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(1715)) OLE_COLOR IGRDisplayViewer::GetSelectionForeColor ( );
__declspec(implementation_key(1716)) void IGRDisplayViewer::PutSelectionForeColor ( OLE_COLOR pVal );
__declspec(implementation_key(1717)) VARIANT_BOOL IGRDisplayViewer::GetSelectionFollowScroll ( );
__declspec(implementation_key(1718)) void IGRDisplayViewer::PutSelectionFollowScroll ( VARIANT_BOOL pVal );
__declspec(implementation_key(1719)) VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowHScrollBar ( );
__declspec(implementation_key(1720)) void IGRDisplayViewer::PutAlwaysShowHScrollBar ( VARIANT_BOOL pVal );
__declspec(implementation_key(1721)) VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowVScrollBar ( );
__declspec(implementation_key(1722)) void IGRDisplayViewer::PutAlwaysShowVScrollBar ( VARIANT_BOOL pVal );
__declspec(implementation_key(1723)) OLE_COLOR IGRDisplayViewer::GetBackgroundColor ( );
__declspec(implementation_key(1724)) void IGRDisplayViewer::PutBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(1725)) VARIANT_BOOL IGRDisplayViewer::GetColumnMove ( );
__declspec(implementation_key(1726)) void IGRDisplayViewer::PutColumnMove ( VARIANT_BOOL pVal );
__declspec(implementation_key(1727)) VARIANT_BOOL IGRDisplayViewer::GetColumnResize ( );
__declspec(implementation_key(1728)) void IGRDisplayViewer::PutColumnResize ( VARIANT_BOOL pVal );
__declspec(implementation_key(1729)) VARIANT_BOOL IGRDisplayViewer::GetRowSelection ( );
__declspec(implementation_key(1730)) void IGRDisplayViewer::PutRowSelection ( VARIANT_BOOL pVal );
__declspec(implementation_key(1731)) VARIANT_BOOL IGRDisplayViewer::GetBatchGetRecord ( );
__declspec(implementation_key(1732)) void IGRDisplayViewer::PutBatchGetRecord ( VARIANT_BOOL pVal );
__declspec(implementation_key(1733)) long IGRDisplayViewer::GetBatchWantRecords ( );
__declspec(implementation_key(1734)) void IGRDisplayViewer::PutBatchWantRecords ( long pVal );
__declspec(implementation_key(1735)) long IGRDisplayViewer::GetTotalRecord ( );
__declspec(implementation_key(1736)) void IGRDisplayViewer::PutTotalRecord ( long pVal );
__declspec(implementation_key(1737)) VARIANT_BOOL IGRDisplayViewer::GetBatchFinished ( );
__declspec(implementation_key(1738)) void IGRDisplayViewer::PutBatchFinished ( VARIANT_BOOL pVal );
__declspec(implementation_key(1739)) long IGRDisplayViewer::GetBatchNo ( );
__declspec(implementation_key(1740)) long IGRDisplayViewer::GetBatchStartRecNo ( );
__declspec(implementation_key(1741)) VARIANT_BOOL IGRDisplayViewer::GetRunning ( );
__declspec(implementation_key(1742)) long IGRDisplayViewer::GetRowCount ( );
__declspec(implementation_key(1743)) long IGRDisplayViewer::GetPageCount ( );
__declspec(implementation_key(1744)) void IGRDisplayViewer::PutDefaultToolbarCommand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1745)) IGridppReportPtr IGRDisplayViewer::GetReport ( );
__declspec(implementation_key(1746)) void IGRDisplayViewer::PutReport ( struct IGridppReport * pVal );
__declspec(implementation_key(1747)) VARIANT_BOOL IGRDisplayViewer::GetShowPreviewLine ( );
__declspec(implementation_key(1748)) void IGRDisplayViewer::PutShowPreviewLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(1749)) long IGRDisplayViewer::GetSelRowNo ( );
__declspec(implementation_key(1750)) void IGRDisplayViewer::PutSelRowNo ( long pVal );
__declspec(implementation_key(1751)) long IGRDisplayViewer::GetSelColumnNo ( );
__declspec(implementation_key(1752)) void IGRDisplayViewer::PutSelColumnNo ( long pVal );
__declspec(implementation_key(1753)) _bstr_t IGRDisplayViewer::GetSelColumnName ( );
__declspec(implementation_key(1754)) void IGRDisplayViewer::PutSelColumnName ( _bstr_t pVal );
__declspec(implementation_key(1755)) long IGRDisplayViewer::GetVScrollPos ( );
__declspec(implementation_key(1756)) void IGRDisplayViewer::PutVScrollPos ( long pVal );
__declspec(implementation_key(1757)) long IGRDisplayViewer::GetHScrollPos ( );
__declspec(implementation_key(1758)) void IGRDisplayViewer::PutHScrollPos ( long pVal );
__declspec(implementation_key(1759)) _bstr_t IGRDisplayViewer::GetSortColumns ( );
__declspec(implementation_key(1760)) void IGRDisplayViewer::PutSortColumns ( _bstr_t pVal );
__declspec(implementation_key(1761)) VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowSelection ( );
__declspec(implementation_key(1762)) void IGRDisplayViewer::PutAlwaysShowSelection ( VARIANT_BOOL pVal );
__declspec(implementation_key(1763)) VARIANT_BOOL IGRDisplayViewer::GetToPostColumnLayout ( );
__declspec(implementation_key(1764)) void IGRDisplayViewer::PutToPostColumnLayout ( VARIANT_BOOL pVal );
__declspec(implementation_key(1765)) long IGRDisplayViewer::GetCurPageNo ( );
__declspec(implementation_key(1766)) void IGRDisplayViewer::PutCurPageNo ( long pVal );
__declspec(implementation_key(1767)) HRESULT IGRDisplayViewer::QuickRefresh ( );
__declspec(implementation_key(1768)) HRESULT IGRDisplayViewer::Refresh ( );
__declspec(implementation_key(1769)) HRESULT IGRDisplayViewer::Start ( );
__declspec(implementation_key(1770)) HRESULT IGRDisplayViewer::Stop ( );
__declspec(implementation_key(1771)) IGRControlPtr IGRDisplayViewer::GetControlFromPos ( long xPos, long yPos );
__declspec(implementation_key(1772)) IGRSectionPtr IGRDisplayViewer::GetSectionFromPos ( long xPos, long yPos );
__declspec(implementation_key(1773)) IGRColumnContentCellPtr IGRDisplayViewer::GetContentCellFromPos ( long xPos, long yPos );
__declspec(implementation_key(1774)) IGRColumnTitleCellPtr IGRDisplayViewer::GetTitleCellFromPos ( long xPos, long yPos );
__declspec(implementation_key(1775)) HRESULT IGRDisplayViewer::PostColumnLayout ( );
__declspec(implementation_key(1776)) HRESULT IGRDisplayViewer::ResizeColumnToFitPage ( );
__declspec(implementation_key(1777)) HRESULT IGRDisplayViewer::ResizeColumnToFit ( );
__declspec(implementation_key(1778)) HRESULT IGRDisplayViewer::ResizeColumnToFitText ( );
__declspec(implementation_key(1779)) HRESULT IGRDisplayViewer::NextPage ( );
__declspec(implementation_key(1780)) HRESULT IGRDisplayViewer::PriorPage ( );
__declspec(implementation_key(1781)) HRESULT IGRDisplayViewer::FirstPage ( );
__declspec(implementation_key(1782)) HRESULT IGRDisplayViewer::LastPage ( );
__declspec(implementation_key(1783)) VARIANT_BOOL IGRDisplayViewer::GetColumnVisible ( _bstr_t ColumnName );
__declspec(implementation_key(1784)) HRESULT IGRDisplayViewer::SetColumnVisible ( _bstr_t ColumnName, VARIANT_BOOL Visible );
__declspec(implementation_key(1785)) HRESULT IGRDisplayViewer::UpdateColumnView ( );
__declspec(implementation_key(1786)) HRESULT IGRDisplayViewer::UpdateSelCell ( );
__declspec(implementation_key(1787)) HRESULT IGRDisplayViewer::UpdateSelRow ( );
__declspec(implementation_key(1788)) HRESULT IGRDisplayViewer::UpdateControl ( struct IGRControl * pControl );
__declspec(implementation_key(1789)) HRESULT IGRDisplayViewer::UpdateViewer ( );
__declspec(implementation_key(1790)) HRESULT IGRDisplayViewer::LockUpdate ( );
__declspec(implementation_key(1791)) HRESULT IGRDisplayViewer::UnlockUpdate ( );
__declspec(implementation_key(1792)) _bstr_t IGRDisplayViewer::GetSelRowCellText ( long ColumnIndex );
__declspec(implementation_key(1793)) VARIANT_BOOL IGRDisplayViewer::Search ( _bstr_t Text, VARIANT_BOOL CaseSensitive, VARIANT_BOOL WholeWord, VARIANT_BOOL ToUp, VARIANT_BOOL FromSelection, VARIANT_BOOL ShowDlg, VARIANT_BOOL ShowMsg );
__declspec(implementation_key(1794)) VARIANT_BOOL IGRDisplayViewer::SearchAgain ( VARIANT_BOOL ShowMsg );
__declspec(implementation_key(1795)) HRESULT IGRDisplayViewer::ShowColumnVisibleDlg ( );
__declspec(implementation_key(1796)) HRESULT IGRDisplayViewer::UpdateLanguage ( );
__declspec(implementation_key(1797)) HRESULT IGRDisplayViewer::UpdateUI ( );
__declspec(implementation_key(1798)) HRESULT IGRDisplayViewer::AddToolbarControl ( GRToolControlType2 ControlType );
__declspec(implementation_key(1799)) HRESULT IGRDisplayViewer::AddToolbarCustomButton ( long BtnID, _bstr_t BtnFileName, _bstr_t TooltipText );
__declspec(implementation_key(1800)) HRESULT IGRDisplayViewer::RemoveToolbarControl ( GRToolControlType2 ControlType );
__declspec(implementation_key(1801)) HRESULT IGRDisplayViewer::ResetToolbarContent ( );
__declspec(implementation_key(1802)) HRESULT IGRDisplayViewer::UpdateToolbar ( );
__declspec(implementation_key(1803)) HRESULT IGRDisplayViewer::DoToolbarCommand ( GRToolControlType2 ControlType );
__declspec(implementation_key(1804)) VARIANT_BOOL IGRDisplayViewer::GetOptionValue ( GRDisplayViewerOption Option );
__declspec(implementation_key(1805)) HRESULT IGRDisplayViewer::SetOptionValue ( GRDisplayViewerOption Option, VARIANT_BOOL newVal );
__declspec(implementation_key(1806)) _bstr_t IGRExportOption::GetFileName ( );
__declspec(implementation_key(1807)) void IGRExportOption::PutFileName ( _bstr_t pVal );
__declspec(implementation_key(1808)) GRExportType IGRExportOption::GetExportType ( );
__declspec(implementation_key(1809)) VARIANT_BOOL IGRExportOption::GetMailExportFile ( );
__declspec(implementation_key(1810)) void IGRExportOption::PutMailExportFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1811)) _bstr_t IGRExportOption::GetMailTo ( );
__declspec(implementation_key(1812)) void IGRExportOption::PutMailTo ( _bstr_t pVal );
__declspec(implementation_key(1813)) _bstr_t IGRExportOption::GetMailSubject ( );
__declspec(implementation_key(1814)) void IGRExportOption::PutMailSubject ( _bstr_t pVal );
__declspec(implementation_key(1815)) _bstr_t IGRExportOption::GetMailText ( );
__declspec(implementation_key(1816)) void IGRExportOption::PutMailText ( _bstr_t pVal );
__declspec(implementation_key(1817)) VARIANT_BOOL IGRExportOption::GetAbortShowOptionDlg ( );
__declspec(implementation_key(1818)) void IGRExportOption::PutAbortShowOptionDlg ( VARIANT_BOOL pVal );
__declspec(implementation_key(1819)) VARIANT_BOOL IGRExportOption::GetAbortOpenFile ( );
__declspec(implementation_key(1820)) void IGRExportOption::PutAbortOpenFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1821)) IGRE2CellOptionPtr IGRExportOption::GetAsE2CellOption ( );
__declspec(implementation_key(1822)) IGRE2XLSOptionPtr IGRExportOption::GetAsE2XLSOption ( );
__declspec(implementation_key(1823)) IGRE2TXTOptionPtr IGRExportOption::GetAsE2TXTOption ( );
__declspec(implementation_key(1824)) IGRE2HTMOptionPtr IGRExportOption::GetAsE2HTMOption ( );
__declspec(implementation_key(1825)) IGRE2RTFOptionPtr IGRExportOption::GetAsE2RTFOption ( );
__declspec(implementation_key(1826)) IGRE2PDFOptionPtr IGRExportOption::GetAsE2PDFOption ( );
__declspec(implementation_key(1827)) IGRE2CSVOptionPtr IGRExportOption::GetAsE2CSVOption ( );
__declspec(implementation_key(1828)) IGRE2IMGOptionPtr IGRExportOption::GetAsE2IMGOption ( );
__declspec(implementation_key(1829)) VARIANT_BOOL IGRExportOption::ShowOptionDlg ( );
__declspec(implementation_key(1830)) HRESULT IGRExportOption::_GetFileTextResID ( unsigned long * pExtFileNameID, unsigned long * pExtFileDescID );
__declspec(implementation_key(1831)) VARIANT_BOOL IGRE2CellOption::GetExportPageBreak ( );
__declspec(implementation_key(1832)) void IGRE2CellOption::PutExportPageBreak ( VARIANT_BOOL pVal );
__declspec(implementation_key(1833)) VARIANT_BOOL IGRE2CellOption::GetExportPageHeaderFooter ( );
__declspec(implementation_key(1834)) void IGRE2CellOption::PutExportPageHeaderFooter ( VARIANT_BOOL pVal );
__declspec(implementation_key(1835)) VARIANT_BOOL IGRE2CellOption::GetOnlyExportDetailGrid ( );
__declspec(implementation_key(1836)) void IGRE2CellOption::PutOnlyExportDetailGrid ( VARIANT_BOOL pVal );
__declspec(implementation_key(1837)) VARIANT_BOOL IGRE2CellOption::GetSupressEmptyLines ( );
__declspec(implementation_key(1838)) void IGRE2CellOption::PutSupressEmptyLines ( VARIANT_BOOL pVal );
__declspec(implementation_key(1839)) VARIANT_BOOL IGRE2CellOption::GetColumnAsDetailGrid ( );
__declspec(implementation_key(1840)) void IGRE2CellOption::PutColumnAsDetailGrid ( VARIANT_BOOL pVal );
__declspec(implementation_key(1841)) VARIANT_BOOL IGRE2CellOption::GetOnlyExportPureText ( );
__declspec(implementation_key(1842)) void IGRE2CellOption::PutOnlyExportPureText ( VARIANT_BOOL pVal );
__declspec(implementation_key(1843)) VARIANT_BOOL IGRE2CellOption::GetSameAsPrint ( );
__declspec(implementation_key(1844)) void IGRE2CellOption::PutSameAsPrint ( VARIANT_BOOL pVal );
__declspec(implementation_key(1845)) long IGRE2XLSOption::GetMinColumnWidth ( );
__declspec(implementation_key(1846)) void IGRE2XLSOption::PutMinColumnWidth ( long pVal );
__declspec(implementation_key(1847)) long IGRE2XLSOption::GetMinRowHeight ( );
__declspec(implementation_key(1848)) void IGRE2XLSOption::PutMinRowHeight ( long pVal );
__declspec(implementation_key(1849)) VARIANT_BOOL IGRE2XLSOption::GetExpandRowHeight ( );
__declspec(implementation_key(1850)) void IGRE2XLSOption::PutExpandRowHeight ( VARIANT_BOOL pVal );
__declspec(implementation_key(1851)) long IGRE2XLSOption::GetNewSheetRows ( );
__declspec(implementation_key(1852)) void IGRE2XLSOption::PutNewSheetRows ( long pVal );
__declspec(implementation_key(1853)) VARIANT_BOOL IGRE2XLSOption::GetColumnTitleForbidRepeat ( );
__declspec(implementation_key(1854)) void IGRE2XLSOption::PutColumnTitleForbidRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(1855)) double IGRE2XLSOption::GetPageLeftMargin ( );
__declspec(implementation_key(1856)) void IGRE2XLSOption::PutPageLeftMargin ( double pVal );
__declspec(implementation_key(1857)) double IGRE2XLSOption::GetPageRightMargin ( );
__declspec(implementation_key(1858)) void IGRE2XLSOption::PutPageRightMargin ( double pVal );
__declspec(implementation_key(1859)) double IGRE2XLSOption::GetPageTopMargin ( );
__declspec(implementation_key(1860)) void IGRE2XLSOption::PutPageTopMargin ( double pVal );
__declspec(implementation_key(1861)) double IGRE2XLSOption::GetPageBottomMargin ( );
__declspec(implementation_key(1862)) void IGRE2XLSOption::PutPageBottomMargin ( double pVal );
__declspec(implementation_key(1863)) VARIANT_BOOL IGRE2TXTOption::GetUsingTabChar ( );
__declspec(implementation_key(1864)) void IGRE2TXTOption::PutUsingTabChar ( VARIANT_BOOL pVal );
__declspec(implementation_key(1865)) GRTextEncodeMode IGRE2TXTOption::GetTextEncode ( );
__declspec(implementation_key(1866)) void IGRE2TXTOption::PutTextEncode ( GRTextEncodeMode pVal );
__declspec(implementation_key(1867)) VARIANT_BOOL IGRE2HTMOption::GetMultiPage ( );
__declspec(implementation_key(1868)) void IGRE2HTMOption::PutMultiPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(1869)) _bstr_t IGRE2HTMOption::GetPicturePath ( );
__declspec(implementation_key(1870)) void IGRE2HTMOption::PutPicturePath ( _bstr_t pVal );
__declspec(implementation_key(1871)) VARIANT_BOOL IGRE2HTMOption::GetShowNavLink ( );
__declspec(implementation_key(1872)) void IGRE2HTMOption::PutShowNavLink ( VARIANT_BOOL pVal );
__declspec(implementation_key(1873)) _bstr_t IGRE2HTMOption::GetTitle ( );
__declspec(implementation_key(1874)) void IGRE2HTMOption::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(1875)) _bstr_t IGRE2RTFOption::GetAuthor ( );
__declspec(implementation_key(1876)) void IGRE2RTFOption::PutAuthor ( _bstr_t pVal );
__declspec(implementation_key(1877)) _bstr_t IGRE2RTFOption::GetCreator ( );
__declspec(implementation_key(1878)) void IGRE2RTFOption::PutCreator ( _bstr_t pVal );
__declspec(implementation_key(1879)) _bstr_t IGRE2PDFOption::GetAuthor ( );
__declspec(implementation_key(1880)) void IGRE2PDFOption::PutAuthor ( _bstr_t pVal );
__declspec(implementation_key(1881)) _bstr_t IGRE2PDFOption::GetCreator ( );
__declspec(implementation_key(1882)) void IGRE2PDFOption::PutCreator ( _bstr_t pVal );
__declspec(implementation_key(1883)) _bstr_t IGRE2PDFOption::GetSubject ( );
__declspec(implementation_key(1884)) void IGRE2PDFOption::PutSubject ( _bstr_t pVal );
__declspec(implementation_key(1885)) VARIANT_BOOL IGRE2PDFOption::GetAnsiTextMode ( );
__declspec(implementation_key(1886)) void IGRE2PDFOption::PutAnsiTextMode ( VARIANT_BOOL pVal );
__declspec(implementation_key(1887)) VARIANT_BOOL IGRE2PDFOption::GetAutoShrinkFont ( );
__declspec(implementation_key(1888)) void IGRE2PDFOption::PutAutoShrinkFont ( VARIANT_BOOL pVal );
__declspec(implementation_key(1889)) VARIANT_BOOL IGRE2PDFOption::GetCompressed ( );
__declspec(implementation_key(1890)) void IGRE2PDFOption::PutCompressed ( VARIANT_BOOL pVal );
__declspec(implementation_key(1891)) _bstr_t IGRE2PDFOption::GetProducer ( );
__declspec(implementation_key(1892)) void IGRE2PDFOption::PutProducer ( _bstr_t pVal );
__declspec(implementation_key(1893)) _bstr_t IGRE2PDFOption::GetKeywords ( );
__declspec(implementation_key(1894)) void IGRE2PDFOption::PutKeywords ( _bstr_t pVal );
__declspec(implementation_key(1895)) _bstr_t IGRE2PDFOption::GetOwnerPassword ( );
__declspec(implementation_key(1896)) void IGRE2PDFOption::PutOwnerPassword ( _bstr_t pVal );
__declspec(implementation_key(1897)) _bstr_t IGRE2PDFOption::GetUserPassword ( );
__declspec(implementation_key(1898)) void IGRE2PDFOption::PutUserPassword ( _bstr_t pVal );
__declspec(implementation_key(1899)) VARIANT_BOOL IGRE2PDFOption::GetDocPermission ( GRPDFDocPermission Permission );
__declspec(implementation_key(1900)) HRESULT IGRE2PDFOption::SetDocPermission ( GRPDFDocPermission Permission, VARIANT_BOOL Enabled );
__declspec(implementation_key(1901)) char IGRE2CSVOption::GetDelimiterChar ( );
__declspec(implementation_key(1902)) void IGRE2CSVOption::PutDelimiterChar ( char pVal );
__declspec(implementation_key(1903)) _bstr_t IGRE2CSVOption::GetQuoteText ( );
__declspec(implementation_key(1904)) void IGRE2CSVOption::PutQuoteText ( _bstr_t pVal );
__declspec(implementation_key(1905)) GRTextEncodeMode IGRE2CSVOption::GetTextEncode ( );
__declspec(implementation_key(1906)) void IGRE2CSVOption::PutTextEncode ( GRTextEncodeMode pVal );
__declspec(implementation_key(1907)) GRExportImageType IGRE2IMGOption::GetImageType ( );
__declspec(implementation_key(1908)) void IGRE2IMGOption::PutImageType ( GRExportImageType pVal );
__declspec(implementation_key(1909)) long IGRE2IMGOption::GetDPI ( );
__declspec(implementation_key(1910)) void IGRE2IMGOption::PutDPI ( long pVal );
__declspec(implementation_key(1911)) VARIANT_BOOL IGRE2IMGOption::GetDrawPageBox ( );
__declspec(implementation_key(1912)) void IGRE2IMGOption::PutDrawPageBox ( VARIANT_BOOL pVal );
__declspec(implementation_key(1913)) VARIANT_BOOL IGRE2IMGOption::GetAllInOne ( );
__declspec(implementation_key(1914)) void IGRE2IMGOption::PutAllInOne ( VARIANT_BOOL pVal );
__declspec(implementation_key(1915)) long IGRE2IMGOption::GetVertGap ( );
__declspec(implementation_key(1916)) void IGRE2IMGOption::PutVertGap ( long pVal );
__declspec(implementation_key(1917)) long IGRFreeGrid::GetColumnCount ( );
__declspec(implementation_key(1918)) void IGRFreeGrid::PutColumnCount ( long pVal );
__declspec(implementation_key(1919)) long IGRFreeGrid::GetRowCount ( );
__declspec(implementation_key(1920)) void IGRFreeGrid::PutRowCount ( long pVal );
__declspec(implementation_key(1921)) IGRPenPtr IGRFreeGrid::GetColLinePen ( );
__declspec(implementation_key(1922)) IGRPenPtr IGRFreeGrid::GetRowLinePen ( );
__declspec(implementation_key(1923)) VARIANT_BOOL IGRFreeGrid::GetShowColLine ( );
__declspec(implementation_key(1924)) void IGRFreeGrid::PutShowColLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(1925)) VARIANT_BOOL IGRFreeGrid::GetShowRowLine ( );
__declspec(implementation_key(1926)) void IGRFreeGrid::PutShowRowLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(1927)) VARIANT_BOOL IGRFreeGrid::GetGrowToBottom ( );
__declspec(implementation_key(1928)) void IGRFreeGrid::PutGrowToBottom ( VARIANT_BOOL pVal );
__declspec(implementation_key(1929)) long IGRFreeGrid::GetTitleRows ( );
__declspec(implementation_key(1930)) void IGRFreeGrid::PutTitleRows ( long pVal );
__declspec(implementation_key(1931)) VARIANT_BOOL IGRFreeGrid::GetTitleRepeat ( );
__declspec(implementation_key(1932)) void IGRFreeGrid::PutTitleRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(1933)) IGRFreeGridColumnPtr IGRFreeGrid::ColumnAt ( long ColumnIndex );
__declspec(implementation_key(1934)) IGRFreeGridRowPtr IGRFreeGrid::RowAt ( long RowIndex );
__declspec(implementation_key(1935)) IGRFreeGridCellPtr IGRFreeGrid::CellAt ( long RowIndex, long ColumnIndex );
__declspec(implementation_key(1936)) IGRFreeGridCellPtr IGRFreeGrid::CellByDataName ( _bstr_t DataName );
__declspec(implementation_key(1937)) IGRFreeGridCellPtr IGRFreeGrid::_Cell ( long RowIndex, long ColumnIndex );
__declspec(implementation_key(1938)) IGRFreeGridColumnPtr IGRFreeGrid::_Column ( long ColumnIndex );
__declspec(implementation_key(1939)) IGRFreeGridRowPtr IGRFreeGrid::_Row ( long RowIndex );
__declspec(implementation_key(1940)) GRLockType IGRFreeGrid::GetLock ( );
__declspec(implementation_key(1941)) void IGRFreeGrid::PutLock ( GRLockType pVal );
__declspec(implementation_key(1942)) double IGRFreeGridColumn::GetWidth ( );
__declspec(implementation_key(1943)) void IGRFreeGridColumn::PutWidth ( double pVal );
__declspec(implementation_key(1944)) VARIANT_BOOL IGRFreeGridColumn::GetVisible ( );
__declspec(implementation_key(1945)) void IGRFreeGridColumn::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1946)) _bstr_t IGRFreeGridColumn::GetAlignColumn ( );
__declspec(implementation_key(1947)) void IGRFreeGridColumn::PutAlignColumn ( _bstr_t pVal );
__declspec(implementation_key(1948)) _bstr_t IGRFreeGridColumn::GetAlignColumnEx ( );
__declspec(implementation_key(1949)) void IGRFreeGridColumn::PutAlignColumnEx ( _bstr_t pVal );
__declspec(implementation_key(1950)) GRAlignColumnStyle IGRFreeGridColumn::GetAlignColumnSide ( );
__declspec(implementation_key(1951)) void IGRFreeGridColumn::PutAlignColumnSide ( GRAlignColumnStyle pVal );
__declspec(implementation_key(1952)) VARIANT_BOOL IGRFreeGridColumn::GetLocked ( );
__declspec(implementation_key(1953)) void IGRFreeGridColumn::PutLocked ( VARIANT_BOOL pVal );
__declspec(implementation_key(1954)) VARIANT_BOOL IGRFreeGridColumn::GetFixedWidth ( );
__declspec(implementation_key(1955)) void IGRFreeGridColumn::PutFixedWidth ( VARIANT_BOOL pVal );
__declspec(implementation_key(1956)) IGRFreeGridPtr IGRFreeGridColumn::GetFreeGrid ( );
__declspec(implementation_key(1957)) GRLockType IGRFreeGridColumn::GetLock ( );
__declspec(implementation_key(1958)) void IGRFreeGridColumn::PutLock ( GRLockType pVal );
__declspec(implementation_key(1959)) double IGRFreeGridRow::GetHeight ( );
__declspec(implementation_key(1960)) void IGRFreeGridRow::PutHeight ( double pVal );
__declspec(implementation_key(1961)) VARIANT_BOOL IGRFreeGridRow::GetVisible ( );
__declspec(implementation_key(1962)) void IGRFreeGridRow::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1963)) VARIANT_BOOL IGRFreeGridRow::GetKeepTogether ( );
__declspec(implementation_key(1964)) void IGRFreeGridRow::PutKeepTogether ( VARIANT_BOOL pVal );
__declspec(implementation_key(1965)) VARIANT_BOOL IGRFreeGridRow::GetLocked ( );
__declspec(implementation_key(1966)) void IGRFreeGridRow::PutLocked ( VARIANT_BOOL pVal );
__declspec(implementation_key(1967)) IGRFreeGridPtr IGRFreeGridRow::GetFreeGrid ( );
__declspec(implementation_key(1968)) GRLockType IGRFreeGridRow::GetLock ( );
__declspec(implementation_key(1969)) void IGRFreeGridRow::PutLock ( GRLockType pVal );
#pragma stop_map_region

#pragma pack(pop)
