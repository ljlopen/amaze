// Created by Microsoft (R) C/C++ Compiler Version 14.12.25831.0 (9c937bfc).
//
// f:\w\vs2017\amaze\shipyy\x64\release\gregn.tli
//
// Wrapper implementations for Win32 type library ..\gregn.tlb
// compiler-generated file created 06/01/18 at 13:13:43 - DO NOT EDIT!


//
// dispinterface _IGridppReportEvents wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT _IGridppReportEvents::Initialize ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(2)
inline HRESULT _IGridppReportEvents::FetchRecord ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(3)
inline HRESULT _IGridppReportEvents::BeforePostRecord ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4)
inline HRESULT _IGridppReportEvents::BeforeSort ( _bstr_t SortFields ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)SortFields);
}

#pragma implementation_key(5)
inline HRESULT _IGridppReportEvents::RuntimeError ( long ErrorID, _bstr_t ErrorMsg ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", ErrorID, (BSTR)ErrorMsg);
}

#pragma implementation_key(6)
inline HRESULT _IGridppReportEvents::ProcessBegin ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7)
inline HRESULT _IGridppReportEvents::ProcessEnd ( ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8)
inline HRESULT _IGridppReportEvents::GroupBegin ( struct IGRGroup * pSender ) {
    return _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(9)
inline HRESULT _IGridppReportEvents::GroupEnd ( struct IGRGroup * pSender ) {
    return _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(10)
inline HRESULT _IGridppReportEvents::ProcessRecord ( ) {
    return _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11)
inline HRESULT _IGridppReportEvents::GeneratePagesBegin ( ) {
    return _com_dispatch_method(this, 0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12)
inline HRESULT _IGridppReportEvents::GeneratePagesEnd ( ) {
    return _com_dispatch_method(this, 0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13)
inline HRESULT _IGridppReportEvents::PageProcessRecord ( ) {
    return _com_dispatch_method(this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(14)
inline HRESULT _IGridppReportEvents::PageStart ( ) {
    return _com_dispatch_method(this, 0x24, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(15)
inline HRESULT _IGridppReportEvents::PageEnd ( ) {
    return _com_dispatch_method(this, 0x25, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(16)
inline HRESULT _IGridppReportEvents::SectionFormat ( struct IGRSection * pSender ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(17)
inline HRESULT _IGridppReportEvents::FieldGetDisplayText ( struct IGRField * pSender ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(18)
inline HRESULT _IGridppReportEvents::TextBoxGetDisplayText ( struct IGRTextBox * pSender ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(19)
inline HRESULT _IGridppReportEvents::ControlCustomDraw ( struct IGRControl * pSender, struct IGRGraphics * pGraphics ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", pSender, pGraphics);
}

#pragma implementation_key(20)
inline HRESULT _IGridppReportEvents::ChartRequestData ( struct IGRChart * pSender ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(21)
inline HRESULT _IGridppReportEvents::PrintBegin ( ) {
    return _com_dispatch_method(this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(22)
inline HRESULT _IGridppReportEvents::PrintEnd ( ) {
    return _com_dispatch_method(this, 0x29, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(23)
inline HRESULT _IGridppReportEvents::PrintPage ( long PageNo ) {
    return _com_dispatch_method(this, 0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", PageNo);
}

#pragma implementation_key(24)
inline HRESULT _IGridppReportEvents::PrintAborted ( ) {
    return _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(25)
inline HRESULT _IGridppReportEvents::ExportBegin ( struct IGRExportOption * pOptionObject ) {
    return _com_dispatch_method(this, 0x32, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pOptionObject);
}

#pragma implementation_key(26)
inline HRESULT _IGridppReportEvents::ExportEnd ( struct IGRExportOption * pOptionObject ) {
    return _com_dispatch_method(this, 0x33, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pOptionObject);
}

#pragma implementation_key(27)
inline HRESULT _IGridppReportEvents::ShowPreviewWnd ( struct IGRPrintViewer * pPrintViewer ) {
    return _com_dispatch_method(this, 0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pPrintViewer);
}

#pragma implementation_key(28)
inline HRESULT _IGridppReportEvents::ShowDesignerWnd ( IDispatch * pDesigner ) {
    return _com_dispatch_method(this, 0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pDesigner);
}

#pragma implementation_key(29)
inline HRESULT _IGridppReportEvents::HyperlinkClick ( struct IGRControl * pSender, _bstr_t HyperlinkText, VARIANT_BOOL FromPreviewPage ) {
    return _com_dispatch_method(this, 0x41, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0008\x000b", pSender, (BSTR)HyperlinkText, FromPreviewPage);
}

//
// interface IGRObject wrapper method implementations
//

#pragma implementation_key(30)
inline _bstr_t IGRObject::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(31)
inline void IGRObject::PutTag ( _bstr_t pVal ) {
    HRESULT _hr = put_Tag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(32)
inline HRESULT IGRObject::Assign ( IDispatch * Object ) {
    HRESULT _hr = raw_Assign(Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(33)
inline HRESULT IGRObject::_ObjSave ( ) {
    HRESULT _hr = raw__ObjSave();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(34)
inline HRESULT IGRObject::_ObjLoad ( ) {
    HRESULT _hr = raw__ObjLoad();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRFont wrapper method implementations
//

#pragma implementation_key(35)
inline IFontPtr IGRFont::GetOleFont ( ) {
    struct IFont * _result = 0;
    HRESULT _hr = get_OleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontPtr(_result, false);
}

#pragma implementation_key(36)
inline void IGRFont::PutOleFont ( struct IFont * pVal ) {
    HRESULT _hr = put_OleFont(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline IFontPtr IGRFont::GetUsingOleFont ( ) {
    struct IFont * _result = 0;
    HRESULT _hr = get_UsingOleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFontPtr(_result, false);
}

#pragma implementation_key(38)
inline _bstr_t IGRFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(39)
inline void IGRFont::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline double IGRFont::GetPoint ( ) {
    double _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline void IGRFont::PutPoint ( double pVal ) {
    HRESULT _hr = put_Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(42)
inline long IGRFont::GetCharset ( ) {
    long _result = 0;
    HRESULT _hr = get_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline void IGRFont::PutCharset ( long pVal ) {
    HRESULT _hr = put_Charset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(44)
inline long IGRFont::GetWeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline void IGRFont::PutWeight ( long pVal ) {
    HRESULT _hr = put_Weight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(46)
inline VARIANT_BOOL IGRFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void IGRFont::PutBold ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Bold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline VARIANT_BOOL IGRFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void IGRFont::PutItalic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Italic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline VARIANT_BOOL IGRFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline void IGRFont::PutUnderline ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Underline(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline VARIANT_BOOL IGRFont::GetStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void IGRFont::PutStrikethrough ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Strikethrough(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline IGRFontPtr IGRFont::Clone ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

//
// interface IGRPen wrapper method implementations
//

#pragma implementation_key(55)
inline GRPenStyle IGRPen::GetStyle ( ) {
    GRPenStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline void IGRPen::PutStyle ( GRPenStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(57)
inline double IGRPen::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(58)
inline void IGRPen::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline OLE_COLOR IGRPen::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void IGRPen::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRBorder wrapper method implementations
//

#pragma implementation_key(61)
inline IGRPenPtr IGRBorder::GetPen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(62)
inline GRBorderStyles IGRBorder::GetStyles ( ) {
    GRBorderStyles _result;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline void IGRBorder::PutStyles ( GRBorderStyles pVal ) {
    HRESULT _hr = put_Styles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(64)
inline long IGRBorder::GetInnerIndent ( ) {
    long _result = 0;
    HRESULT _hr = get_InnerIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline void IGRBorder::PutInnerIndent ( long pVal ) {
    HRESULT _hr = put_InnerIndent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(66)
inline IGRPenPtr IGRBorder::GetInnerPen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_InnerPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(67)
inline GRBorderStyles IGRBorder::GetInnerStyles ( ) {
    GRBorderStyles _result;
    HRESULT _hr = get_InnerStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void IGRBorder::PutInnerStyles ( GRBorderStyles pVal ) {
    HRESULT _hr = put_InnerStyles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline VARIANT_BOOL IGRBorder::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void IGRBorder::PutShadow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Shadow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline long IGRBorder::GetShadowWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ShadowWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline void IGRBorder::PutShadowWidth ( long pVal ) {
    HRESULT _hr = put_ShadowWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(73)
inline OLE_COLOR IGRBorder::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(74)
inline void IGRBorder::PutShadowColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ShadowColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRTextFormat wrapper method implementations
//

#pragma implementation_key(75)
inline VARIANT_BOOL IGRTextFormat::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(76)
inline void IGRTextFormat::PutWordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(77)
inline VARIANT_BOOL IGRTextFormat::GetEndEllipsis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EndEllipsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(78)
inline void IGRTextFormat::PutEndEllipsis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EndEllipsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(79)
inline GRTextAlign IGRTextFormat::GetTextAlign ( ) {
    GRTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline void IGRTextFormat::PutTextAlign ( GRTextAlign pVal ) {
    HRESULT _hr = put_TextAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(81)
inline GRTextOrientation IGRTextFormat::GetTextOrientation ( ) {
    GRTextOrientation _result;
    HRESULT _hr = get_TextOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline void IGRTextFormat::PutTextOrientation ( GRTextOrientation pVal ) {
    HRESULT _hr = put_TextOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline double IGRTextFormat::GetTextAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline void IGRTextFormat::PutTextAngle ( double pVal ) {
    HRESULT _hr = put_TextAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline double IGRTextFormat::GetCharacterSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_CharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void IGRTextFormat::PutCharacterSpacing ( double pVal ) {
    HRESULT _hr = put_CharacterSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline double IGRTextFormat::GetLineSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void IGRTextFormat::PutLineSpacing ( double pVal ) {
    HRESULT _hr = put_LineSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline double IGRTextFormat::GetFontWidthRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_FontWidthRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(90)
inline void IGRTextFormat::PutFontWidthRatio ( double pVal ) {
    HRESULT _hr = put_FontWidthRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline long IGRTextFormat::GetFirstCharIndent ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstCharIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void IGRTextFormat::PutFirstCharIndent ( long pVal ) {
    HRESULT _hr = put_FirstCharIndent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline double IGRTextFormat::GetParagraphSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_ParagraphSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void IGRTextFormat::PutParagraphSpacing ( double pVal ) {
    HRESULT _hr = put_ParagraphSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline VARIANT_BOOL IGRTextFormat::GetHtmlTags ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HtmlTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline void IGRTextFormat::PutHtmlTags ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HtmlTags(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline IGRTextFormatPtr IGRTextFormat::Clone ( ) {
    struct IGRTextFormat * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRTextFormatPtr(_result, false);
}

//
// interface IGRChartAxis wrapper method implementations
//

#pragma implementation_key(98)
inline _bstr_t IGRChartAxis::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(99)
inline void IGRChartAxis::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline double IGRChartAxis::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void IGRChartAxis::PutMax ( double pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline double IGRChartAxis::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void IGRChartAxis::PutMin ( double pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline double IGRChartAxis::GetSpace ( ) {
    double _result = 0;
    HRESULT _hr = get_Space(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void IGRChartAxis::PutSpace ( double pVal ) {
    HRESULT _hr = put_Space(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline double IGRChartAxis::GetTextAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void IGRChartAxis::PutTextAngle ( double pVal ) {
    HRESULT _hr = put_TextAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline VARIANT_BOOL IGRChartAxis::GetTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void IGRChartAxis::PutTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline _bstr_t IGRChartAxis::GetTextFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(111)
inline void IGRChartAxis::PutTextFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_TextFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline VARIANT_BOOL IGRChartAxis::GetLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void IGRChartAxis::PutLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline VARIANT_BOOL IGRChartAxis::GetCoordLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CoordLineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline void IGRChartAxis::PutCoordLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CoordLineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(116)
inline IGRPenPtr IGRChartAxis::GetLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(117)
inline IGRPenPtr IGRChartAxis::GetCoordLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_CoordLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(118)
inline long IGRChartAxis::GetMarginBeginWeight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginBeginWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline void IGRChartAxis::PutMarginBeginWeight ( long pVal ) {
    HRESULT _hr = put_MarginBeginWeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline long IGRChartAxis::GetMarginEndWeight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginEndWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void IGRChartAxis::PutMarginEndWeight ( long pVal ) {
    HRESULT _hr = put_MarginEndWeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline long IGRChartAxis::GetScaleCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ScaleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline HRESULT IGRChartAxis::AddCustomScale ( double ScaleVal, _bstr_t Text ) {
    HRESULT _hr = raw_AddCustomScale(ScaleVal, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(124)
inline HRESULT IGRChartAxis::EmptyCustomScale ( ) {
    HRESULT _hr = raw_EmptyCustomScale();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(125)
inline _bstr_t IGRChartAxis::GetScaleText ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetScaleText(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(126)
inline double IGRChartAxis::GetScaleValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = raw_GetScaleValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline HRESULT IGRChartAxis::AddCustomCoordLine ( double ScaleVal, _bstr_t Text, double LineWidth, OLE_COLOR LineColor, GRPenStyle LineStyle ) {
    HRESULT _hr = raw_AddCustomCoordLine(ScaleVal, Text, LineWidth, LineColor, LineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(128)
inline HRESULT IGRChartAxis::EmptyCustomCoordLine ( ) {
    HRESULT _hr = raw_EmptyCustomCoordLine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(129)
inline GRLockType IGRChartAxis::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline void IGRChartAxis::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRChartSeries wrapper method implementations
//

#pragma implementation_key(131)
inline GRChartType IGRChartSeries::GetChartType ( ) {
    GRChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline void IGRChartSeries::PutChartType ( GRChartType pVal ) {
    HRESULT _hr = put_ChartType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline VARIANT_BOOL IGRChartSeries::GetByY2Axis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByY2Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void IGRChartSeries::PutByY2Axis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ByY2Axis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline _bstr_t IGRChartSeries::GetSeriesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(136)
inline void IGRChartSeries::PutSeriesName ( _bstr_t pVal ) {
    HRESULT _hr = put_SeriesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(137)
inline _bstr_t IGRChartSeries::GetXValueField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XValueField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(138)
inline void IGRChartSeries::PutXValueField ( _bstr_t pVal ) {
    HRESULT _hr = put_XValueField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(139)
inline _bstr_t IGRChartSeries::GetYValueField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YValueField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(140)
inline void IGRChartSeries::PutYValueField ( _bstr_t pVal ) {
    HRESULT _hr = put_YValueField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline _bstr_t IGRChartSeries::GetZValueField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ZValueField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(142)
inline void IGRChartSeries::PutZValueField ( _bstr_t pVal ) {
    HRESULT _hr = put_ZValueField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline _bstr_t IGRChartSeries::GetLabelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(144)
inline void IGRChartSeries::PutLabelText ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline double IGRChartSeries::GetLabelTextAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelTextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void IGRChartSeries::PutLabelTextAngle ( double pVal ) {
    HRESULT _hr = put_LabelTextAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline VARIANT_BOOL IGRChartSeries::GetLabelAsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelAsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline void IGRChartSeries::PutLabelAsGroup ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelAsGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline VARIANT_BOOL IGRChartSeries::GetLabelInBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelInBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void IGRChartSeries::PutLabelInBar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelInBar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline _bstr_t IGRChartSeries::GetTooltipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TooltipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(152)
inline void IGRChartSeries::PutTooltipText ( _bstr_t pVal ) {
    HRESULT _hr = put_TooltipText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline _bstr_t IGRChartSeries::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(154)
inline void IGRChartSeries::PutValueFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_ValueFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(155)
inline IGRPenPtr IGRChartSeries::GetBorderPen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_BorderPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(156)
inline OLE_COLOR IGRChartSeries::GetFillColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline void IGRChartSeries::PutFillColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_FillColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline VARIANT_BOOL IGRChartSeries::GetFillColorAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillColorAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void IGRChartSeries::PutFillColorAuto ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillColorAuto(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline GRPointMarkerStyle IGRChartSeries::GetMarkerStyle ( ) {
    GRPointMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void IGRChartSeries::PutMarkerStyle ( GRPointMarkerStyle pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline long IGRChartSeries::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void IGRChartSeries::PutMarkerSize ( long pVal ) {
    HRESULT _hr = put_MarkerSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline OLE_COLOR IGRChartSeries::GetMarkerColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void IGRChartSeries::PutMarkerColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_MarkerColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline VARIANT_BOOL IGRChartSeries::GetMarkerColorAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkerColorAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IGRChartSeries::PutMarkerColorAuto ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MarkerColorAuto(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline IGRPenPtr IGRChartSeries::GetMarkerPen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_MarkerPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(169)
inline VARIANT_BOOL IGRChartSeries::GetMarkerLegendShow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkerLegendShow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(170)
inline void IGRChartSeries::PutMarkerLegendShow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MarkerLegendShow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline GRLockType IGRChartSeries::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void IGRChartSeries::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRChartSeriesCollection wrapper method implementations
//

#pragma implementation_key(173)
inline IGRChartSeriesPtr IGRChartSeriesCollection::GetItem ( const _variant_t & Index ) {
    struct IGRChartSeries * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartSeriesPtr(_result, false);
}

#pragma implementation_key(174)
inline IUnknownPtr IGRChartSeriesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(175)
inline long IGRChartSeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline IGRChartSeriesPtr IGRChartSeriesCollection::Add ( ) {
    struct IGRChartSeries * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartSeriesPtr(_result, false);
}

#pragma implementation_key(177)
inline HRESULT IGRChartSeriesCollection::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(178)
inline HRESULT IGRChartSeriesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(179)
inline long IGRChartSeriesCollection::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline IGRChartSeriesPtr IGRChartSeriesCollection::ItemAt ( long Index ) {
    struct IGRChartSeries * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartSeriesPtr(_result, false);
}

#pragma implementation_key(181)
inline HRESULT IGRChartSeriesCollection::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRParameter wrapper method implementations
//

#pragma implementation_key(182)
inline GRParameterDataType IGRParameter::GetDataType ( ) {
    GRParameterDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline void IGRParameter::PutDataType ( GRParameterDataType pVal ) {
    HRESULT _hr = put_DataType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(184)
inline _bstr_t IGRParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(185)
inline void IGRParameter::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(186)
inline _variant_t IGRParameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(187)
inline void IGRParameter::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline _bstr_t IGRParameter::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline void IGRParameter::PutFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(190)
inline long IGRParameter::GetAsInteger ( ) {
    long _result = 0;
    HRESULT _hr = get_AsInteger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void IGRParameter::PutAsInteger ( long pVal ) {
    HRESULT _hr = put_AsInteger(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline double IGRParameter::GetAsFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_AsFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void IGRParameter::PutAsFloat ( double pVal ) {
    HRESULT _hr = put_AsFloat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(194)
inline _bstr_t IGRParameter::GetAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(195)
inline void IGRParameter::PutAsString ( _bstr_t pVal ) {
    HRESULT _hr = put_AsString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(196)
inline VARIANT_BOOL IGRParameter::GetAsBoolean ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBoolean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void IGRParameter::PutAsBoolean ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AsBoolean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline DATE IGRParameter::GetAsDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_AsDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void IGRParameter::PutAsDateTime ( DATE pVal ) {
    HRESULT _hr = put_AsDateTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline _bstr_t IGRParameter::GetDisplayText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(201)
inline VARIANT_BOOL IGRParameter::GetIsNull ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNull(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline HRESULT IGRParameter::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline GRLockType IGRParameter::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void IGRParameter::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRParameters wrapper method implementations
//

#pragma implementation_key(205)
inline IGRParameterPtr IGRParameters::GetItem ( const _variant_t & Index ) {
    struct IGRParameter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParameterPtr(_result, false);
}

#pragma implementation_key(206)
inline IUnknownPtr IGRParameters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(207)
inline long IGRParameters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline IGRParameterPtr IGRParameters::Add ( ) {
    struct IGRParameter * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParameterPtr(_result, false);
}

#pragma implementation_key(209)
inline HRESULT IGRParameters::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(210)
inline HRESULT IGRParameters::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(211)
inline long IGRParameters::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline IGRParameterPtr IGRParameters::ItemAt ( long Index ) {
    struct IGRParameter * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParameterPtr(_result, false);
}

#pragma implementation_key(213)
inline HRESULT IGRParameters::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRPrinter wrapper method implementations
//

#pragma implementation_key(214)
inline GRPrintRangeType IGRPrinter::GetPrintRangeType ( ) {
    GRPrintRangeType _result;
    HRESULT _hr = get_PrintRangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline void IGRPrinter::PutPrintRangeType ( GRPrintRangeType pVal ) {
    HRESULT _hr = put_PrintRangeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline GRPrintPageType IGRPrinter::GetPrintPageType ( ) {
    GRPrintPageType _result;
    HRESULT _hr = get_PrintPageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline void IGRPrinter::PutPrintPageType ( GRPrintPageType pVal ) {
    HRESULT _hr = put_PrintPageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline _bstr_t IGRPrinter::GetSelectionPrintPages ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelectionPrintPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(219)
inline void IGRPrinter::PutSelectionPrintPages ( _bstr_t pVal ) {
    HRESULT _hr = put_SelectionPrintPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(220)
inline long IGRPrinter::GetPageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(221)
inline void IGRPrinter::PutPageCount ( long pVal ) {
    HRESULT _hr = put_PageCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(222)
inline long IGRPrinter::GetCurPageNo ( ) {
    long _result = 0;
    HRESULT _hr = get_CurPageNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(223)
inline void IGRPrinter::PutCurPageNo ( long pVal ) {
    HRESULT _hr = put_CurPageNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline long IGRPrinter::GetCopies ( ) {
    long _result = 0;
    HRESULT _hr = get_Copies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void IGRPrinter::PutCopies ( long pVal ) {
    HRESULT _hr = put_Copies(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline VARIANT_BOOL IGRPrinter::GetCollate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline void IGRPrinter::PutCollate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Collate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(228)
inline GRDuplexKind IGRPrinter::GetDuplex ( ) {
    GRDuplexKind _result;
    HRESULT _hr = get_Duplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(229)
inline void IGRPrinter::PutDuplex ( GRDuplexKind pVal ) {
    HRESULT _hr = put_Duplex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(230)
inline double IGRPrinter::GetLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline void IGRPrinter::PutLeftMargin ( double pVal ) {
    HRESULT _hr = put_LeftMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(232)
inline double IGRPrinter::GetRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline void IGRPrinter::PutRightMargin ( double pVal ) {
    HRESULT _hr = put_RightMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline double IGRPrinter::GetTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline void IGRPrinter::PutTopMargin ( double pVal ) {
    HRESULT _hr = put_TopMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline double IGRPrinter::GetBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline void IGRPrinter::PutBottomMargin ( double pVal ) {
    HRESULT _hr = put_BottomMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline double IGRPrinter::GetPaperWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(239)
inline void IGRPrinter::PutPaperWidth ( double pVal ) {
    HRESULT _hr = put_PaperWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline double IGRPrinter::GetPaperLength ( ) {
    double _result = 0;
    HRESULT _hr = get_PaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline void IGRPrinter::PutPaperLength ( double pVal ) {
    HRESULT _hr = put_PaperLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(242)
inline GRPaperOrientation IGRPrinter::GetPaperOrientation ( ) {
    GRPaperOrientation _result;
    HRESULT _hr = get_PaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline void IGRPrinter::PutPaperOrientation ( GRPaperOrientation pVal ) {
    HRESULT _hr = put_PaperOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(244)
inline long IGRPrinter::GetPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline void IGRPrinter::PutPaperSize ( long pVal ) {
    HRESULT _hr = put_PaperSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline GRPaperKind IGRPrinter::GetPaperKind ( ) {
    GRPaperKind _result;
    HRESULT _hr = get_PaperKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline void IGRPrinter::PutPaperKind ( GRPaperKind pVal ) {
    HRESULT _hr = put_PaperKind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline _bstr_t IGRPrinter::GetPaperName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PaperName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(249)
inline void IGRPrinter::PutPaperName ( _bstr_t pVal ) {
    HRESULT _hr = put_PaperName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline _bstr_t IGRPrinter::GetPrinterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(251)
inline void IGRPrinter::PutPrinterName ( _bstr_t pVal ) {
    HRESULT _hr = put_PrinterName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline GRPaperSourceKind IGRPrinter::GetPaperSource ( ) {
    GRPaperSourceKind _result;
    HRESULT _hr = get_PaperSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void IGRPrinter::PutPaperSource ( GRPaperSourceKind pVal ) {
    HRESULT _hr = put_PaperSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline double IGRPrinter::GetPrintOffsetX ( ) {
    double _result = 0;
    HRESULT _hr = get_PrintOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void IGRPrinter::PutPrintOffsetX ( double pVal ) {
    HRESULT _hr = put_PrintOffsetX(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline double IGRPrinter::GetPrintOffsetY ( ) {
    double _result = 0;
    HRESULT _hr = get_PrintOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void IGRPrinter::PutPrintOffsetY ( double pVal ) {
    HRESULT _hr = put_PrintOffsetY(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline VARIANT_BOOL IGRPrinter::GetPrintOffsetSaveToLocal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintOffsetSaveToLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void IGRPrinter::PutPrintOffsetSaveToLocal ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintOffsetSaveToLocal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline GRSheetPages IGRPrinter::GetSheetPages ( ) {
    GRSheetPages _result;
    HRESULT _hr = get_SheetPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void IGRPrinter::PutSheetPages ( GRSheetPages pVal ) {
    HRESULT _hr = put_SheetPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline long IGRPrinter::GetSheetPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_SheetPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void IGRPrinter::PutSheetPaperSize ( long pVal ) {
    HRESULT _hr = put_SheetPaperSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline VARIANT_BOOL IGRPrinter::GetCanCollate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanCollate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline VARIANT_BOOL IGRPrinter::GetCanDuplex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanDuplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline VARIANT_BOOL IGRPrinter::GetOnline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Online(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline VARIANT_BOOL IGRPrinter::GetSupportCustomPaper ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportCustomPaper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline double IGRPrinter::GetDesignLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignLeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void IGRPrinter::PutDesignLeftMargin ( double pVal ) {
    HRESULT _hr = put_DesignLeftMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline double IGRPrinter::GetDesignRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignRightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void IGRPrinter::PutDesignRightMargin ( double pVal ) {
    HRESULT _hr = put_DesignRightMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline double IGRPrinter::GetDesignTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignTopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline void IGRPrinter::PutDesignTopMargin ( double pVal ) {
    HRESULT _hr = put_DesignTopMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(274)
inline double IGRPrinter::GetDesignBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignBottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline void IGRPrinter::PutDesignBottomMargin ( double pVal ) {
    HRESULT _hr = put_DesignBottomMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline double IGRPrinter::GetDesignPaperWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignPaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline void IGRPrinter::PutDesignPaperWidth ( double pVal ) {
    HRESULT _hr = put_DesignPaperWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(278)
inline double IGRPrinter::GetDesignPaperLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignPaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void IGRPrinter::PutDesignPaperLength ( double pVal ) {
    HRESULT _hr = put_DesignPaperLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline GRPaperOrientation IGRPrinter::GetDesignPaperOrientation ( ) {
    GRPaperOrientation _result;
    HRESULT _hr = get_DesignPaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void IGRPrinter::PutDesignPaperOrientation ( GRPaperOrientation pVal ) {
    HRESULT _hr = put_DesignPaperOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline GRPaperSourceKind IGRPrinter::GetDesignPaperSource ( ) {
    GRPaperSourceKind _result;
    HRESULT _hr = get_DesignPaperSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void IGRPrinter::PutDesignPaperSource ( GRPaperSourceKind pVal ) {
    HRESULT _hr = put_DesignPaperSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline GRCollateKind IGRPrinter::GetDesignPrintCollate ( ) {
    GRCollateKind _result;
    HRESULT _hr = get_DesignPrintCollate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void IGRPrinter::PutDesignPrintCollate ( GRCollateKind pVal ) {
    HRESULT _hr = put_DesignPrintCollate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(286)
inline GRDuplexKind IGRPrinter::GetDesignPrintDuplex ( ) {
    GRDuplexKind _result;
    HRESULT _hr = get_DesignPrintDuplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void IGRPrinter::PutDesignPrintDuplex ( GRDuplexKind pVal ) {
    HRESULT _hr = put_DesignPrintDuplex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline _bstr_t IGRPrinter::GetDesignPaperName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DesignPaperName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(289)
inline void IGRPrinter::PutDesignPaperName ( _bstr_t pVal ) {
    HRESULT _hr = put_DesignPaperName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline long IGRPrinter::GetDesignPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DesignPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void IGRPrinter::PutDesignPaperSize ( long pVal ) {
    HRESULT _hr = put_DesignPaperSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline GRPaperKind IGRPrinter::GetDesignPaperKind ( ) {
    GRPaperKind _result;
    HRESULT _hr = get_DesignPaperKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void IGRPrinter::PutDesignPaperKind ( GRPaperKind pVal ) {
    HRESULT _hr = put_DesignPaperKind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline _bstr_t IGRPrinter::GetDesignPrinterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DesignPrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(295)
inline void IGRPrinter::PutDesignPrinterName ( _bstr_t pVal ) {
    HRESULT _hr = put_DesignPrinterName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(296)
inline VARIANT_BOOL IGRPrinter::PrintDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline VARIANT_BOOL IGRPrinter::PrinterSetupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrinterSetupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline VARIANT_BOOL IGRPrinter::PageSetupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PageSetupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline HRESULT IGRPrinter::_OpenPrinter ( ) {
    HRESULT _hr = raw__OpenPrinter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(300)
inline HRESULT IGRPrinter::_ClosePrinter ( ) {
    HRESULT _hr = raw__ClosePrinter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRDateTime wrapper method implementations
//

#pragma implementation_key(301)
inline long IGRDateTime::GetYear ( ) {
    long _result = 0;
    HRESULT _hr = get_Year(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline long IGRDateTime::GetMonth ( ) {
    long _result = 0;
    HRESULT _hr = get_Month(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline long IGRDateTime::GetDay ( ) {
    long _result = 0;
    HRESULT _hr = get_Day(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline long IGRDateTime::GetHour ( ) {
    long _result = 0;
    HRESULT _hr = get_Hour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline long IGRDateTime::GetMinute ( ) {
    long _result = 0;
    HRESULT _hr = get_Minute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline long IGRDateTime::GetSecond ( ) {
    long _result = 0;
    HRESULT _hr = get_Second(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline long IGRDateTime::GetDayOfWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_DayOfWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline long IGRDateTime::GetDayOfYear ( ) {
    long _result = 0;
    HRESULT _hr = get_DayOfYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline double IGRDateTime::GetAsFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_AsFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void IGRDateTime::PutAsFloat ( double pVal ) {
    HRESULT _hr = put_AsFloat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline HRESULT IGRDateTime::ValueFromDate ( long Year, long Month, long Day ) {
    HRESULT _hr = raw_ValueFromDate(Year, Month, Day);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(312)
inline HRESULT IGRDateTime::ValueFromDateTime ( long Year, long Month, long Day, long Hour, long Minute, long Second ) {
    HRESULT _hr = raw_ValueFromDateTime(Year, Month, Day, Hour, Minute, Second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(313)
inline _bstr_t IGRDateTime::Format ( _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Format(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IGRSharePrintSetupObject wrapper method implementations
//

#pragma implementation_key(314)
inline double IGRSharePrintSetupObject::GetLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void IGRSharePrintSetupObject::PutLeftMargin ( double pVal ) {
    HRESULT _hr = put_LeftMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline double IGRSharePrintSetupObject::GetRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void IGRSharePrintSetupObject::PutRightMargin ( double pVal ) {
    HRESULT _hr = put_RightMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline double IGRSharePrintSetupObject::GetTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void IGRSharePrintSetupObject::PutTopMargin ( double pVal ) {
    HRESULT _hr = put_TopMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline double IGRSharePrintSetupObject::GetBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void IGRSharePrintSetupObject::PutBottomMargin ( double pVal ) {
    HRESULT _hr = put_BottomMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline double IGRSharePrintSetupObject::GetPaperWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void IGRSharePrintSetupObject::PutPaperWidth ( double pVal ) {
    HRESULT _hr = put_PaperWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline double IGRSharePrintSetupObject::GetPaperLength ( ) {
    double _result = 0;
    HRESULT _hr = get_PaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void IGRSharePrintSetupObject::PutPaperLength ( double pVal ) {
    HRESULT _hr = put_PaperLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline GRPaperOrientation IGRSharePrintSetupObject::GetPaperOrientation ( ) {
    GRPaperOrientation _result;
    HRESULT _hr = get_PaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline void IGRSharePrintSetupObject::PutPaperOrientation ( GRPaperOrientation pVal ) {
    HRESULT _hr = put_PaperOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline long IGRSharePrintSetupObject::GetPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void IGRSharePrintSetupObject::PutPaperSize ( long pVal ) {
    HRESULT _hr = put_PaperSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline _bstr_t IGRSharePrintSetupObject::GetPaperName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PaperName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(331)
inline void IGRSharePrintSetupObject::PutPaperName ( _bstr_t pVal ) {
    HRESULT _hr = put_PaperName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline _bstr_t IGRSharePrintSetupObject::GetPrinterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(333)
inline void IGRSharePrintSetupObject::PutPrinterName ( _bstr_t pVal ) {
    HRESULT _hr = put_PrinterName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline GRPaperSourceKind IGRSharePrintSetupObject::GetPaperSource ( ) {
    GRPaperSourceKind _result;
    HRESULT _hr = get_PaperSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void IGRSharePrintSetupObject::PutPaperSource ( GRPaperSourceKind pVal ) {
    HRESULT _hr = put_PaperSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline GRUnit IGRSharePrintSetupObject::GetUnit ( ) {
    GRUnit _result;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void IGRSharePrintSetupObject::PutUnit ( GRUnit pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline GRPaperKind IGRSharePrintSetupObject::GetPaperKind ( ) {
    GRPaperKind _result;
    HRESULT _hr = get_PaperKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void IGRSharePrintSetupObject::PutPaperKind ( GRPaperKind pVal ) {
    HRESULT _hr = put_PaperKind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline VARIANT_BOOL IGRSharePrintSetupObject::PrintDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline VARIANT_BOOL IGRSharePrintSetupObject::PrinterSetupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrinterSetupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(342)
inline VARIANT_BOOL IGRSharePrintSetupObject::PageSetupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PageSetupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _IGRDisplayViewerEvents wrapper method implementations
//

#pragma implementation_key(343)
inline HRESULT _IGRDisplayViewerEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(344)
inline HRESULT _IGRDisplayViewerEvents::DblClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(345)
inline HRESULT _IGRDisplayViewerEvents::KeyDown ( GRShiftStates Shift, long Key ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Shift, Key);
}

#pragma implementation_key(346)
inline HRESULT _IGRDisplayViewerEvents::KeyPress ( char Key ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0011", Key);
}

#pragma implementation_key(347)
inline HRESULT _IGRDisplayViewerEvents::KeyUp ( GRShiftStates Shift, long Key ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Shift, Key);
}

#pragma implementation_key(348)
inline HRESULT _IGRDisplayViewerEvents::MouseDown ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, xPos, yPos);
}

#pragma implementation_key(349)
inline HRESULT _IGRDisplayViewerEvents::MouseUp ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, xPos, yPos);
}

#pragma implementation_key(350)
inline HRESULT _IGRDisplayViewerEvents::MouseMove ( GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Shift, xPos, yPos);
}

#pragma implementation_key(351)
inline HRESULT _IGRDisplayViewerEvents::ControlClick ( struct IGRControl * pSender ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(352)
inline HRESULT _IGRDisplayViewerEvents::ControlDblClick ( struct IGRControl * pSender ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(353)
inline HRESULT _IGRDisplayViewerEvents::SectionClick ( struct IGRSection * pSender ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(354)
inline HRESULT _IGRDisplayViewerEvents::SectionDblClick ( struct IGRSection * pSender ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(355)
inline HRESULT _IGRDisplayViewerEvents::ContentCellClick ( struct IGRColumnContentCell * pSender ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(356)
inline HRESULT _IGRDisplayViewerEvents::ContentCellDblClick ( struct IGRColumnContentCell * pSender ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(357)
inline HRESULT _IGRDisplayViewerEvents::TitleCellClick ( struct IGRColumnTitleCell * pSender ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(358)
inline HRESULT _IGRDisplayViewerEvents::TitleCellDblClick ( struct IGRColumnTitleCell * pSender ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSender);
}

#pragma implementation_key(359)
inline HRESULT _IGRDisplayViewerEvents::ChartClickSeries ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pSender, SeriesIndex, GroupIndex);
}

#pragma implementation_key(360)
inline HRESULT _IGRDisplayViewerEvents::ChartDblClickSeries ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pSender, SeriesIndex, GroupIndex);
}

#pragma implementation_key(361)
inline HRESULT _IGRDisplayViewerEvents::ChartClickLegend ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pSender, SeriesIndex, GroupIndex);
}

#pragma implementation_key(362)
inline HRESULT _IGRDisplayViewerEvents::ChartDblClickLegend ( struct IGRChart * pSender, long SeriesIndex, long GroupIndex ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pSender, SeriesIndex, GroupIndex);
}

#pragma implementation_key(363)
inline HRESULT _IGRDisplayViewerEvents::ColumnLayoutChange ( ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(364)
inline HRESULT _IGRDisplayViewerEvents::SelectionCellChange ( long OldRow, long OldCol ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", OldRow, OldCol);
}

#pragma implementation_key(365)
inline HRESULT _IGRDisplayViewerEvents::StatusChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(366)
inline HRESULT _IGRDisplayViewerEvents::CloseButtonClick ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(367)
inline HRESULT _IGRDisplayViewerEvents::CustomButtonClick ( long BtnID ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", BtnID);
}

#pragma implementation_key(368)
inline HRESULT _IGRDisplayViewerEvents::ToolbarCommandClick ( GRToolControlType2 ControlType ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ControlType);
}

#pragma implementation_key(369)
inline HRESULT _IGRDisplayViewerEvents::BatchFetchRecord ( ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _IGRPrintViewerEvents wrapper method implementations
//

#pragma implementation_key(370)
inline HRESULT _IGRPrintViewerEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(371)
inline HRESULT _IGRPrintViewerEvents::DblClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(372)
inline HRESULT _IGRPrintViewerEvents::KeyDown ( GRShiftStates Shift, long Key ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Shift, Key);
}

#pragma implementation_key(373)
inline HRESULT _IGRPrintViewerEvents::KeyPress ( char Key ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0011", Key);
}

#pragma implementation_key(374)
inline HRESULT _IGRPrintViewerEvents::KeyUp ( GRShiftStates Shift, long Key ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Shift, Key);
}

#pragma implementation_key(375)
inline HRESULT _IGRPrintViewerEvents::MouseDown ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, xPos, yPos);
}

#pragma implementation_key(376)
inline HRESULT _IGRPrintViewerEvents::MouseUp ( GRMouseButton Button, GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, xPos, yPos);
}

#pragma implementation_key(377)
inline HRESULT _IGRPrintViewerEvents::MouseMove ( GRShiftStates Shift, long xPos, long yPos ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Shift, xPos, yPos);
}

#pragma implementation_key(378)
inline HRESULT _IGRPrintViewerEvents::CurPageChange ( long NewCurPageNo ) {
    return _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewCurPageNo);
}

#pragma implementation_key(379)
inline HRESULT _IGRPrintViewerEvents::StatusChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(380)
inline HRESULT _IGRPrintViewerEvents::RulerClick ( VARIANT_BOOL IsHorzRuler ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", IsHorzRuler);
}

#pragma implementation_key(381)
inline HRESULT _IGRPrintViewerEvents::RulerDblClick ( VARIANT_BOOL IsHorzRuler ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", IsHorzRuler);
}

#pragma implementation_key(382)
inline HRESULT _IGRPrintViewerEvents::PageClick ( ) {
    return _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(383)
inline HRESULT _IGRPrintViewerEvents::PageDblClick ( ) {
    return _com_dispatch_method(this, 0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(384)
inline HRESULT _IGRPrintViewerEvents::CloseButtonClick ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(385)
inline HRESULT _IGRPrintViewerEvents::CustomButtonClick ( long BtnID ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", BtnID);
}

#pragma implementation_key(386)
inline HRESULT _IGRPrintViewerEvents::ToolbarCommandClick ( GRToolControlType ControlType ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ControlType);
}

//
// interface IGRGroup wrapper method implementations
//

#pragma implementation_key(387)
inline IGRDetailGridPtr IGRGroup::GetParent ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(388)
inline IGRGroupHeaderPtr IGRGroup::GetHeader ( ) {
    struct IGRGroupHeader * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupHeaderPtr(_result, false);
}

#pragma implementation_key(389)
inline IGRGroupFooterPtr IGRGroup::GetFooter ( ) {
    struct IGRGroupFooter * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupFooterPtr(_result, false);
}

#pragma implementation_key(390)
inline _bstr_t IGRGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(391)
inline void IGRGroup::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(392)
inline _bstr_t IGRGroup::GetByFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ByFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(393)
inline void IGRGroup::PutByFields ( _bstr_t pVal ) {
    HRESULT _hr = put_ByFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(394)
inline VARIANT_BOOL IGRGroup::GetPageGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void IGRGroup::PutPageGroup ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline long IGRGroup::GetLimitsPerPage ( ) {
    long _result = 0;
    HRESULT _hr = get_LimitsPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void IGRGroup::PutLimitsPerPage ( long pVal ) {
    HRESULT _hr = put_LimitsPerPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline _bstr_t IGRGroup::GetSortSummaryBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SortSummaryBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(399)
inline void IGRGroup::PutSortSummaryBox ( _bstr_t pVal ) {
    HRESULT _hr = put_SortSummaryBox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline VARIANT_BOOL IGRGroup::GetSortAsc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortAsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline void IGRGroup::PutSortAsc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SortAsc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline _bstr_t IGRGroup::GetGroupBeginScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupBeginScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(403)
inline void IGRGroup::PutGroupBeginScript ( _bstr_t pVal ) {
    HRESULT _hr = put_GroupBeginScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline _bstr_t IGRGroup::GetGroupEndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupEndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline void IGRGroup::PutGroupEndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_GroupEndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline IGRRecordsetPtr IGRGroup::Get_Dataset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = get__Dataset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(407)
inline HRESULT IGRGroup::_BeginOneGroup ( ) {
    HRESULT _hr = raw__BeginOneGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(408)
inline HRESULT IGRGroup::_EndOneGroup ( ) {
    HRESULT _hr = raw__EndOneGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(409)
inline HRESULT IGRGroup::_ProcessGroupRecord ( ) {
    HRESULT _hr = raw__ProcessGroupRecord();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(410)
inline GRLockType IGRGroup::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void IGRGroup::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRGroups wrapper method implementations
//

#pragma implementation_key(412)
inline IGRGroupPtr IGRGroups::GetItem ( const _variant_t & Index ) {
    struct IGRGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupPtr(_result, false);
}

#pragma implementation_key(413)
inline IUnknownPtr IGRGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(414)
inline long IGRGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline IGRGroupPtr IGRGroups::Add ( ) {
    struct IGRGroup * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupPtr(_result, false);
}

#pragma implementation_key(416)
inline HRESULT IGRGroups::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(417)
inline HRESULT IGRGroups::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(418)
inline long IGRGroups::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline IGRGroupPtr IGRGroups::ItemAt ( long Index ) {
    struct IGRGroup * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupPtr(_result, false);
}

#pragma implementation_key(420)
inline HRESULT IGRGroups::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRDetailGrid wrapper method implementations
//

#pragma implementation_key(421)
inline IGRColumnContentPtr IGRDetailGrid::GetColumnContent ( ) {
    struct IGRColumnContent * _result = 0;
    HRESULT _hr = get_ColumnContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentPtr(_result, false);
}

#pragma implementation_key(422)
inline IGRColumnTitlePtr IGRDetailGrid::GetColumnTitle ( ) {
    struct IGRColumnTitle * _result = 0;
    HRESULT _hr = get_ColumnTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitlePtr(_result, false);
}

#pragma implementation_key(423)
inline IGRColumnsPtr IGRDetailGrid::GetColumns ( ) {
    struct IGRColumns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnsPtr(_result, false);
}

#pragma implementation_key(424)
inline IGRGroupsPtr IGRDetailGrid::GetGroups ( ) {
    struct IGRGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupsPtr(_result, false);
}

#pragma implementation_key(425)
inline IGRRecordsetPtr IGRDetailGrid::GetRecordset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(426)
inline IGRCrossTabPtr IGRDetailGrid::GetCrossTab ( ) {
    struct IGRCrossTab * _result = 0;
    HRESULT _hr = get_CrossTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRCrossTabPtr(_result, false);
}

#pragma implementation_key(427)
inline IGRRecordsetPtr IGRDetailGrid::GetMasterRecordset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = get_MasterRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(428)
inline VARIANT_BOOL IGRDetailGrid::GetIsCrossTab ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCrossTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void IGRDetailGrid::PutIsCrossTab ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsCrossTab(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline VARIANT_BOOL IGRDetailGrid::GetHasMasterRecordset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMasterRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void IGRDetailGrid::PutHasMasterRecordset ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMasterRecordset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline _bstr_t IGRDetailGrid::GetRelationFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RelationFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(433)
inline void IGRDetailGrid::PutRelationFields ( _bstr_t pVal ) {
    HRESULT _hr = put_RelationFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline IGRFontPtr IGRDetailGrid::GetFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(435)
inline IGRBorderPtr IGRDetailGrid::GetBorder ( ) {
    struct IGRBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBorderPtr(_result, false);
}

#pragma implementation_key(436)
inline IGRPenPtr IGRDetailGrid::GetColLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_ColLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(437)
inline IGRPenPtr IGRDetailGrid::GetRowLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_RowLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(438)
inline OLE_COLOR IGRDetailGrid::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline void IGRDetailGrid::PutBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(440)
inline VARIANT_BOOL IGRDetailGrid::GetShowColLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline void IGRDetailGrid::PutShowColLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowColLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(442)
inline VARIANT_BOOL IGRDetailGrid::GetShowRowLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRowLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(443)
inline void IGRDetailGrid::PutShowRowLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowRowLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(444)
inline GRNewPageStyle IGRDetailGrid::GetNewPage ( ) {
    GRNewPageStyle _result;
    HRESULT _hr = get_NewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline void IGRDetailGrid::PutNewPage ( GRNewPageStyle pVal ) {
    HRESULT _hr = put_NewPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline long IGRDetailGrid::GetFixCols ( ) {
    long _result = 0;
    HRESULT _hr = get_FixCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline void IGRDetailGrid::PutFixCols ( long pVal ) {
    HRESULT _hr = put_FixCols(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline VARIANT_BOOL IGRDetailGrid::GetCenterView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void IGRDetailGrid::PutCenterView ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CenterView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline VARIANT_BOOL IGRDetailGrid::GetGrowToBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GrowToBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void IGRDetailGrid::PutGrowToBottom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GrowToBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline GRPrintType IGRDetailGrid::GetBorderPrintType ( ) {
    GRPrintType _result;
    HRESULT _hr = get_BorderPrintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline void IGRDetailGrid::PutBorderPrintType ( GRPrintType pVal ) {
    HRESULT _hr = put_BorderPrintType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline GRPrintType IGRDetailGrid::GetGridLinePrintType ( ) {
    GRPrintType _result;
    HRESULT _hr = get_GridLinePrintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void IGRDetailGrid::PutGridLinePrintType ( GRPrintType pVal ) {
    HRESULT _hr = put_GridLinePrintType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline GRPageColumnDirection IGRDetailGrid::GetPageColumnDirection ( ) {
    GRPageColumnDirection _result;
    HRESULT _hr = get_PageColumnDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void IGRDetailGrid::PutPageColumnDirection ( GRPageColumnDirection pVal ) {
    HRESULT _hr = put_PageColumnDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline long IGRDetailGrid::GetPageColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void IGRDetailGrid::PutPageColumnCount ( long pVal ) {
    HRESULT _hr = put_PageColumnCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline double IGRDetailGrid::GetPageColumnSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_PageColumnSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void IGRDetailGrid::PutPageColumnSpacing ( double pVal ) {
    HRESULT _hr = put_PageColumnSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline VARIANT_BOOL IGRDetailGrid::GetPageColumnGroupNA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageColumnGroupNA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void IGRDetailGrid::PutPageColumnGroupNA ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageColumnGroupNA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline GRColumnPrintAdaptMethod IGRDetailGrid::GetPrintAdaptMethod ( ) {
    GRColumnPrintAdaptMethod _result;
    HRESULT _hr = get_PrintAdaptMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void IGRDetailGrid::PutPrintAdaptMethod ( GRColumnPrintAdaptMethod pVal ) {
    HRESULT _hr = put_PrintAdaptMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline VARIANT_BOOL IGRDetailGrid::GetPrintAdaptRepeat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAdaptRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void IGRDetailGrid::PutPrintAdaptRepeat ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAdaptRepeat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline VARIANT_BOOL IGRDetailGrid::GetPrintAdaptFitText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAdaptFitText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline void IGRDetailGrid::PutPrintAdaptFitText ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAdaptFitText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline long IGRDetailGrid::GetPrintAdaptRFCStep ( ) {
    long _result = 0;
    HRESULT _hr = get_PrintAdaptRFCStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void IGRDetailGrid::PutPrintAdaptRFCStep ( long pVal ) {
    HRESULT _hr = put_PrintAdaptRFCStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline VARIANT_BOOL IGRDetailGrid::GetPrintAdaptTryToOnePage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAdaptTryToOnePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void IGRDetailGrid::PutPrintAdaptTryToOnePage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAdaptTryToOnePage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline VARIANT_BOOL IGRDetailGrid::GetAppendBlankRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AppendBlankRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void IGRDetailGrid::PutAppendBlankRow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AppendBlankRow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline VARIANT_BOOL IGRDetailGrid::GetAppendBlankRowAtLast ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AppendBlankRowAtLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void IGRDetailGrid::PutAppendBlankRowAtLast ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AppendBlankRowAtLast(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline VARIANT_BOOL IGRDetailGrid::GetAppendBlankCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AppendBlankCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void IGRDetailGrid::PutAppendBlankCol ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AppendBlankCol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline double IGRDetailGrid::GetAppendBlankColWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_AppendBlankColWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void IGRDetailGrid::PutAppendBlankColWidth ( double pVal ) {
    HRESULT _hr = put_AppendBlankColWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline IGRColumnPtr IGRDetailGrid::AddColumn ( _bstr_t Name, _bstr_t Title, _bstr_t DataField, double Width ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = raw_AddColumn(Name, Title, DataField, Width, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(483)
inline HRESULT IGRDetailGrid::ClearColumns ( ) {
    HRESULT _hr = raw_ClearColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(484)
inline IGRColumnTitleCellPtr IGRDetailGrid::FindGroupTitleCell ( _bstr_t Name ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_FindGroupTitleCell(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(485)
inline IGRColumnTitleCellPtr IGRDetailGrid::AddGroupTitle ( _bstr_t Name, _bstr_t Title ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_AddGroupTitle(Name, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(486)
inline HRESULT IGRDetailGrid::ClearGroupTitles ( ) {
    HRESULT _hr = raw_ClearGroupTitles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(487)
inline HRESULT IGRDetailGrid::ColumnMoveToEnd ( const _variant_t & ColumnIndex ) {
    HRESULT _hr = raw_ColumnMoveToEnd(ColumnIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(488)
inline HRESULT IGRDetailGrid::ColumnMoveTo ( _bstr_t ColumnName, _bstr_t NewGroupTitleCellName, long NewShowOrderNo ) {
    HRESULT _hr = raw_ColumnMoveTo(ColumnName, NewGroupTitleCellName, NewShowOrderNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(489)
inline HRESULT IGRDetailGrid::StartNewGroup ( const _variant_t & GroupIndex ) {
    HRESULT _hr = raw_StartNewGroup(GroupIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(490)
inline IGRColumnPtr IGRDetailGrid::ColumnByShowOrder ( long OrderNo ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = raw_ColumnByShowOrder(OrderNo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(491)
inline GRBorderStyles IGRDetailGrid::GetBorderStyles ( ) {
    GRBorderStyles _result;
    HRESULT _hr = get_BorderStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline void IGRDetailGrid::PutBorderStyles ( GRBorderStyles pVal ) {
    HRESULT _hr = put_BorderStyles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline double IGRDetailGrid::GetBorderWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_BorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline void IGRDetailGrid::PutBorderWidth ( double pVal ) {
    HRESULT _hr = put_BorderWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(495)
inline OLE_COLOR IGRDetailGrid::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline void IGRDetailGrid::PutBorderColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BorderColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(497)
inline OLE_COLOR IGRDetailGrid::GetColLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline void IGRDetailGrid::PutColLineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ColLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(499)
inline double IGRDetailGrid::GetColLineWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ColLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void IGRDetailGrid::PutColLineWidth ( double pVal ) {
    HRESULT _hr = put_ColLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline OLE_COLOR IGRDetailGrid::GetRowLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RowLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void IGRDetailGrid::PutRowLineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_RowLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline double IGRDetailGrid::GetRowLineWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_RowLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void IGRDetailGrid::PutRowLineWidth ( double pVal ) {
    HRESULT _hr = put_RowLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline GRLockType IGRDetailGrid::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void IGRDetailGrid::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRSection wrapper method implementations
//

#pragma implementation_key(507)
inline GRSectionType IGRSection::GetSectionType ( ) {
    GRSectionType _result;
    HRESULT _hr = get_SectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline IUnknownPtr IGRSection::GetParent ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(509)
inline IGRFontPtr IGRSection::GetFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(510)
inline IGRControlsPtr IGRSection::GetControls ( ) {
    struct IGRControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlsPtr(_result, false);
}

#pragma implementation_key(511)
inline _bstr_t IGRSection::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(512)
inline void IGRSection::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline double IGRSection::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void IGRSection::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline VARIANT_BOOL IGRSection::GetCanGrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline void IGRSection::PutCanGrow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanGrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline VARIANT_BOOL IGRSection::GetCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline void IGRSection::PutCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline OLE_COLOR IGRSection::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void IGRSection::PutBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline VARIANT_BOOL IGRSection::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void IGRSection::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline VARIANT_BOOL IGRSection::GetKeepTogether ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void IGRSection::PutKeepTogether ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_KeepTogether(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline _bstr_t IGRSection::GetBookmarkText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BookmarkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(526)
inline void IGRSection::PutBookmarkText ( _bstr_t pVal ) {
    HRESULT _hr = put_BookmarkText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline _bstr_t IGRSection::GetFormatScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormatScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(528)
inline void IGRSection::PutFormatScript ( _bstr_t pVal ) {
    HRESULT _hr = put_FormatScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline HRESULT IGRSection::_HasSectionFormatScript ( ) {
    HRESULT _hr = raw__HasSectionFormatScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRColumnSection wrapper method implementations
//

#pragma implementation_key(530)
inline IGRDetailGridPtr IGRColumnSection::GetDetailGrid ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = get_DetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(531)
inline GRDisplayCursor IGRColumnSection::GetCursor ( ) {
    GRDisplayCursor _result;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline void IGRColumnSection::PutCursor ( GRDisplayCursor pVal ) {
    HRESULT _hr = put_Cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline HRESULT IGRColumnSection::SetCellsBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = raw_SetCellsBackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline HRESULT IGRColumnSection::SetCellsForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = raw_SetCellsForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline HRESULT IGRColumnSection::LoadCursorFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadCursorFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRPageHeader wrapper method implementations
//

#pragma implementation_key(536)
inline GRLockType IGRPageHeader::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(537)
inline void IGRPageHeader::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRPageFooter wrapper method implementations
//

#pragma implementation_key(538)
inline GRLockType IGRPageFooter::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void IGRPageFooter::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRReportSection wrapper method implementations
//

#pragma implementation_key(540)
inline GRNewPageStyle IGRReportSection::GetNewPage ( ) {
    GRNewPageStyle _result;
    HRESULT _hr = get_NewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void IGRReportSection::PutNewPage ( GRNewPageStyle pVal ) {
    HRESULT _hr = put_NewPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline VARIANT_BOOL IGRReportSection::GetRepeatOnPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatOnPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void IGRReportSection::PutRepeatOnPage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RepeatOnPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline VARIANT_BOOL IGRReportSection::GetCenterWithDetailGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterWithDetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void IGRReportSection::PutCenterWithDetailGrid ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CenterWithDetailGrid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRReportHeader wrapper method implementations
//

#pragma implementation_key(546)
inline GRLockType IGRReportHeader::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void IGRReportHeader::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRReportHeaders wrapper method implementations
//

#pragma implementation_key(548)
inline IGRReportHeaderPtr IGRReportHeaders::GetItem ( const _variant_t & Index ) {
    struct IGRReportHeader * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeaderPtr(_result, false);
}

#pragma implementation_key(549)
inline IUnknownPtr IGRReportHeaders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(550)
inline long IGRReportHeaders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline IGRReportHeaderPtr IGRReportHeaders::Add ( ) {
    struct IGRReportHeader * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeaderPtr(_result, false);
}

#pragma implementation_key(552)
inline HRESULT IGRReportHeaders::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(553)
inline HRESULT IGRReportHeaders::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(554)
inline long IGRReportHeaders::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline IGRReportHeaderPtr IGRReportHeaders::ItemAt ( long Index ) {
    struct IGRReportHeader * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeaderPtr(_result, false);
}

#pragma implementation_key(556)
inline HRESULT IGRReportHeaders::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRReportFooter wrapper method implementations
//

#pragma implementation_key(557)
inline VARIANT_BOOL IGRReportFooter::GetPrintAtBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAtBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void IGRReportFooter::PutPrintAtBottom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAtBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline VARIANT_BOOL IGRReportFooter::GetAppendBlankRowExclude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AppendBlankRowExclude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void IGRReportFooter::PutAppendBlankRowExclude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AppendBlankRowExclude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline GRLockType IGRReportFooter::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void IGRReportFooter::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRReportFooters wrapper method implementations
//

#pragma implementation_key(563)
inline IGRReportFooterPtr IGRReportFooters::GetItem ( const _variant_t & Index ) {
    struct IGRReportFooter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFooterPtr(_result, false);
}

#pragma implementation_key(564)
inline IUnknownPtr IGRReportFooters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(565)
inline long IGRReportFooters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(566)
inline IGRReportFooterPtr IGRReportFooters::Add ( ) {
    struct IGRReportFooter * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFooterPtr(_result, false);
}

#pragma implementation_key(567)
inline HRESULT IGRReportFooters::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline HRESULT IGRReportFooters::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(569)
inline long IGRReportFooters::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline IGRReportFooterPtr IGRReportFooters::ItemAt ( long Index ) {
    struct IGRReportFooter * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFooterPtr(_result, false);
}

#pragma implementation_key(571)
inline HRESULT IGRReportFooters::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRGroupSection wrapper method implementations
//

#pragma implementation_key(572)
inline IGRGroupPtr IGRGroupSection::GetGroup ( ) {
    struct IGRGroup * _result = 0;
    HRESULT _hr = get_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGroupPtr(_result, false);
}

#pragma implementation_key(573)
inline GRNewPageStyle IGRGroupSection::GetNewPage ( ) {
    GRNewPageStyle _result;
    HRESULT _hr = get_NewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void IGRGroupSection::PutNewPage ( GRNewPageStyle pVal ) {
    HRESULT _hr = put_NewPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline VARIANT_BOOL IGRGroupSection::GetPrintGridBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintGridBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline void IGRGroupSection::PutPrintGridBorder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintGridBorder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline VARIANT_BOOL IGRGroupSection::GetHNewPageFixed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HNewPageFixed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline void IGRGroupSection::PutHNewPageFixed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HNewPageFixed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(579)
inline GRNewPageColumnStyle IGRGroupSection::GetNewPageColumn ( ) {
    GRNewPageColumnStyle _result;
    HRESULT _hr = get_NewPageColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void IGRGroupSection::PutNewPageColumn ( GRNewPageColumnStyle pVal ) {
    HRESULT _hr = put_NewPageColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline VARIANT_BOOL IGRGroupSection::GetRepeatOnPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatOnPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void IGRGroupSection::PutRepeatOnPage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RepeatOnPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRGroupHeader wrapper method implementations
//

#pragma implementation_key(583)
inline VARIANT_BOOL IGRGroupHeader::GetOccupyColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OccupyColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void IGRGroupHeader::PutOccupyColumn ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OccupyColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline _bstr_t IGRGroupHeader::GetOccupiedColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OccupiedColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(586)
inline void IGRGroupHeader::PutOccupiedColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_OccupiedColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(587)
inline GROCGroupHeaderVAlign IGRGroupHeader::GetVAlign ( ) {
    GROCGroupHeaderVAlign _result;
    HRESULT _hr = get_VAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline void IGRGroupHeader::PutVAlign ( GROCGroupHeaderVAlign pVal ) {
    HRESULT _hr = put_VAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(589)
inline VARIANT_BOOL IGRGroupHeader::GetSameAsColumn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SameAsColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline void IGRGroupHeader::PutSameAsColumn ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SameAsColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline VARIANT_BOOL IGRGroupHeader::GetIncludeFooter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void IGRGroupHeader::PutIncludeFooter ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeFooter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline GRGrpKpTogetherStyle IGRGroupHeader::GetGroupKeepTogether ( ) {
    GRGrpKpTogetherStyle _result;
    HRESULT _hr = get_GroupKeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline void IGRGroupHeader::PutGroupKeepTogether ( GRGrpKpTogetherStyle pVal ) {
    HRESULT _hr = put_GroupKeepTogether(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline GRLockType IGRGroupHeader::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline void IGRGroupHeader::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRGroupFooter wrapper method implementations
//

#pragma implementation_key(597)
inline VARIANT_BOOL IGRGroupFooter::GetPrintAtBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAtBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void IGRGroupFooter::PutPrintAtBottom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAtBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline VARIANT_BOOL IGRGroupFooter::GetAppendBlankRowExclude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AppendBlankRowExclude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline void IGRGroupFooter::PutAppendBlankRowExclude ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AppendBlankRowExclude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline GRLockType IGRGroupFooter::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void IGRGroupFooter::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRColumnContent wrapper method implementations
//

#pragma implementation_key(603)
inline IGRColumnContentCellsPtr IGRColumnContent::GetContentCells ( ) {
    struct IGRColumnContentCells * _result = 0;
    HRESULT _hr = get_ContentCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentCellsPtr(_result, false);
}

#pragma implementation_key(604)
inline OLE_COLOR IGRColumnContent::GetAlternatingBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AlternatingBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void IGRColumnContent::PutAlternatingBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_AlternatingBackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline long IGRColumnContent::GetRowsPerPage ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline void IGRColumnContent::PutRowsPerPage ( long pVal ) {
    HRESULT _hr = put_RowsPerPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(608)
inline VARIANT_BOOL IGRColumnContent::GetRowsIncludeGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RowsIncludeGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void IGRColumnContent::PutRowsIncludeGroup ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RowsIncludeGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline VARIANT_BOOL IGRColumnContent::GetAdjustRowHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdjustRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void IGRColumnContent::PutAdjustRowHeight ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AdjustRowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline VARIANT_BOOL IGRColumnContent::GetGrowToNextRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GrowToNextRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void IGRColumnContent::PutGrowToNextRow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GrowToNextRow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline GRLockType IGRColumnContent::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void IGRColumnContent::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRControls wrapper method implementations
//

#pragma implementation_key(616)
inline IGRControlPtr IGRControls::GetItem ( const _variant_t & Index ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(617)
inline IUnknownPtr IGRControls::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(618)
inline long IGRControls::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline IGRControlPtr IGRControls::Add ( GRControlType ControlType ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_Add(ControlType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(620)
inline HRESULT IGRControls::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(621)
inline HRESULT IGRControls::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(622)
inline long IGRControls::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline IGRControlPtr IGRControls::ItemAt ( long Index ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(624)
inline HRESULT IGRControls::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRCellBase wrapper method implementations
//

#pragma implementation_key(625)
inline IGRBorderPtr IGRCellBase::GetBorder ( ) {
    struct IGRBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBorderPtr(_result, false);
}

#pragma implementation_key(626)
inline IGRTextFormatPtr IGRCellBase::GetTextFormat ( ) {
    struct IGRTextFormat * _result = 0;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRTextFormatPtr(_result, false);
}

#pragma implementation_key(627)
inline IGRFontPtr IGRCellBase::GetFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(628)
inline IGRControlsPtr IGRCellBase::GetControls ( ) {
    struct IGRControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlsPtr(_result, false);
}

#pragma implementation_key(629)
inline VARIANT_BOOL IGRCellBase::GetFreeCell ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FreeCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline void IGRCellBase::PutFreeCell ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FreeCell(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(631)
inline VARIANT_BOOL IGRCellBase::GetBorderCustom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BorderCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline void IGRCellBase::PutBorderCustom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BorderCustom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(633)
inline OLE_COLOR IGRCellBase::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline void IGRCellBase::PutBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline OLE_COLOR IGRCellBase::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline void IGRCellBase::PutForeColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ForeColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline VARIANT_BOOL IGRCellBase::GetCanGrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void IGRCellBase::PutCanGrow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanGrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline VARIANT_BOOL IGRCellBase::GetCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void IGRCellBase::PutCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline GRPrintType IGRCellBase::GetPrintType ( ) {
    GRPrintType _result;
    HRESULT _hr = get_PrintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void IGRCellBase::PutPrintType ( GRPrintType pVal ) {
    HRESULT _hr = put_PrintType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline GRDisplayCursor IGRCellBase::GetCursor ( ) {
    GRDisplayCursor _result;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void IGRCellBase::PutCursor ( GRDisplayCursor pVal ) {
    HRESULT _hr = put_Cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline VARIANT_BOOL IGRCellBase::GetShrinkFontToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShrinkFontToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline void IGRCellBase::PutShrinkFontToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShrinkFontToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline long IGRCellBase::GetPaddingLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline void IGRCellBase::PutPaddingLeft ( long pVal ) {
    HRESULT _hr = put_PaddingLeft(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(649)
inline long IGRCellBase::GetPaddingRight ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline void IGRCellBase::PutPaddingRight ( long pVal ) {
    HRESULT _hr = put_PaddingRight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(651)
inline long IGRCellBase::GetPaddingTop ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline void IGRCellBase::PutPaddingTop ( long pVal ) {
    HRESULT _hr = put_PaddingTop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(653)
inline long IGRCellBase::GetPaddingBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline void IGRCellBase::PutPaddingBottom ( long pVal ) {
    HRESULT _hr = put_PaddingBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline VARIANT_BOOL IGRCellBase::GetShowMoneyLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoneyLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void IGRCellBase::PutShowMoneyLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoneyLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline VARIANT_BOOL IGRCellBase::GetShowMoneyLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoneyLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void IGRCellBase::PutShowMoneyLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoneyLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline HRESULT IGRCellBase::LoadCursorFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadCursorFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(660)
inline OLE_HANDLE IGRCellBase::Get_CursorHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__CursorHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline _bstr_t IGRCellBase::GetGetDisplayTextScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetDisplayTextScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(662)
inline void IGRCellBase::PutGetDisplayTextScript ( _bstr_t pVal ) {
    HRESULT _hr = put_GetDisplayTextScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFreeGridCell wrapper method implementations
//

#pragma implementation_key(663)
inline long IGRFreeGridCell::GetColSpan ( ) {
    long _result = 0;
    HRESULT _hr = get_ColSpan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void IGRFreeGridCell::PutColSpan ( long pVal ) {
    HRESULT _hr = put_ColSpan(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline long IGRFreeGridCell::GetRowSpan ( ) {
    long _result = 0;
    HRESULT _hr = get_RowSpan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void IGRFreeGridCell::PutRowSpan ( long pVal ) {
    HRESULT _hr = put_RowSpan(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline _bstr_t IGRFreeGridCell::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline void IGRFreeGridCell::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline _bstr_t IGRFreeGridCell::GetDataName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(670)
inline void IGRFreeGridCell::PutDataName ( _bstr_t pVal ) {
    HRESULT _hr = put_DataName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(671)
inline GRLockType IGRFreeGridCell::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(672)
inline void IGRFreeGridCell::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRControl wrapper method implementations
//

#pragma implementation_key(673)
inline GRControlType IGRControl::GetControlType ( ) {
    GRControlType _result;
    HRESULT _hr = get_ControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(674)
inline IGRFontPtr IGRControl::GetFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(675)
inline IUnknownPtr IGRControl::GetParent ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(676)
inline _bstr_t IGRControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline void IGRControl::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline OLE_COLOR IGRControl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void IGRControl::PutBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline GRBackStyle IGRControl::GetBackStyle ( ) {
    GRBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void IGRControl::PutBackStyle ( GRBackStyle pVal ) {
    HRESULT _hr = put_BackStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline OLE_COLOR IGRControl::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void IGRControl::PutForeColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ForeColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline IGRBorderPtr IGRControl::GetBorder ( ) {
    struct IGRBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBorderPtr(_result, false);
}

#pragma implementation_key(685)
inline double IGRControl::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(686)
inline void IGRControl::PutLeft ( double pVal ) {
    HRESULT _hr = put_Left(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline double IGRControl::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void IGRControl::PutTop ( double pVal ) {
    HRESULT _hr = put_Top(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline double IGRControl::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void IGRControl::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline double IGRControl::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline void IGRControl::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline long IGRControl::GetPaddingLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline void IGRControl::PutPaddingLeft ( long pVal ) {
    HRESULT _hr = put_PaddingLeft(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline long IGRControl::GetPaddingRight ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline void IGRControl::PutPaddingRight ( long pVal ) {
    HRESULT _hr = put_PaddingRight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline long IGRControl::GetPaddingTop ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline void IGRControl::PutPaddingTop ( long pVal ) {
    HRESULT _hr = put_PaddingTop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline long IGRControl::GetPaddingBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_PaddingBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void IGRControl::PutPaddingBottom ( long pVal ) {
    HRESULT _hr = put_PaddingBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline GRAnchorStyles IGRControl::GetAnchor ( ) {
    GRAnchorStyles _result;
    HRESULT _hr = get_Anchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void IGRControl::PutAnchor ( GRAnchorStyles pVal ) {
    HRESULT _hr = put_Anchor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(703)
inline GRDockStyle IGRControl::GetDock ( ) {
    GRDockStyle _result;
    HRESULT _hr = get_Dock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline void IGRControl::PutDock ( GRDockStyle pVal ) {
    HRESULT _hr = put_Dock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(705)
inline GRCenterStyle IGRControl::GetCenter ( ) {
    GRCenterStyle _result;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline void IGRControl::PutCenter ( GRCenterStyle pVal ) {
    HRESULT _hr = put_Center(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline _bstr_t IGRControl::GetAlignColumn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(708)
inline void IGRControl::PutAlignColumn ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline _bstr_t IGRControl::GetAlignColumnEx ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignColumnEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(710)
inline void IGRControl::PutAlignColumnEx ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignColumnEx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline GRAlignColumnStyle IGRControl::GetAlignColumnSide ( ) {
    GRAlignColumnStyle _result;
    HRESULT _hr = get_AlignColumnSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline void IGRControl::PutAlignColumnSide ( GRAlignColumnStyle pVal ) {
    HRESULT _hr = put_AlignColumnSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline VARIANT_BOOL IGRControl::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline void IGRControl::PutLocked ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Locked(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline GRShiftMode IGRControl::GetShiftMode ( ) {
    GRShiftMode _result;
    HRESULT _hr = get_ShiftMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void IGRControl::PutShiftMode ( GRShiftMode pVal ) {
    HRESULT _hr = put_ShiftMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline GRPrintType IGRControl::GetPrintType ( ) {
    GRPrintType _result;
    HRESULT _hr = get_PrintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline void IGRControl::PutPrintType ( GRPrintType pVal ) {
    HRESULT _hr = put_PrintType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline VARIANT_BOOL IGRControl::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline void IGRControl::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(721)
inline GRDisplayCursor IGRControl::GetCursor ( ) {
    GRDisplayCursor _result;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline void IGRControl::PutCursor ( GRDisplayCursor pVal ) {
    HRESULT _hr = put_Cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline VARIANT_BOOL IGRControl::GetCustomDraw ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomDraw(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void IGRControl::PutCustomDraw ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CustomDraw(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline _bstr_t IGRControl::GetHyperlinkText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(726)
inline void IGRControl::PutHyperlinkText ( _bstr_t pVal ) {
    HRESULT _hr = put_HyperlinkText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline _bstr_t IGRControl::GetCustomDrawScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomDrawScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(728)
inline void IGRControl::PutCustomDrawScript ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomDrawScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline IGRTextBoxPtr IGRControl::GetAsTextBox ( ) {
    struct IGRTextBox * _result = 0;
    HRESULT _hr = get_AsTextBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRTextBoxPtr(_result, false);
}

#pragma implementation_key(730)
inline IGRChartPtr IGRControl::GetAsChart ( ) {
    struct IGRChart * _result = 0;
    HRESULT _hr = get_AsChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartPtr(_result, false);
}

#pragma implementation_key(731)
inline IGRStaticBoxPtr IGRControl::GetAsStaticBox ( ) {
    struct IGRStaticBox * _result = 0;
    HRESULT _hr = get_AsStaticBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRStaticBoxPtr(_result, false);
}

#pragma implementation_key(732)
inline IGRShapeBoxPtr IGRControl::GetAsShapeBox ( ) {
    struct IGRShapeBox * _result = 0;
    HRESULT _hr = get_AsShapeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRShapeBoxPtr(_result, false);
}

#pragma implementation_key(733)
inline IGRSystemVarBoxPtr IGRControl::GetAsSystemVarBox ( ) {
    struct IGRSystemVarBox * _result = 0;
    HRESULT _hr = get_AsSystemVarBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRSystemVarBoxPtr(_result, false);
}

#pragma implementation_key(734)
inline IGRFieldBoxPtr IGRControl::GetAsFieldBox ( ) {
    struct IGRFieldBox * _result = 0;
    HRESULT _hr = get_AsFieldBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldBoxPtr(_result, false);
}

#pragma implementation_key(735)
inline IGRSummaryBoxPtr IGRControl::GetAsSummaryBox ( ) {
    struct IGRSummaryBox * _result = 0;
    HRESULT _hr = get_AsSummaryBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRSummaryBoxPtr(_result, false);
}

#pragma implementation_key(736)
inline IGRPictureBoxPtr IGRControl::GetAsPictureBox ( ) {
    struct IGRPictureBox * _result = 0;
    HRESULT _hr = get_AsPictureBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPictureBoxPtr(_result, false);
}

#pragma implementation_key(737)
inline IGRRichTextBoxPtr IGRControl::GetAsRichTextBox ( ) {
    struct IGRRichTextBox * _result = 0;
    HRESULT _hr = get_AsRichTextBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRichTextBoxPtr(_result, false);
}

#pragma implementation_key(738)
inline IGRMemoBoxPtr IGRControl::GetAsMemoBox ( ) {
    struct IGRMemoBox * _result = 0;
    HRESULT _hr = get_AsMemoBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRMemoBoxPtr(_result, false);
}

#pragma implementation_key(739)
inline IGRSubReportPtr IGRControl::GetAsSubReport ( ) {
    struct IGRSubReport * _result = 0;
    HRESULT _hr = get_AsSubReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRSubReportPtr(_result, false);
}

#pragma implementation_key(740)
inline IGRLinePtr IGRControl::GetAsLine ( ) {
    struct IGRLine * _result = 0;
    HRESULT _hr = get_AsLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRLinePtr(_result, false);
}

#pragma implementation_key(741)
inline IGRBarcodePtr IGRControl::GetAsBarcode ( ) {
    struct IGRBarcode * _result = 0;
    HRESULT _hr = get_AsBarcode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBarcodePtr(_result, false);
}

#pragma implementation_key(742)
inline IGRFreeGridPtr IGRControl::GetAsFreeGrid ( ) {
    struct IGRFreeGrid * _result = 0;
    HRESULT _hr = get_AsFreeGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridPtr(_result, false);
}

#pragma implementation_key(743)
inline HRESULT IGRControl::SetBounds ( double Left, double Top, double Right, double Bottom ) {
    HRESULT _hr = raw_SetBounds(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(744)
inline HRESULT IGRControl::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(745)
inline HRESULT IGRControl::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(746)
inline HRESULT IGRControl::LoadCursorFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadCursorFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(747)
inline HRESULT IGRControl::DrawDefault ( ) {
    HRESULT _hr = raw_DrawDefault();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(748)
inline OLE_COLOR IGRControl::Get_RealViewBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get__RealViewBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline OLE_HANDLE IGRControl::Get_CursorHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__CursorHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline OLE_HANDLE IGRControl::Get_ControlHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__ControlHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline HRESULT IGRControl::_HasCustomDrawScript ( ) {
    HRESULT _hr = raw__HasCustomDrawScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(752)
inline HRESULT IGRControl::_Draw ( OLE_HANDLE pDrawDevice, OLE_HANDLE pDrawRect ) {
    HRESULT _hr = raw__Draw(pDrawDevice, pDrawRect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(753)
inline double IGRControl::GetBorderWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_BorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline void IGRControl::PutBorderWidth ( double pVal ) {
    HRESULT _hr = put_BorderWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(755)
inline OLE_COLOR IGRControl::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void IGRControl::PutBorderColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BorderColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline GRBorderStyles IGRControl::GetBorderStyles ( ) {
    GRBorderStyles _result;
    HRESULT _hr = get_BorderStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline void IGRControl::PutBorderStyles ( GRBorderStyles pVal ) {
    HRESULT _hr = put_BorderStyles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRTextBox wrapper method implementations
//

#pragma implementation_key(759)
inline IGRTextFormatPtr IGRTextBox::GetTextFormat ( ) {
    struct IGRTextFormat * _result = 0;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRTextFormatPtr(_result, false);
}

#pragma implementation_key(760)
inline VARIANT_BOOL IGRTextBox::GetCanGrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void IGRTextBox::PutCanGrow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanGrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline VARIANT_BOOL IGRTextBox::GetCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void IGRTextBox::PutCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline VARIANT_BOOL IGRTextBox::GetShrinkFontToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShrinkFontToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void IGRTextBox::PutShrinkFontToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShrinkFontToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline VARIANT_BOOL IGRTextBox::GetSpanToNewPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SpanToNewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void IGRTextBox::PutSpanToNewPage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SpanToNewPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline VARIANT_BOOL IGRTextBox::GetShowMoneyLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoneyLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IGRTextBox::PutShowMoneyLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoneyLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline VARIANT_BOOL IGRTextBox::GetShowMoneyLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoneyLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void IGRTextBox::PutShowMoneyLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoneyLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline _bstr_t IGRTextBox::GetDisplayText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(773)
inline void IGRTextBox::PutDisplayText ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline _bstr_t IGRTextBox::GetGetDisplayTextScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetDisplayTextScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(775)
inline void IGRTextBox::PutGetDisplayTextScript ( _bstr_t pVal ) {
    HRESULT _hr = put_GetDisplayTextScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline VARIANT_BOOL IGRTextBox::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void IGRTextBox::PutWordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline VARIANT_BOOL IGRTextBox::GetEndEllipsis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EndEllipsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void IGRTextBox::PutEndEllipsis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EndEllipsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(780)
inline GRTextAlign IGRTextBox::GetTextAlign ( ) {
    GRTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void IGRTextBox::PutTextAlign ( GRTextAlign pVal ) {
    HRESULT _hr = put_TextAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline _bstr_t IGRTextBox::Get_ExportXlsFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__ExportXlsFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline HRESULT IGRTextBox::_FetchExportData ( double * pValue, BSTR * pFormatText, GRFieldType * pDataType ) {
    HRESULT _hr = raw__FetchExportData(pValue, pFormatText, pDataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(784)
inline HRESULT IGRTextBox::_HasGetDisplayTextScript ( ) {
    HRESULT _hr = raw__HasGetDisplayTextScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRStaticBox wrapper method implementations
//

#pragma implementation_key(785)
inline _bstr_t IGRStaticBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline void IGRStaticBox::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline _bstr_t IGRStaticBox::GetParameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(788)
inline void IGRStaticBox::PutParameter ( _bstr_t pVal ) {
    HRESULT _hr = put_Parameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline GRLockType IGRStaticBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline void IGRStaticBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRShapeBox wrapper method implementations
//

#pragma implementation_key(791)
inline GRShapeType IGRShapeBox::GetShapeType ( ) {
    GRShapeType _result;
    HRESULT _hr = get_ShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline void IGRShapeBox::PutShapeType ( GRShapeType pVal ) {
    HRESULT _hr = put_ShapeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline IGRPenPtr IGRShapeBox::GetLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(794)
inline OLE_COLOR IGRShapeBox::GetFillColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline void IGRShapeBox::PutFillColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_FillColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline GRBackStyle IGRShapeBox::GetFillStyle ( ) {
    GRBackStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void IGRShapeBox::PutFillStyle ( GRBackStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline GRLineType IGRShapeBox::GetLineType ( ) {
    GRLineType _result;
    HRESULT _hr = get_LineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void IGRShapeBox::PutLineType ( GRLineType pVal ) {
    HRESULT _hr = put_LineType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline long IGRShapeBox::GetCornerDx ( ) {
    long _result = 0;
    HRESULT _hr = get_CornerDx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void IGRShapeBox::PutCornerDx ( long pVal ) {
    HRESULT _hr = put_CornerDx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(802)
inline long IGRShapeBox::GetCornerDy ( ) {
    long _result = 0;
    HRESULT _hr = get_CornerDy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline void IGRShapeBox::PutCornerDy ( long pVal ) {
    HRESULT _hr = put_CornerDy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline GRLockType IGRShapeBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void IGRShapeBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRSystemVarBox wrapper method implementations
//

#pragma implementation_key(806)
inline GRSystemVarType IGRSystemVarBox::GetSystemVar ( ) {
    GRSystemVarType _result;
    HRESULT _hr = get_SystemVar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void IGRSystemVarBox::PutSystemVar ( GRSystemVarType pVal ) {
    HRESULT _hr = put_SystemVar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline long IGRSystemVarBox::GetGroupIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_GroupIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline void IGRSystemVarBox::PutGroupIndex ( long pVal ) {
    HRESULT _hr = put_GroupIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline _bstr_t IGRSystemVarBox::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(811)
inline void IGRSystemVarBox::PutFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(812)
inline GRLockType IGRSystemVarBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline void IGRSystemVarBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFieldBox wrapper method implementations
//

#pragma implementation_key(814)
inline _bstr_t IGRFieldBox::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline void IGRFieldBox::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline GRLockType IGRFieldBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline void IGRFieldBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRSummaryBox wrapper method implementations
//

#pragma implementation_key(818)
inline GRSummaryFun IGRSummaryBox::GetSummaryFun ( ) {
    GRSummaryFun _result;
    HRESULT _hr = get_SummaryFun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline void IGRSummaryBox::PutSummaryFun ( GRSummaryFun pVal ) {
    HRESULT _hr = put_SummaryFun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline _bstr_t IGRSummaryBox::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(821)
inline void IGRSummaryBox::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(822)
inline _bstr_t IGRSummaryBox::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(823)
inline void IGRSummaryBox::PutFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(824)
inline double IGRSummaryBox::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline void IGRSummaryBox::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(826)
inline long IGRSummaryBox::GetRankNo ( ) {
    long _result = 0;
    HRESULT _hr = get_RankNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void IGRSummaryBox::PutRankNo ( long pVal ) {
    HRESULT _hr = put_RankNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline _bstr_t IGRSummaryBox::GetDisplayField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(829)
inline void IGRSummaryBox::PutDisplayField ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(830)
inline _bstr_t IGRSummaryBox::GetConditionScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConditionScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(831)
inline void IGRSummaryBox::PutConditionScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ConditionScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(832)
inline GRLockType IGRSummaryBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline void IGRSummaryBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRRichTextBox wrapper method implementations
//

#pragma implementation_key(834)
inline VARIANT_BOOL IGRRichTextBox::GetCanGrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline void IGRRichTextBox::PutCanGrow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanGrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(836)
inline VARIANT_BOOL IGRRichTextBox::GetCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void IGRRichTextBox::PutCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline _bstr_t IGRRichTextBox::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(839)
inline void IGRRichTextBox::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline _bstr_t IGRRichTextBox::GetRTF ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RTF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(841)
inline void IGRRichTextBox::PutRTF ( _bstr_t pVal ) {
    HRESULT _hr = put_RTF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(842)
inline HRESULT IGRRichTextBox::LoadFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline HRESULT IGRRichTextBox::LoadFromMemory ( unsigned char * pBuffer, long BytesCount ) {
    HRESULT _hr = raw_LoadFromMemory(pBuffer, BytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(844)
inline HRESULT IGRRichTextBox::_Prepare ( ) {
    HRESULT _hr = raw__Prepare();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(845)
inline HRESULT IGRRichTextBox::_FetchExportText ( BSTR * pExportText ) {
    HRESULT _hr = raw__FetchExportText(pExportText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(846)
inline GRLockType IGRRichTextBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline void IGRRichTextBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRMemoBox wrapper method implementations
//

#pragma implementation_key(848)
inline _bstr_t IGRMemoBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(849)
inline void IGRMemoBox::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(850)
inline _bstr_t IGRMemoBox::GetFlowTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlowTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(851)
inline void IGRMemoBox::PutFlowTo ( _bstr_t pVal ) {
    HRESULT _hr = put_FlowTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline double IGRMemoBox::GetAsFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_AsFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline GRTextOrientation IGRMemoBox::GetTextOrientation ( ) {
    GRTextOrientation _result;
    HRESULT _hr = get_TextOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void IGRMemoBox::PutTextOrientation ( GRTextOrientation pVal ) {
    HRESULT _hr = put_TextOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline double IGRMemoBox::GetTextAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_TextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void IGRMemoBox::PutTextAngle ( double pVal ) {
    HRESULT _hr = put_TextAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline double IGRMemoBox::GetCharacterSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_CharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void IGRMemoBox::PutCharacterSpacing ( double pVal ) {
    HRESULT _hr = put_CharacterSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline double IGRMemoBox::GetLineSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void IGRMemoBox::PutLineSpacing ( double pVal ) {
    HRESULT _hr = put_LineSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline VARIANT_BOOL IGRMemoBox::GetHtmlTags ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HtmlTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void IGRMemoBox::PutHtmlTags ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HtmlTags(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline GRLockType IGRMemoBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void IGRMemoBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRLine wrapper method implementations
//

#pragma implementation_key(865)
inline IGRPenPtr IGRLine::GetLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(866)
inline double IGRLine::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void IGRLine::PutX1 ( double pVal ) {
    HRESULT _hr = put_X1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline double IGRLine::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(869)
inline void IGRLine::PutY1 ( double pVal ) {
    HRESULT _hr = put_Y1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(870)
inline double IGRLine::GetX2 ( ) {
    double _result = 0;
    HRESULT _hr = get_X2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline void IGRLine::PutX2 ( double pVal ) {
    HRESULT _hr = put_X2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline double IGRLine::GetY2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline void IGRLine::PutY2 ( double pVal ) {
    HRESULT _hr = put_Y2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline GRLockType IGRLine::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void IGRLine::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRBarcode wrapper method implementations
//

#pragma implementation_key(876)
inline GRBarcodeType IGRBarcode::GetBarcodeType ( ) {
    GRBarcodeType _result;
    HRESULT _hr = get_BarcodeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline void IGRBarcode::PutBarcodeType ( GRBarcodeType pVal ) {
    HRESULT _hr = put_BarcodeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline GRStringAlignment IGRBarcode::GetAlignment ( ) {
    GRStringAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline void IGRBarcode::PutAlignment ( GRStringAlignment pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline double IGRBarcode::GetBarRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_BarRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline void IGRBarcode::PutBarRatio ( double pVal ) {
    HRESULT _hr = put_BarRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline double IGRBarcode::GetBarWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_BarWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(883)
inline void IGRBarcode::PutBarWidth ( double pVal ) {
    HRESULT _hr = put_BarWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline GRBarcodeCaptionPosition IGRBarcode::GetCaptionPosition ( ) {
    GRBarcodeCaptionPosition _result;
    HRESULT _hr = get_CaptionPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline void IGRBarcode::PutCaptionPosition ( GRBarcodeCaptionPosition pVal ) {
    HRESULT _hr = put_CaptionPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline GRStringAlignment IGRBarcode::GetCaptionAlignment ( ) {
    GRStringAlignment _result;
    HRESULT _hr = get_CaptionAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void IGRBarcode::PutCaptionAlignment ( GRStringAlignment pVal ) {
    HRESULT _hr = put_CaptionAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline VARIANT_BOOL IGRBarcode::GetCheckSum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline void IGRBarcode::PutCheckSum ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CheckSum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline GRBarcodeDirection IGRBarcode::GetDirection ( ) {
    GRBarcodeDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline void IGRBarcode::PutDirection ( GRBarcodeDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline _bstr_t IGRBarcode::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline void IGRBarcode::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline _bstr_t IGRBarcode::GetDisplayText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(895)
inline long IGRBarcode::GetPDF417Rows ( ) {
    long _result = 0;
    HRESULT _hr = get_PDF417Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline void IGRBarcode::PutPDF417Rows ( long pVal ) {
    HRESULT _hr = put_PDF417Rows(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(897)
inline long IGRBarcode::GetPDF417Columns ( ) {
    long _result = 0;
    HRESULT _hr = get_PDF417Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline void IGRBarcode::PutPDF417Columns ( long pVal ) {
    HRESULT _hr = put_PDF417Columns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(899)
inline long IGRBarcode::GetPDF417ErrorLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_PDF417ErrorLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline void IGRBarcode::PutPDF417ErrorLevel ( long pVal ) {
    HRESULT _hr = put_PDF417ErrorLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline VARIANT_BOOL IGRBarcode::GetPDF417Simple ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDF417Simple(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline void IGRBarcode::PutPDF417Simple ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDF417Simple(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(903)
inline long IGRBarcode::GetQRCodeErrorLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_QRCodeErrorLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void IGRBarcode::PutQRCodeErrorLevel ( long pVal ) {
    HRESULT _hr = put_QRCodeErrorLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline long IGRBarcode::GetQRCodeVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_QRCodeVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void IGRBarcode::PutQRCodeVersion ( long pVal ) {
    HRESULT _hr = put_QRCodeVersion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline long IGRBarcode::GetQRCodeMask ( ) {
    long _result = 0;
    HRESULT _hr = get_QRCodeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void IGRBarcode::PutQRCodeMask ( long pVal ) {
    HRESULT _hr = put_QRCodeMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline GRDtmxEncoding IGRBarcode::GetDtmxEncoding ( ) {
    GRDtmxEncoding _result;
    HRESULT _hr = get_DtmxEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void IGRBarcode::PutDtmxEncoding ( GRDtmxEncoding pVal ) {
    HRESULT _hr = put_DtmxEncoding(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline GRDtmxMatrixSize IGRBarcode::GetDtmxMatrixSize ( ) {
    GRDtmxMatrixSize _result;
    HRESULT _hr = get_DtmxMatrixSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void IGRBarcode::PutDtmxMatrixSize ( GRDtmxMatrixSize pVal ) {
    HRESULT _hr = put_DtmxMatrixSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline long IGRBarcode::GetDtmxModuleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DtmxModuleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void IGRBarcode::PutDtmxModuleSize ( long pVal ) {
    HRESULT _hr = put_DtmxModuleSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline _bstr_t IGRBarcode::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(916)
inline void IGRBarcode::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline GRLockType IGRBarcode::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline void IGRBarcode::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRChart wrapper method implementations
//

#pragma implementation_key(919)
inline _bstr_t IGRChart::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(920)
inline void IGRChart::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline IGRFontPtr IGRChart::GetTitleFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_TitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(922)
inline IGRFontPtr IGRChart::GetValueFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_ValueFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(923)
inline VARIANT_BOOL IGRChart::GetChart3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Chart3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(924)
inline void IGRChart::PutChart3D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Chart3D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(925)
inline VARIANT_BOOL IGRChart::GetSingleSeriesColored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SingleSeriesColored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void IGRChart::PutSingleSeriesColored ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SingleSeriesColored(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline IGRChartAxisPtr IGRChart::GetXAxis ( ) {
    struct IGRChartAxis * _result = 0;
    HRESULT _hr = get_XAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartAxisPtr(_result, false);
}

#pragma implementation_key(928)
inline IGRChartAxisPtr IGRChart::GetYAxis ( ) {
    struct IGRChartAxis * _result = 0;
    HRESULT _hr = get_YAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartAxisPtr(_result, false);
}

#pragma implementation_key(929)
inline IGRChartAxisPtr IGRChart::GetY2Axis ( ) {
    struct IGRChartAxis * _result = 0;
    HRESULT _hr = get_Y2Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartAxisPtr(_result, false);
}

#pragma implementation_key(930)
inline IGRChartSeriesCollectionPtr IGRChart::GetSeries ( ) {
    struct IGRChartSeriesCollection * _result = 0;
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRChartSeriesCollectionPtr(_result, false);
}

#pragma implementation_key(931)
inline IGRRecordsetPtr IGRChart::GetRecordset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(932)
inline _bstr_t IGRChart::GetSeriesField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeriesField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(933)
inline void IGRChart::PutSeriesField ( _bstr_t pVal ) {
    HRESULT _hr = put_SeriesField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline VARIANT_BOOL IGRChart::GetSeriesAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline void IGRChart::PutSeriesAuto ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SeriesAuto(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline _bstr_t IGRChart::GetGroupField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(937)
inline void IGRChart::PutGroupField ( _bstr_t pVal ) {
    HRESULT _hr = put_GroupField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline VARIANT_BOOL IGRChart::GetGroupAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void IGRChart::PutGroupAuto ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GroupAuto(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline VARIANT_BOOL IGRChart::GetLegendVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LegendVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void IGRChart::PutLegendVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LegendVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline VARIANT_BOOL IGRChart::GetLegendValueVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LegendValueVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void IGRChart::PutLegendValueVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LegendValueVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline VARIANT_BOOL IGRChart::GetLegendShowSum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LegendShowSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void IGRChart::PutLegendShowSum ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LegendShowSum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline VARIANT_BOOL IGRChart::GetLegendAtBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LegendAtBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void IGRChart::PutLegendAtBottom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LegendAtBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline long IGRChart::GetLegendColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LegendColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void IGRChart::PutLegendColumnCount ( long pVal ) {
    HRESULT _hr = put_LegendColumnCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline _bstr_t IGRChart::GetLegendSumLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LegendSumLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(951)
inline void IGRChart::PutLegendSumLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_LegendSumLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline long IGRChart::GetGroupCount ( ) {
    long _result = 0;
    HRESULT _hr = get_GroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void IGRChart::PutGroupCount ( long pVal ) {
    HRESULT _hr = put_GroupCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline long IGRChart::GetSeriesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void IGRChart::PutSeriesCount ( long pVal ) {
    HRESULT _hr = put_SeriesCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline GRDisplayCursor IGRChart::GetSeriesCursor ( ) {
    GRDisplayCursor _result;
    HRESULT _hr = get_SeriesCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void IGRChart::PutSeriesCursor ( GRDisplayCursor pVal ) {
    HRESULT _hr = put_SeriesCursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline GRDisplayCursor IGRChart::GetLegendCursor ( ) {
    GRDisplayCursor _result;
    HRESULT _hr = get_LegendCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void IGRChart::PutLegendCursor ( GRDisplayCursor pVal ) {
    HRESULT _hr = put_LegendCursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline long IGRChart::GetBarWidthPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_BarWidthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void IGRChart::PutBarWidthPercent ( long pVal ) {
    HRESULT _hr = put_BarWidthPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline VARIANT_BOOL IGRChart::GetNegativeAsZero ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NegativeAsZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void IGRChart::PutNegativeAsZero ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_NegativeAsZero(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline double IGRChart::GetBubbleScalePerCm ( ) {
    double _result = 0;
    HRESULT _hr = get_BubbleScalePerCm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void IGRChart::PutBubbleScalePerCm ( double pVal ) {
    HRESULT _hr = put_BubbleScalePerCm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline _bstr_t IGRChart::GetGroupLabel ( long GroupIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupLabel(GroupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(967)
inline void IGRChart::PutGroupLabel ( long GroupIndex, _bstr_t pVal ) {
    HRESULT _hr = put_GroupLabel(GroupIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline _bstr_t IGRChart::GetSeriesLabel ( long SeriesIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeriesLabel(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(969)
inline void IGRChart::PutSeriesLabel ( long SeriesIndex, _bstr_t pVal ) {
    HRESULT _hr = put_SeriesLabel(SeriesIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline double IGRChart::GetValue ( long SeriesIndex, long GroupIndex ) {
    double _result = 0;
    HRESULT _hr = get_Value(SeriesIndex, GroupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void IGRChart::PutValue ( long SeriesIndex, long GroupIndex, double pVal ) {
    HRESULT _hr = put_Value(SeriesIndex, GroupIndex, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline long IGRChart::GetValueCount ( long SeriesIndex ) {
    long _result = 0;
    HRESULT _hr = get_ValueCount(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline long IGRChart::GetFillColorCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FillColorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline OLE_COLOR IGRChart::GetFillColor ( long Index ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FillColor(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline HRESULT IGRChart::AddFillColor ( OLE_COLOR FillColor ) {
    HRESULT _hr = raw_AddFillColor(FillColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(976)
inline HRESULT IGRChart::EmptyFillColors ( ) {
    HRESULT _hr = raw_EmptyFillColors();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(977)
inline HRESULT IGRChart::PrepareSnapShot ( ) {
    HRESULT _hr = raw_PrepareSnapShot();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(978)
inline HRESULT IGRChart::SnapShot ( ) {
    HRESULT _hr = raw_SnapShot();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(979)
inline VARIANT_BOOL IGRChart::LoadDataFromXML ( _bstr_t XML, VARIANT_BOOL FirstSeries, VARIANT_BOOL AutoSeries, VARIANT_BOOL AutoGroup ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadDataFromXML(XML, FirstSeries, AutoSeries, AutoGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline VARIANT_BOOL IGRChart::LoadXYDataFromXML ( _bstr_t XML, VARIANT_BOOL AutoSeries ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadXYDataFromXML(XML, AutoSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline VARIANT_BOOL IGRChart::LoadXYZDataFromXML ( _bstr_t XML, VARIANT_BOOL AutoSeries ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadXYZDataFromXML(XML, AutoSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline HRESULT IGRChart::AddXYValue ( long SeriesIndex, double XVal, double YVal ) {
    HRESULT _hr = raw_AddXYValue(SeriesIndex, XVal, YVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(983)
inline HRESULT IGRChart::AddXYZValue ( long SeriesIndex, double XVal, double YVal, double ZVal ) {
    HRESULT _hr = raw_AddXYZValue(SeriesIndex, XVal, YVal, ZVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(984)
inline HRESULT IGRChart::EmptyValues ( ) {
    HRESULT _hr = raw_EmptyValues();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(985)
inline HRESULT IGRChart::GetXYValue ( long SeriesIndex, long Index, double * pXVal, double * pYVal ) {
    HRESULT _hr = raw_GetXYValue(SeriesIndex, Index, pXVal, pYVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(986)
inline HRESULT IGRChart::GetXYZValue ( long SeriesIndex, long Index, double * pXVal, double * pYVal, double * pZVal ) {
    HRESULT _hr = raw_GetXYZValue(SeriesIndex, Index, pXVal, pYVal, pZVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(987)
inline _bstr_t IGRChart::GetValueText ( long SeriesIndex, long GroupIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetValueText(SeriesIndex, GroupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(988)
inline HRESULT IGRChart::SetValueText ( long SeriesIndex, long GroupIndex, _bstr_t ValueText ) {
    HRESULT _hr = raw_SetValueText(SeriesIndex, GroupIndex, ValueText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(989)
inline HRESULT IGRChart::MapToRecordset ( long SeriesIndex, long GroupIndex ) {
    HRESULT _hr = raw_MapToRecordset(SeriesIndex, GroupIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(990)
inline OLE_HANDLE IGRChart::Get_SeriesCursorHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__SeriesCursorHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline OLE_HANDLE IGRChart::Get_LegendCursorHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__LegendCursorHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline GRLockType IGRChart::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void IGRChart::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRRecordset wrapper method implementations
//

#pragma implementation_key(994)
inline IGRFieldsPtr IGRRecordset::GetFields ( ) {
    struct IGRFields * _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldsPtr(_result, false);
}

#pragma implementation_key(995)
inline long IGRRecordset::GetRecordCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline long IGRRecordset::GetRecordNo ( ) {
    long _result = 0;
    HRESULT _hr = get_RecordNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline _bstr_t IGRRecordset::GetConnectionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(998)
inline void IGRRecordset::PutConnectionString ( _bstr_t pVal ) {
    HRESULT _hr = put_ConnectionString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(999)
inline _bstr_t IGRRecordset::GetQuerySQL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_QuerySQL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1000)
inline void IGRRecordset::PutQuerySQL ( _bstr_t pVal ) {
    HRESULT _hr = put_QuerySQL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline VARIANT_BOOL IGRRecordset::GetSkipQuery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SkipQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void IGRRecordset::PutSkipQuery ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SkipQuery(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline _bstr_t IGRRecordset::GetXmlTableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XmlTableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1004)
inline void IGRRecordset::PutXmlTableName ( _bstr_t pVal ) {
    HRESULT _hr = put_XmlTableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline _bstr_t IGRRecordset::GetSortFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1006)
inline void IGRRecordset::PutSortFields ( _bstr_t pVal ) {
    HRESULT _hr = put_SortFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline VARIANT_BOOL IGRRecordset::GetSortAsc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortAsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void IGRRecordset::PutSortAsc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SortAsc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline VARIANT_BOOL IGRRecordset::GetSortCaseSensitive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SortCaseSensitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void IGRRecordset::PutSortCaseSensitive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SortCaseSensitive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline VARIANT_BOOL IGRRecordset::GetEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Editable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void IGRRecordset::PutEditable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Editable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline _bstr_t IGRRecordset::GetFetchRecordScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FetchRecordScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1014)
inline void IGRRecordset::PutFetchRecordScript ( _bstr_t pVal ) {
    HRESULT _hr = put_FetchRecordScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline _bstr_t IGRRecordset::GetBeforePostRecordScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BeforePostRecordScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1016)
inline void IGRRecordset::PutBeforePostRecordScript ( _bstr_t pVal ) {
    HRESULT _hr = put_BeforePostRecordScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline _bstr_t IGRRecordset::GetProcessRecordScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProcessRecordScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1018)
inline void IGRRecordset::PutProcessRecordScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ProcessRecordScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline _bstr_t IGRRecordset::GetPageProcessRecordScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageProcessRecordScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1020)
inline void IGRRecordset::PutPageProcessRecordScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PageProcessRecordScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline IGRFieldPtr IGRRecordset::FieldByName ( _bstr_t Name ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_FieldByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1022)
inline IGRFieldPtr IGRRecordset::FieldByDBName ( _bstr_t Name ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_FieldByDBName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1023)
inline HRESULT IGRRecordset::Append ( ) {
    HRESULT _hr = raw_Append();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1024)
inline HRESULT IGRRecordset::Edit ( ) {
    HRESULT _hr = raw_Edit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1025)
inline HRESULT IGRRecordset::Cancel ( ) {
    HRESULT _hr = raw_Cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1026)
inline HRESULT IGRRecordset::Post ( ) {
    HRESULT _hr = raw_Post();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1027)
inline HRESULT IGRRecordset::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1028)
inline HRESULT IGRRecordset::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1029)
inline HRESULT IGRRecordset::Prior ( ) {
    HRESULT _hr = raw_Prior();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1030)
inline HRESULT IGRRecordset::Last ( ) {
    HRESULT _hr = raw_Last();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1031)
inline HRESULT IGRRecordset::MoveBy ( int Delta ) {
    HRESULT _hr = raw_MoveBy(Delta);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1032)
inline VARIANT_BOOL IGRRecordset::Bof ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Bof(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline VARIANT_BOOL IGRRecordset::Eof ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Eof(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline HRESULT IGRRecordset::MoveTo ( long RecordNo ) {
    HRESULT _hr = raw_MoveTo(RecordNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1035)
inline HRESULT IGRRecordset::Empty ( ) {
    HRESULT _hr = raw_Empty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1036)
inline IGRFieldPtr IGRRecordset::AddField ( _bstr_t Name, GRFieldType FieldType ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_AddField(Name, FieldType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1037)
inline HRESULT IGRRecordset::RemoveAllFields ( ) {
    HRESULT _hr = raw_RemoveAllFields();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1038)
inline VARIANT_BOOL IGRRecordset::Resort ( _bstr_t Fields, VARIANT_BOOL Ascending, VARIANT_BOOL CaseSensitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Resort(Fields, Ascending, CaseSensitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline _bstr_t IGRRecordset::SaveDataToXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveDataToXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1040)
inline VARIANT_BOOL IGRRecordset::LoadData ( _bstr_t File ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadData(File, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline VARIANT_BOOL IGRRecordset::LoadDataFromXML ( _bstr_t XMLText ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadDataFromXML(XMLText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline GRLockType IGRRecordset::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1043)
inline void IGRRecordset::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRCrossTab wrapper method implementations
//

#pragma implementation_key(1044)
inline _bstr_t IGRCrossTab::GetHCrossFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HCrossFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1045)
inline void IGRCrossTab::PutHCrossFields ( _bstr_t pVal ) {
    HRESULT _hr = put_HCrossFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1046)
inline _bstr_t IGRCrossTab::GetVCrossFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VCrossFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1047)
inline void IGRCrossTab::PutVCrossFields ( _bstr_t pVal ) {
    HRESULT _hr = put_VCrossFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1048)
inline long IGRCrossTab::GetListCols ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1049)
inline void IGRCrossTab::PutListCols ( long pVal ) {
    HRESULT _hr = put_ListCols(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1050)
inline long IGRCrossTab::GetTotalCols ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1051)
inline void IGRCrossTab::PutTotalCols ( long pVal ) {
    HRESULT _hr = put_TotalCols(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1052)
inline long IGRCrossTab::GetSubtotalCols ( ) {
    long _result = 0;
    HRESULT _hr = get_SubtotalCols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1053)
inline void IGRCrossTab::PutSubtotalCols ( long pVal ) {
    HRESULT _hr = put_SubtotalCols(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline VARIANT_BOOL IGRCrossTab::GetHResort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HResort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1055)
inline void IGRCrossTab::PutHResort ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HResort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1056)
inline VARIANT_BOOL IGRCrossTab::GetHSortAsc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HSortAsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline void IGRCrossTab::PutHSortAsc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HSortAsc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1058)
inline VARIANT_BOOL IGRCrossTab::GetVResort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VResort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline void IGRCrossTab::PutVResort ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_VResort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1060)
inline VARIANT_BOOL IGRCrossTab::GetVSortAsc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VSortAsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1061)
inline void IGRCrossTab::PutVSortAsc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_VSortAsc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1062)
inline VARIANT_BOOL IGRCrossTab::GetHTotalAtFirst ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HTotalAtFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline void IGRCrossTab::PutHTotalAtFirst ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HTotalAtFirst(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline _bstr_t IGRCrossTab::GetHPercentColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HPercentColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1065)
inline void IGRCrossTab::PutHPercentColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_HPercentColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline _bstr_t IGRCrossTab::GetVPercentColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VPercentColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1067)
inline void IGRCrossTab::PutVPercentColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_VPercentColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1068)
inline _bstr_t IGRCrossTab::GetTotalExcludeColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TotalExcludeColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1069)
inline void IGRCrossTab::PutTotalExcludeColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_TotalExcludeColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1070)
inline _bstr_t IGRCrossTab::GetTotalHPercentColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TotalHPercentColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1071)
inline void IGRCrossTab::PutTotalHPercentColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_TotalHPercentColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1072)
inline _bstr_t IGRCrossTab::GetTotalVPercentColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TotalVPercentColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1073)
inline void IGRCrossTab::PutTotalVPercentColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_TotalVPercentColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1074)
inline _bstr_t IGRCrossTab::GetPercentFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PercentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1075)
inline void IGRCrossTab::PutPercentFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_PercentFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline GRPeriodType IGRCrossTab::GetHCrossPeriodType ( ) {
    GRPeriodType _result;
    HRESULT _hr = get_HCrossPeriodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void IGRCrossTab::PutHCrossPeriodType ( GRPeriodType pVal ) {
    HRESULT _hr = put_HCrossPeriodType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline _bstr_t IGRCrossTab::GetBeginDateParameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BeginDateParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1079)
inline void IGRCrossTab::PutBeginDateParameter ( _bstr_t pVal ) {
    HRESULT _hr = put_BeginDateParameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline _bstr_t IGRCrossTab::GetEndDateParameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EndDateParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1081)
inline void IGRCrossTab::PutEndDateParameter ( _bstr_t pVal ) {
    HRESULT _hr = put_EndDateParameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1082)
inline VARIANT_BOOL IGRCrossTab::GetGroupAutoSum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupAutoSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void IGRCrossTab::PutGroupAutoSum ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GroupAutoSum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline IGRRecordsetPtr IGRCrossTab::GetRecordset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(1085)
inline HRESULT IGRCrossTab::HBeginAddItem ( ) {
    HRESULT _hr = raw_HBeginAddItem();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1086)
inline HRESULT IGRCrossTab::HEndAddItem ( ) {
    HRESULT _hr = raw_HEndAddItem();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1087)
inline HRESULT IGRCrossTab::VBeginAddItem ( ) {
    HRESULT _hr = raw_VBeginAddItem();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1088)
inline HRESULT IGRCrossTab::VEndAddItem ( ) {
    HRESULT _hr = raw_VEndAddItem();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1089)
inline DATE IGRCrossTab::GetCurPeriodBeginDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCurPeriodBeginDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline DATE IGRCrossTab::GetCurPeriodEndDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCurPeriodEndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline _bstr_t IGRCrossTab::GetDisabledSumFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisabledSumFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1092)
inline void IGRCrossTab::PutDisabledSumFields ( _bstr_t pVal ) {
    HRESULT _hr = put_DisabledSumFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline GRLockType IGRCrossTab::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void IGRCrossTab::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFields wrapper method implementations
//

#pragma implementation_key(1095)
inline IGRFieldPtr IGRFields::GetItem ( const _variant_t & Index ) {
    struct IGRField * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1096)
inline IUnknownPtr IGRFields::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1097)
inline long IGRFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline IGRFieldPtr IGRFields::Add ( ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1099)
inline HRESULT IGRFields::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1100)
inline HRESULT IGRFields::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1101)
inline long IGRFields::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline IGRFieldPtr IGRFields::ItemAt ( long Index ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1103)
inline HRESULT IGRFields::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRField wrapper method implementations
//

#pragma implementation_key(1104)
inline _bstr_t IGRField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1105)
inline void IGRField::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1106)
inline _bstr_t IGRField::GetDBFieldName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DBFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1107)
inline void IGRField::PutDBFieldName ( _bstr_t pVal ) {
    HRESULT _hr = put_DBFieldName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline GRFieldType IGRField::GetFieldType ( ) {
    GRFieldType _result;
    HRESULT _hr = get_FieldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline void IGRField::PutFieldType ( GRFieldType pVal ) {
    HRESULT _hr = put_FieldType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline long IGRField::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline void IGRField::PutLength ( long pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1112)
inline VARIANT_BOOL IGRField::GetRTrimBlankChars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RTrimBlankChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1113)
inline void IGRField::PutRTrimBlankChars ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RTrimBlankChars(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline _bstr_t IGRField::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1115)
inline void IGRField::PutFormat ( _bstr_t pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline _variant_t IGRField::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1117)
inline void IGRField::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1118)
inline VARIANT_BOOL IGRField::GetAsBoolean ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBoolean(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void IGRField::PutAsBoolean ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AsBoolean(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline CURRENCY IGRField::GetAsCurrency ( ) {
    CURRENCY _result;
    HRESULT _hr = get_AsCurrency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1121)
inline void IGRField::PutAsCurrency ( const CURRENCY & pVal ) {
    HRESULT _hr = put_AsCurrency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1122)
inline DATE IGRField::GetAsDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_AsDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void IGRField::PutAsDateTime ( DATE pVal ) {
    HRESULT _hr = put_AsDateTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline double IGRField::GetAsFloat ( ) {
    double _result = 0;
    HRESULT _hr = get_AsFloat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline void IGRField::PutAsFloat ( double pVal ) {
    HRESULT _hr = put_AsFloat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline long IGRField::GetAsInteger ( ) {
    long _result = 0;
    HRESULT _hr = get_AsInteger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1127)
inline void IGRField::PutAsInteger ( long pVal ) {
    HRESULT _hr = put_AsInteger(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline _bstr_t IGRField::GetAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline void IGRField::PutAsString ( _bstr_t pVal ) {
    HRESULT _hr = put_AsString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline _bstr_t IGRField::GetDisplayText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1131)
inline void IGRField::PutDisplayText ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline VARIANT_BOOL IGRField::GetIsNull ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNull(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline long IGRField::GetDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline LONG_PTR IGRField::GetDataBuffer ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_DataBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1135)
inline _bstr_t IGRField::GetRunningDBField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RunningDBField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1136)
inline _bstr_t IGRField::GetGetDisplayTextScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GetDisplayTextScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1137)
inline void IGRField::PutGetDisplayTextScript ( _bstr_t pVal ) {
    HRESULT _hr = put_GetDisplayTextScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline HRESULT IGRField::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1139)
inline HRESULT IGRField::LoadFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1140)
inline HRESULT IGRField::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject ) {
    HRESULT _hr = raw_LoadFromBinary(pBinaryObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1141)
inline HRESULT IGRField::LoadFromMemory ( unsigned char * pBuffer, long ByteCount ) {
    HRESULT _hr = raw_LoadFromMemory(pBuffer, ByteCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1142)
inline GRLockType IGRField::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1143)
inline void IGRField::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRBinaryObject wrapper method implementations
//

#pragma implementation_key(1144)
inline long IGRBinaryObject::GetDataSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DataSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline _bstr_t IGRBinaryObject::GetAsBase64Text ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AsBase64Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1146)
inline VARIANT_BOOL IGRBinaryObject::LoadFromFile ( _bstr_t PathFile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromFile(PathFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1147)
inline VARIANT_BOOL IGRBinaryObject::LoadFromField ( struct IGRField * Field ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromField(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline VARIANT_BOOL IGRBinaryObject::LoadFromBase64Text ( _bstr_t Base64Text ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromBase64Text(Base64Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1149)
inline VARIANT_BOOL IGRBinaryObject::LoadFromVariant ( const _variant_t & Buf ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromVariant(Buf, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline VARIANT_BOOL IGRBinaryObject::SaveToFile ( _bstr_t PathFile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveToFile(PathFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline _variant_t IGRBinaryObject::SaveToVariant ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1152)
inline HRESULT IGRBinaryObject::LoadFromMemory ( unsigned char * pData, long ByteCount ) {
    HRESULT _hr = raw_LoadFromMemory(pData, ByteCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1153)
inline OLE_HANDLE IGRBinaryObject::GetDataBuf ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get_DataBuf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGRPicture wrapper method implementations
//

#pragma implementation_key(1154)
inline GRPictureType IGRPicture::GetType ( ) {
    GRPictureType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline long IGRPicture::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline long IGRPicture::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1157)
inline IPicturePtr IGRPicture::GetOlePicture ( ) {
    struct IPicture * _result = 0;
    HRESULT _hr = get_OlePicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPicturePtr(_result, false);
}

#pragma implementation_key(1158)
inline void IGRPicture::PutOlePicture ( struct IPicture * pVal ) {
    HRESULT _hr = put_OlePicture(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline HRESULT IGRPicture::Render ( OLE_HANDLE hdc, long Left, long Top, long Width, long Height, GRPictureAlignment PictureAlignment, GRPictureSizeMode PictureSizeMode, unsigned long BackColor, VARIANT_BOOL FillBack, GRPictureTransparentMode Transparent, GRPictureRotateMode RotateMode ) {
    HRESULT _hr = raw_Render(hdc, Left, Top, Width, Height, PictureAlignment, PictureSizeMode, BackColor, FillBack, Transparent, RotateMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1160)
inline VARIANT_BOOL IGRPicture::LoadFromFile ( _bstr_t PathFile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromFile(PathFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline VARIANT_BOOL IGRPicture::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromBinary(pBinaryObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1162)
inline VARIANT_BOOL IGRPicture::SaveToFile ( _bstr_t PathFile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveToFile(PathFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline HRESULT IGRPicture::LoadFromMemory ( unsigned char * pData, long ByteCount ) {
    HRESULT _hr = raw_LoadFromMemory(pData, ByteCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1164)
inline HRESULT IGRPicture::_GetDataBuffer ( OLE_HANDLE * ppData, long * pBytesCount ) {
    HRESULT _hr = raw__GetDataBuffer(ppData, pBytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1165)
inline VARIANT_BOOL IGRPicture::LoadFromField ( _bstr_t DataField ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromField(DataField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGRPictureBox wrapper method implementations
//

#pragma implementation_key(1166)
inline GRPictureAlignment IGRPictureBox::GetAlignment ( ) {
    GRPictureAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void IGRPictureBox::PutAlignment ( GRPictureAlignment pVal ) {
    HRESULT _hr = put_Alignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline GRPictureSizeMode IGRPictureBox::GetSizeMode ( ) {
    GRPictureSizeMode _result;
    HRESULT _hr = get_SizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline void IGRPictureBox::PutSizeMode ( GRPictureSizeMode pVal ) {
    HRESULT _hr = put_SizeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1170)
inline _bstr_t IGRPictureBox::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1171)
inline void IGRPictureBox::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1172)
inline long IGRPictureBox::GetImageIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ImageIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1173)
inline void IGRPictureBox::PutImageIndex ( long pVal ) {
    HRESULT _hr = put_ImageIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline _bstr_t IGRPictureBox::GetImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1175)
inline void IGRPictureBox::PutImageFile ( _bstr_t pVal ) {
    HRESULT _hr = put_ImageFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline GRPictureTransparentMode IGRPictureBox::GetTransparentMode ( ) {
    GRPictureTransparentMode _result;
    HRESULT _hr = get_TransparentMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline void IGRPictureBox::PutTransparentMode ( GRPictureTransparentMode pVal ) {
    HRESULT _hr = put_TransparentMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline GRPictureRotateMode IGRPictureBox::GetRotateMode ( ) {
    GRPictureRotateMode _result;
    HRESULT _hr = get_RotateMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline void IGRPictureBox::PutRotateMode ( GRPictureRotateMode pVal ) {
    HRESULT _hr = put_RotateMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline IGRPicturePtr IGRPictureBox::GetPicture ( ) {
    struct IGRPicture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPicturePtr(_result, false);
}

#pragma implementation_key(1181)
inline void IGRPictureBox::PutPicture ( struct IGRPicture * pVal ) {
    HRESULT _hr = put_Picture(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline HRESULT IGRPictureBox::LoadFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1183)
inline HRESULT IGRPictureBox::LoadFromBinary ( struct IGRBinaryObject * pBinaryObject ) {
    HRESULT _hr = raw_LoadFromBinary(pBinaryObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1184)
inline HRESULT IGRPictureBox::LoadFromMemory ( unsigned char * pBuffer, long BytesCount ) {
    HRESULT _hr = raw_LoadFromMemory(pBuffer, BytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1185)
inline HRESULT IGRPictureBox::LoadBmpPicture ( struct IPicture * newVal ) {
    HRESULT _hr = raw_LoadBmpPicture(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1186)
inline HRESULT IGRPictureBox::AttachSystemImage ( GRSystemImage SystemImage ) {
    HRESULT _hr = raw_AttachSystemImage(SystemImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1187)
inline GRLockType IGRPictureBox::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void IGRPictureBox::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRImageList wrapper method implementations
//

#pragma implementation_key(1189)
inline IGRPicturePtr IGRImageList::GetItem ( long Index ) {
    struct IGRPicture * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPicturePtr(_result, false);
}

#pragma implementation_key(1190)
inline long IGRImageList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1191)
inline HRESULT IGRImageList::Add ( struct IGRPicture * pPicture ) {
    HRESULT _hr = raw_Add(pPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1192)
inline HRESULT IGRImageList::AddFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_AddFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1193)
inline HRESULT IGRImageList::AddFromBinary ( struct IGRBinaryObject * pBinaryObject ) {
    HRESULT _hr = raw_AddFromBinary(pBinaryObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1194)
inline HRESULT IGRImageList::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1195)
inline HRESULT IGRImageList::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1196)
inline HRESULT IGRImageList::AddFromMemory ( unsigned char * pData, long ByteCount ) {
    HRESULT _hr = raw_AddFromMemory(pData, ByteCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1197)
inline GRLockType IGRImageList::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void IGRImageList::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRGraphics wrapper method implementations
//

#pragma implementation_key(1199)
inline HRESULT IGRGraphics::MoveTo ( double x, double y ) {
    HRESULT _hr = raw_MoveTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1200)
inline HRESULT IGRGraphics::LineTo ( double x, double y ) {
    HRESULT _hr = raw_LineTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1201)
inline HRESULT IGRGraphics::FillRect ( double x, double y, double Width, double Height, OLE_COLOR FillColor ) {
    HRESULT _hr = raw_FillRect(x, y, Width, Height, FillColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1202)
inline HRESULT IGRGraphics::DrawPixel ( double x, double y, OLE_COLOR Color ) {
    HRESULT _hr = raw_DrawPixel(x, y, Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1203)
inline HRESULT IGRGraphics::Rectangle ( double x, double y, double Width, double Height, VARIANT_BOOL ToFill ) {
    HRESULT _hr = raw_Rectangle(x, y, Width, Height, ToFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1204)
inline HRESULT IGRGraphics::RoundRect ( double x, double y, double Width, double Height, long cornerx, long cornery, VARIANT_BOOL ToFill ) {
    HRESULT _hr = raw_RoundRect(x, y, Width, Height, cornerx, cornery, ToFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1205)
inline HRESULT IGRGraphics::Ellipse ( double x, double y, double Width, double Height, VARIANT_BOOL ToFill ) {
    HRESULT _hr = raw_Ellipse(x, y, Width, Height, ToFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1206)
inline HRESULT IGRGraphics::Pie ( double x, double y, double r, double BeginAngleDegree, double EndAngleDegree, VARIANT_BOOL ToFill ) {
    HRESULT _hr = raw_Pie(x, y, r, BeginAngleDegree, EndAngleDegree, ToFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1207)
inline HRESULT IGRGraphics::Arc ( double cx, double cy, double r, double BeginAngleDegree, double EndAngleDegree ) {
    HRESULT _hr = raw_Arc(cx, cy, r, BeginAngleDegree, EndAngleDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1208)
inline HRESULT IGRGraphics::EllipseArc ( double Left, double Top, double Width, double Height, double BeginAngleDegree, double EndAngleDegree ) {
    HRESULT _hr = raw_EllipseArc(Left, Top, Width, Height, BeginAngleDegree, EndAngleDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1209)
inline HRESULT IGRGraphics::EllipsePie ( double Left, double Top, double Width, double Height, double BeginAngleDegree, double EndAngleDegree, VARIANT_BOOL ToFill ) {
    HRESULT _hr = raw_EllipsePie(Left, Top, Width, Height, BeginAngleDegree, EndAngleDegree, ToFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1210)
inline HRESULT IGRGraphics::DrawLabelText ( _bstr_t String, double x, double y ) {
    HRESULT _hr = raw_DrawLabelText(String, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1211)
inline HRESULT IGRGraphics::DrawRotateText ( _bstr_t String, double x, double y, double RotateDegree ) {
    HRESULT _hr = raw_DrawRotateText(String, x, y, RotateDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1212)
inline HRESULT IGRGraphics::DrawText ( _bstr_t String, double x, double y, double Width, double Height, GRTextAlign TextAlign, VARIANT_BOOL WordWrap ) {
    HRESULT _hr = raw_DrawText(String, x, y, Width, Height, TextAlign, WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1213)
inline HRESULT IGRGraphics::DrawFormatText ( _bstr_t String, double x, double y, double Width, double Height, struct IGRTextFormat * TextFormat ) {
    HRESULT _hr = raw_DrawFormatText(String, x, y, Width, Height, TextFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1214)
inline double IGRGraphics::CalcLabelTextWidth ( _bstr_t String ) {
    double _result = 0;
    HRESULT _hr = raw_CalcLabelTextWidth(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline double IGRGraphics::CalcLabelTextHeight ( _bstr_t String ) {
    double _result = 0;
    HRESULT _hr = raw_CalcLabelTextHeight(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline long IGRGraphics::CalcTextOutLen ( double Width, double Height, _bstr_t Text, VARIANT_BOOL WordWrap ) {
    long _result = 0;
    HRESULT _hr = raw_CalcTextOutLen(Width, Height, Text, WordWrap, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline HRESULT IGRGraphics::DrawPicture ( struct IGRPicture * pPicture, double Left, double Top, double Width, double Height, GRPictureAlignment PictureAlignment, GRPictureSizeMode PictureSizeMode, GRPictureTransparentMode Transparent ) {
    HRESULT _hr = raw_DrawPicture(pPicture, Left, Top, Width, Height, PictureAlignment, PictureSizeMode, Transparent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1218)
inline HRESULT IGRGraphics::SelectFont ( struct IGRFont * pFont ) {
    HRESULT _hr = raw_SelectFont(pFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1219)
inline HRESULT IGRGraphics::RestoreFont ( ) {
    HRESULT _hr = raw_RestoreFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1220)
inline HRESULT IGRGraphics::FontPointChangeTo ( double Point ) {
    HRESULT _hr = raw_FontPointChangeTo(Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1221)
inline HRESULT IGRGraphics::FontPointRestore ( ) {
    HRESULT _hr = raw_FontPointRestore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1222)
inline HRESULT IGRGraphics::SelectTextColor ( OLE_COLOR TextColor ) {
    HRESULT _hr = raw_SelectTextColor(TextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1223)
inline HRESULT IGRGraphics::RestoreTextColor ( ) {
    HRESULT _hr = raw_RestoreTextColor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1224)
inline HRESULT IGRGraphics::SelectPen ( double PenWidth, OLE_COLOR PenColor, GRPenStyle PenStyle ) {
    HRESULT _hr = raw_SelectPen(PenWidth, PenColor, PenStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1225)
inline HRESULT IGRGraphics::RestorePen ( ) {
    HRESULT _hr = raw_RestorePen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1226)
inline HRESULT IGRGraphics::SelectFillColor ( OLE_COLOR BrushColor ) {
    HRESULT _hr = raw_SelectFillColor(BrushColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT IGRGraphics::RestoreFillColor ( ) {
    HRESULT _hr = raw_RestoreFillColor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1228)
inline HRESULT IGRGraphics::PushClipRect ( double x, double y, double Width, double Height ) {
    HRESULT _hr = raw_PushClipRect(x, y, Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1229)
inline HRESULT IGRGraphics::PopClipRect ( ) {
    HRESULT _hr = raw_PopClipRect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1230)
inline double IGRGraphics::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1231)
inline double IGRGraphics::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline double IGRGraphics::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline double IGRGraphics::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline VARIANT_BOOL IGRGraphics::GetByUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ByUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline void IGRGraphics::PutByUnit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ByUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline double IGRGraphics::GetCCPInnerX ( ) {
    double _result = 0;
    HRESULT _hr = get_CCPInnerX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline double IGRGraphics::GetCCPInnerY ( ) {
    double _result = 0;
    HRESULT _hr = get_CCPInnerY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline double IGRGraphics::GetCCPOuterX ( ) {
    double _result = 0;
    HRESULT _hr = get_CCPOuterX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline double IGRGraphics::GetCCPOuterY ( ) {
    double _result = 0;
    HRESULT _hr = get_CCPOuterY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline HRESULT IGRGraphics::CurveTo ( double xInnerControl, double yInnerControl, double xOuterControl, double yOuterControl, double xEnd, double yEnd ) {
    HRESULT _hr = raw_CurveTo(xInnerControl, yInnerControl, xOuterControl, yOuterControl, xEnd, yEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1241)
inline HRESULT IGRGraphics::CalcCurveControlPoints ( double xFirst, double yFirst, double xMiddle, double yMiddle, double xAfter, double yAfter ) {
    HRESULT _hr = raw_CalcCurveControlPoints(xFirst, yFirst, xMiddle, yMiddle, xAfter, yAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1242)
inline HRESULT IGRGraphics::DrawPointMarker ( GRPointMarkerStyle MarkerStyle, double cx, double cy, double size ) {
    HRESULT _hr = raw_DrawPointMarker(MarkerStyle, cx, cy, size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1243)
inline HRESULT IGRGraphics::DrawFormatTextShrinkToFit ( _bstr_t String, double x, double y, double Width, double Height, struct IGRTextFormat * TextFormat ) {
    HRESULT _hr = raw_DrawFormatTextShrinkToFit(String, x, y, Width, Height, TextFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1244)
inline double IGRGraphics::CalcDrawFormatTextHeight ( _bstr_t String, double Width, struct IGRTextFormat * TextFormat ) {
    double _result = 0;
    HRESULT _hr = raw_CalcDrawFormatTextHeight(String, Width, TextFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline double IGRGraphics::CalcDrawFormatTextWidth ( _bstr_t String, struct IGRTextFormat * TextFormat ) {
    double _result = 0;
    HRESULT _hr = raw_CalcDrawFormatTextWidth(String, TextFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline long IGRGraphics::CalcDrawFormatTextOutLen ( _bstr_t Text, double Width, double Height, struct IGRTextFormat * TextFormat ) {
    long _result = 0;
    HRESULT _hr = raw_CalcDrawFormatTextOutLen(Text, Width, Height, TextFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGRUtility wrapper method implementations
//

#pragma implementation_key(1247)
inline IGRPicturePtr IGRUtility::CreatePicture ( ) {
    struct IGRPicture * _result = 0;
    HRESULT _hr = raw_CreatePicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPicturePtr(_result, false);
}

#pragma implementation_key(1248)
inline IGRRecordsetPtr IGRUtility::CreateRecordset ( ) {
    struct IGRRecordset * _result = 0;
    HRESULT _hr = raw_CreateRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRRecordsetPtr(_result, false);
}

#pragma implementation_key(1249)
inline IGRTextFormatPtr IGRUtility::CreateTextFormat ( ) {
    struct IGRTextFormat * _result = 0;
    HRESULT _hr = raw_CreateTextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRTextFormatPtr(_result, false);
}

#pragma implementation_key(1250)
inline IGRBinaryObjectPtr IGRUtility::CreateBinaryObject ( ) {
    struct IGRBinaryObject * _result = 0;
    HRESULT _hr = raw_CreateBinaryObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBinaryObjectPtr(_result, false);
}

#pragma implementation_key(1251)
inline IGRDateTimePtr IGRUtility::CreateDateTime ( ) {
    struct IGRDateTime * _result = 0;
    HRESULT _hr = raw_CreateDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDateTimePtr(_result, false);
}

#pragma implementation_key(1252)
inline _bstr_t IGRUtility::NumberFormat ( double Value, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NumberFormat(Value, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1253)
inline _bstr_t IGRUtility::NumberFormatToEnglish ( double Value, long Decimals ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NumberFormatToEnglish(Value, Decimals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1254)
inline _bstr_t IGRUtility::NumberFormatToBigHZ ( double Value, long Decimals ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NumberFormatToBigHZ(Value, Decimals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1255)
inline _bstr_t IGRUtility::NumberFormatToBigHZAmount ( double Value ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NumberFormatToBigHZAmount(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1256)
inline double IGRUtility::NumberRound45 ( double Value, long Decimals ) {
    double _result = 0;
    HRESULT _hr = raw_NumberRound45(Value, Decimals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline double IGRUtility::NumberRound465 ( double Value, long Decimals ) {
    double _result = 0;
    HRESULT _hr = raw_NumberRound465(Value, Decimals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline _bstr_t IGRUtility::DateTimeFormat ( DATE Date, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DateTimeFormat(Date, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1259)
inline long IGRUtility::GetTooltipHoverTime ( ) {
    long _result = 0;
    HRESULT _hr = get_TooltipHoverTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline void IGRUtility::PutTooltipHoverTime ( long pVal ) {
    HRESULT _hr = put_TooltipHoverTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline HRESULT IGRUtility::GetSkin ( long * ColorRed, long * ColorGreen, long * ColorBlue, long * Style ) {
    HRESULT _hr = raw_GetSkin(ColorRed, ColorGreen, ColorBlue, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1262)
inline HRESULT IGRUtility::SetSkin ( long ColorRed, long ColorGreen, long ColorBlue, long Style ) {
    HRESULT _hr = raw_SetSkin(ColorRed, ColorGreen, ColorBlue, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1263)
inline HRESULT IGRUtility::SetHyperlinkClickedColor ( long ColorRed, long ColorGreen, long ColorBlue ) {
    HRESULT _hr = raw_SetHyperlinkClickedColor(ColorRed, ColorGreen, ColorBlue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1264)
inline HRESULT IGRUtility::LoadDefaultPreviewWinIcon ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadDefaultPreviewWinIcon(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1265)
inline _variant_t IGRUtility::GZCompress ( const _variant_t & Val ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GZCompress(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1266)
inline _variant_t IGRUtility::GZUncompress ( const _variant_t & Val ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GZUncompress(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1267)
inline HRESULT IGRUtility::HTTPRequestSend ( _bstr_t URL, const _variant_t & data ) {
    HRESULT _hr = raw_HTTPRequestSend(URL, data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1268)
inline _bstr_t IGRUtility::ShowFolderDialog ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ShowFolderDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1269)
inline _bstr_t IGRUtility::ShowOpenFileDialog ( _bstr_t FileType, _bstr_t ExtFile, _bstr_t DefaultFile ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ShowOpenFileDialog(FileType, ExtFile, DefaultFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1270)
inline _bstr_t IGRUtility::ShowSaveFileDialog ( _bstr_t FileType, _bstr_t ExtFile, _bstr_t DefaultFile ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ShowSaveFileDialog(FileType, ExtFile, DefaultFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1271)
inline long IGRUtility::GetPrinterCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPrinterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline _bstr_t IGRUtility::GetPrinterName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPrinterName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1273)
inline long IGRUtility::GetPrinterPaperCount ( _bstr_t PrinterName ) {
    long _result = 0;
    HRESULT _hr = raw_GetPrinterPaperCount(PrinterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline _bstr_t IGRUtility::GetPrinterPaperName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPrinterPaperName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1275)
inline HRESULT IGRUtility::DisableDebug ( ) {
    HRESULT _hr = raw_DisableDebug();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1276)
inline HRESULT IGRUtility::SetMoneyLabelText ( _bstr_t MoneyLabelText ) {
    HRESULT _hr = raw_SetMoneyLabelText(MoneyLabelText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1277)
inline VARIANT_BOOL IGRUtility::GetTextWrapByWord ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextWrapByWord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline void IGRUtility::PutTextWrapByWord ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextWrapByWord(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline VARIANT_BOOL IGRUtility::GetTextWrapToJustify ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextWrapToJustify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline void IGRUtility::PutTextWrapToJustify ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextWrapToJustify(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline _bstr_t IGRUtility::GetTextLeftPunctuations ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextLeftPunctuations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1282)
inline void IGRUtility::PutTextLeftPunctuations ( _bstr_t pVal ) {
    HRESULT _hr = put_TextLeftPunctuations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1283)
inline _bstr_t IGRUtility::GetTextRightPunctuations ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextRightPunctuations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1284)
inline void IGRUtility::PutTextRightPunctuations ( _bstr_t pVal ) {
    HRESULT _hr = put_TextRightPunctuations(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1285)
inline OLE_COLOR IGRUtility::ColorFromRGB ( long r, long g, long b ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_ColorFromRGB(r, g, b, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1286)
inline _bstr_t IGRUtility::_GetResString ( long ResID ) {
    BSTR _result = 0;
    HRESULT _hr = raw__GetResString(ResID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IGRSubReport wrapper method implementations
//

#pragma implementation_key(1287)
inline IGridppReportPtr IGRSubReport::GetReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1288)
inline void IGRSubReport::PutReport ( struct IGridppReport * pVal ) {
    HRESULT _hr = put_Report(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1289)
inline VARIANT_BOOL IGRSubReport::GetCanGrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1290)
inline void IGRSubReport::PutCanGrow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanGrow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1291)
inline VARIANT_BOOL IGRSubReport::GetCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1292)
inline void IGRSubReport::PutCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline VARIANT_BOOL IGRSubReport::GetSpanToNewPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SpanToNewPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1294)
inline void IGRSubReport::PutSpanToNewPage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SpanToNewPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline VARIANT_BOOL IGRSubReport::GetParentPageSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentPageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline void IGRSubReport::PutParentPageSettings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ParentPageSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline VARIANT_BOOL IGRSubReport::GetResetPageNumber ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResetPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline void IGRSubReport::PutResetPageNumber ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResetPageNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline VARIANT_BOOL IGRSubReport::GetToNewExcelSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToNewExcelSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline void IGRSubReport::PutToNewExcelSheet ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ToNewExcelSheet(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1301)
inline VARIANT_BOOL IGRSubReport::GetHideOnRecordsetEmpty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideOnRecordsetEmpty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline void IGRSubReport::PutHideOnRecordsetEmpty ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HideOnRecordsetEmpty(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline _bstr_t IGRSubReport::GetRelationFields ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RelationFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline void IGRSubReport::PutRelationFields ( _bstr_t pVal ) {
    HRESULT _hr = put_RelationFields(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1305)
inline _bstr_t IGRSubReport::GetReportFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReportFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1306)
inline void IGRSubReport::PutReportFile ( _bstr_t pVal ) {
    HRESULT _hr = put_ReportFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1307)
inline HRESULT IGRSubReport::_ResetSaveFlag ( ) {
    HRESULT _hr = raw__ResetSaveFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1308)
inline GRLockType IGRSubReport::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void IGRSubReport::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGridppReport wrapper method implementations
//

#pragma implementation_key(1310)
inline _bstr_t IGridppReport::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1311)
inline long IGridppReport::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1312)
inline void IGridppReport::PutLanguage ( long pVal ) {
    HRESULT _hr = put_Language(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1313)
inline IGRFontPtr IGridppReport::GetFont ( ) {
    struct IGRFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFontPtr(_result, false);
}

#pragma implementation_key(1314)
inline OLE_COLOR IGridppReport::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void IGridppReport::PutBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline IGRDetailGridPtr IGridppReport::GetDetailGrid ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = get_DetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(1317)
inline IGRPageHeaderPtr IGridppReport::GetPageHeader ( ) {
    struct IGRPageHeader * _result = 0;
    HRESULT _hr = get_PageHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPageHeaderPtr(_result, false);
}

#pragma implementation_key(1318)
inline IGRPageFooterPtr IGridppReport::GetPageFooter ( ) {
    struct IGRPageFooter * _result = 0;
    HRESULT _hr = get_PageFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPageFooterPtr(_result, false);
}

#pragma implementation_key(1319)
inline IGRParametersPtr IGridppReport::GetParameters ( ) {
    struct IGRParameters * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParametersPtr(_result, false);
}

#pragma implementation_key(1320)
inline IGRReportHeadersPtr IGridppReport::GetReportHeaders ( ) {
    struct IGRReportHeaders * _result = 0;
    HRESULT _hr = get_ReportHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeadersPtr(_result, false);
}

#pragma implementation_key(1321)
inline IGRReportFootersPtr IGridppReport::GetReportFooters ( ) {
    struct IGRReportFooters * _result = 0;
    HRESULT _hr = get_ReportFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFootersPtr(_result, false);
}

#pragma implementation_key(1322)
inline IGRControlsPtr IGridppReport::GetFloatControls ( ) {
    struct IGRControls * _result = 0;
    HRESULT _hr = get_FloatControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlsPtr(_result, false);
}

#pragma implementation_key(1323)
inline IGRImageListPtr IGridppReport::GetImageList ( ) {
    struct IGRImageList * _result = 0;
    HRESULT _hr = get_ImageList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRImageListPtr(_result, false);
}

#pragma implementation_key(1324)
inline IGRPrinterPtr IGridppReport::GetPrinter ( ) {
    struct IGRPrinter * _result = 0;
    HRESULT _hr = get_Printer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPrinterPtr(_result, false);
}

#pragma implementation_key(1325)
inline IGridppReportPtr IGridppReport::GetParentReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = get_ParentReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1326)
inline IGridppReportPtr IGridppReport::GetFiringReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = get_FiringReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1327)
inline IGRGraphicsPtr IGridppReport::GetGraphics ( ) {
    struct IGRGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRGraphicsPtr(_result, false);
}

#pragma implementation_key(1328)
inline IGRUtilityPtr IGridppReport::GetUtility ( ) {
    struct IGRUtility * _result = 0;
    HRESULT _hr = get_Utility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRUtilityPtr(_result, false);
}

#pragma implementation_key(1329)
inline long IGridppReport::GetPageDivideCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageDivideCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void IGridppReport::PutPageDivideCount ( long pVal ) {
    HRESULT _hr = put_PageDivideCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1331)
inline double IGridppReport::GetPageDivideSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_PageDivideSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void IGridppReport::PutPageDivideSpacing ( double pVal ) {
    HRESULT _hr = put_PageDivideSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1333)
inline VARIANT_BOOL IGridppReport::GetPageDivideLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageDivideLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline void IGridppReport::PutPageDivideLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageDivideLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1335)
inline VARIANT_BOOL IGridppReport::GetPrintAsDesignPaper ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintAsDesignPaper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline void IGridppReport::PutPrintAsDesignPaper ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PrintAsDesignPaper(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline VARIANT_BOOL IGridppReport::GetContinuePrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinuePrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline void IGridppReport::PutContinuePrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinuePrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline VARIANT_BOOL IGridppReport::GetMonoPrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MonoPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void IGridppReport::PutMonoPrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MonoPrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline VARIANT_BOOL IGridppReport::GetMirrorMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MirrorMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1342)
inline void IGridppReport::PutMirrorMargins ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MirrorMargins(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline IGRPicturePtr IGridppReport::GetBackImage ( ) {
    struct IGRPicture * _result = 0;
    HRESULT _hr = get_BackImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPicturePtr(_result, false);
}

#pragma implementation_key(1344)
inline void IGridppReport::PutBackImage ( struct IGRPicture * pVal ) {
    HRESULT _hr = put_BackImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline _bstr_t IGridppReport::GetBackImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline void IGridppReport::PutBackImageFile ( _bstr_t pVal ) {
    HRESULT _hr = put_BackImageFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline VARIANT_BOOL IGridppReport::GetBackImagePreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackImagePreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void IGridppReport::PutBackImagePreview ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BackImagePreview(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline VARIANT_BOOL IGridppReport::GetBackImagePrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackImagePrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1350)
inline void IGridppReport::PutBackImagePrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BackImagePrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1351)
inline IGRPicturePtr IGridppReport::GetWatermark ( ) {
    struct IGRPicture * _result = 0;
    HRESULT _hr = get_Watermark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPicturePtr(_result, false);
}

#pragma implementation_key(1352)
inline void IGridppReport::PutWatermark ( struct IGRPicture * pVal ) {
    HRESULT _hr = put_Watermark(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1353)
inline GRPictureAlignment IGridppReport::GetWatermarkAlignment ( ) {
    GRPictureAlignment _result;
    HRESULT _hr = get_WatermarkAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline void IGridppReport::PutWatermarkAlignment ( GRPictureAlignment pVal ) {
    HRESULT _hr = put_WatermarkAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1355)
inline GRPictureSizeMode IGridppReport::GetWatermarkSizeMode ( ) {
    GRPictureSizeMode _result;
    HRESULT _hr = get_WatermarkSizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1356)
inline void IGridppReport::PutWatermarkSizeMode ( GRPictureSizeMode pVal ) {
    HRESULT _hr = put_WatermarkSizeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline _bstr_t IGridppReport::GetConnectionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1358)
inline void IGridppReport::PutConnectionString ( _bstr_t pVal ) {
    HRESULT _hr = put_ConnectionString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1359)
inline _bstr_t IGridppReport::GetQuerySQL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_QuerySQL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1360)
inline void IGridppReport::PutQuerySQL ( _bstr_t pVal ) {
    HRESULT _hr = put_QuerySQL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline VARIANT_BOOL IGridppReport::GetSkipQuery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SkipQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline void IGridppReport::PutSkipQuery ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SkipQuery(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1363)
inline _bstr_t IGridppReport::GetXmlTableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XmlTableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1364)
inline void IGridppReport::PutXmlTableName ( _bstr_t pVal ) {
    HRESULT _hr = put_XmlTableName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1365)
inline GRStorageFormat IGridppReport::GetStorageFormat ( ) {
    GRStorageFormat _result;
    HRESULT _hr = get_StorageFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline void IGridppReport::PutStorageFormat ( GRStorageFormat pVal ) {
    HRESULT _hr = put_StorageFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1367)
inline GRTextEncodeMode IGridppReport::GetTextEncode ( ) {
    GRTextEncodeMode _result;
    HRESULT _hr = get_TextEncode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1368)
inline void IGridppReport::PutTextEncode ( GRTextEncodeMode pVal ) {
    HRESULT _hr = put_TextEncode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1369)
inline GRUnit IGridppReport::GetUnit ( ) {
    GRUnit _result;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline void IGridppReport::PutUnit ( GRUnit pVal ) {
    HRESULT _hr = put_Unit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1371)
inline GRScriptType IGridppReport::GetScriptType ( ) {
    GRScriptType _result;
    HRESULT _hr = get_ScriptType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1372)
inline void IGridppReport::PutScriptType ( GRScriptType pVal ) {
    HRESULT _hr = put_ScriptType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline long IGridppReport::GetCodePage ( ) {
    long _result = 0;
    HRESULT _hr = get_CodePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline void IGridppReport::PutCodePage ( long pVal ) {
    HRESULT _hr = put_CodePage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline VARIANT_BOOL IGridppReport::GetAlignToGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlignToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1376)
inline void IGridppReport::PutAlignToGrid ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlignToGrid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1377)
inline VARIANT_BOOL IGridppReport::GetShowGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1378)
inline void IGridppReport::PutShowGrid ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowGrid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1379)
inline long IGridppReport::GetGridColsPerUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_GridColsPerUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1380)
inline void IGridppReport::PutGridColsPerUnit ( long pVal ) {
    HRESULT _hr = put_GridColsPerUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1381)
inline long IGridppReport::GetGridRowsPerUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_GridRowsPerUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1382)
inline void IGridppReport::PutGridRowsPerUnit ( long pVal ) {
    HRESULT _hr = put_GridRowsPerUnit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1383)
inline _bstr_t IGridppReport::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1384)
inline void IGridppReport::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1385)
inline _bstr_t IGridppReport::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1386)
inline void IGridppReport::PutAuthor ( _bstr_t pVal ) {
    HRESULT _hr = put_Author(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1387)
inline _bstr_t IGridppReport::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1388)
inline void IGridppReport::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1389)
inline long IGridppReport::GetShowMoneyDigit ( ) {
    long _result = 0;
    HRESULT _hr = get_ShowMoneyDigit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1390)
inline void IGridppReport::PutShowMoneyDigit ( long pVal ) {
    HRESULT _hr = put_ShowMoneyDigit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline double IGridppReport::GetShowMoneyWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_ShowMoneyWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline void IGridppReport::PutShowMoneyWidth ( double pVal ) {
    HRESULT _hr = put_ShowMoneyWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1393)
inline OLE_COLOR IGridppReport::GetShowMoneyLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShowMoneyLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline void IGridppReport::PutShowMoneyLineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ShowMoneyLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1395)
inline OLE_COLOR IGridppReport::GetShowMoneySepLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShowMoneySepLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline void IGridppReport::PutShowMoneySepLineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ShowMoneySepLineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1397)
inline _bstr_t IGridppReport::GetInitializeScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InitializeScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1398)
inline void IGridppReport::PutInitializeScript ( _bstr_t pVal ) {
    HRESULT _hr = put_InitializeScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline _bstr_t IGridppReport::GetProcessBeginScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProcessBeginScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1400)
inline void IGridppReport::PutProcessBeginScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ProcessBeginScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline _bstr_t IGridppReport::GetProcessEndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProcessEndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1402)
inline void IGridppReport::PutProcessEndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ProcessEndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline _bstr_t IGridppReport::GetPageStartScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageStartScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1404)
inline void IGridppReport::PutPageStartScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PageStartScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline _bstr_t IGridppReport::GetPageEndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PageEndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1406)
inline void IGridppReport::PutPageEndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PageEndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1407)
inline _bstr_t IGridppReport::GetBeforeSortScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BeforeSortScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1408)
inline void IGridppReport::PutBeforeSortScript ( _bstr_t pVal ) {
    HRESULT _hr = put_BeforeSortScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1409)
inline _bstr_t IGridppReport::GetExportBeginScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExportBeginScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1410)
inline void IGridppReport::PutExportBeginScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ExportBeginScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1411)
inline _bstr_t IGridppReport::GetExportEndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExportEndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1412)
inline void IGridppReport::PutExportEndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ExportEndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1413)
inline _bstr_t IGridppReport::GetPrintBeginScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintBeginScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1414)
inline void IGridppReport::PutPrintBeginScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PrintBeginScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1415)
inline _bstr_t IGridppReport::GetPrintEndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintEndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1416)
inline void IGridppReport::PutPrintEndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PrintEndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1417)
inline _bstr_t IGridppReport::GetPrintPageScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrintPageScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1418)
inline void IGridppReport::PutPrintPageScript ( _bstr_t pVal ) {
    HRESULT _hr = put_PrintPageScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1419)
inline _bstr_t IGridppReport::GetShowPreviewWndScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShowPreviewWndScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1420)
inline void IGridppReport::PutShowPreviewWndScript ( _bstr_t pVal ) {
    HRESULT _hr = put_ShowPreviewWndScript(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1421)
inline VARIANT_BOOL IGridppReport::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1422)
inline GRReportDisplayMode IGridppReport::GetDisplayMode ( ) {
    GRReportDisplayMode _result;
    HRESULT _hr = get_DisplayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1423)
inline VARIANT_BOOL IGridppReport::GetFirstPass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1424)
inline double IGridppReport::GetPageBlankHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_PageBlankHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1425)
inline VARIANT_BOOL IGridppReport::GetHasFloatControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasFloatControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline VARIANT_BOOL IGridppReport::GetShowProgressUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowProgressUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline void IGridppReport::PutShowProgressUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowProgressUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline VARIANT_BOOL IGridppReport::GetSummaryAccept ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SummaryAccept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1429)
inline void IGridppReport::PutSummaryAccept ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SummaryAccept(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1430)
inline long IGridppReport::GetMaxGenPages ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxGenPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline void IGridppReport::PutMaxGenPages ( long pVal ) {
    HRESULT _hr = put_MaxGenPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1432)
inline VARIANT_BOOL IGridppReport::GetIsBlank ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBlank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline _bstr_t IGridppReport::GetLatestLoadedFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LatestLoadedFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1434)
inline void IGridppReport::PutLatestLoadedFile ( _bstr_t pVal ) {
    HRESULT _hr = put_LatestLoadedFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline void IGridppReport::PutErrorProcessed ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_ErrorProcessed(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1436)
inline VARIANT_BOOL IGridppReport::GetDataLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1437)
inline IGRDetailGridPtr IGridppReport::GetRunningDetailGrid ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = get_RunningDetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(1438)
inline HRESULT IGridppReport::About ( ) {
    HRESULT _hr = raw_About();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1439)
inline IGRControlPtr IGridppReport::ControlByName ( _bstr_t Name ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_ControlByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(1440)
inline IGRColumnPtr IGridppReport::ColumnByName ( _bstr_t Name ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = raw_ColumnByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(1441)
inline IGRFieldPtr IGridppReport::FieldByName ( _bstr_t Name ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_FieldByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1442)
inline IGRFieldPtr IGridppReport::FieldByDBName ( _bstr_t Name ) {
    struct IGRField * _result = 0;
    HRESULT _hr = raw_FieldByDBName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFieldPtr(_result, false);
}

#pragma implementation_key(1443)
inline IGRParameterPtr IGridppReport::ParameterByName ( _bstr_t Name ) {
    struct IGRParameter * _result = 0;
    HRESULT _hr = raw_ParameterByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParameterPtr(_result, false);
}

#pragma implementation_key(1444)
inline IGRControlPtr IGridppReport::FindFirstControl ( ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_FindFirstControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(1445)
inline IGRControlPtr IGridppReport::FindNextControl ( ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_FindNextControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(1446)
inline double IGridppReport::PixelsToUnit ( long Pixels ) {
    double _result = 0;
    HRESULT _hr = raw_PixelsToUnit(Pixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline long IGridppReport::UnitToPixels ( double UnitValue ) {
    long _result = 0;
    HRESULT _hr = raw_UnitToPixels(UnitValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1448)
inline double IGridppReport::SystemVarValue ( GRSystemVarType SystemVar ) {
    double _result = 0;
    HRESULT _hr = raw_SystemVarValue(SystemVar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline double IGridppReport::SystemVarValue2 ( GRSystemVarType SystemVar, long GroupIndex ) {
    double _result = 0;
    HRESULT _hr = raw_SystemVarValue2(SystemVar, GroupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1450)
inline IGRParameterPtr IGridppReport::AddParameter ( _bstr_t Name, GRParameterDataType DataType ) {
    struct IGRParameter * _result = 0;
    HRESULT _hr = raw_AddParameter(Name, DataType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRParameterPtr(_result, false);
}

#pragma implementation_key(1451)
inline IGRDetailGridPtr IGridppReport::InsertDetailGrid ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = raw_InsertDetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(1452)
inline IGRPageHeaderPtr IGridppReport::InsertPageHeader ( ) {
    struct IGRPageHeader * _result = 0;
    HRESULT _hr = raw_InsertPageHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPageHeaderPtr(_result, false);
}

#pragma implementation_key(1453)
inline IGRPageFooterPtr IGridppReport::InsertPageFooter ( ) {
    struct IGRPageFooter * _result = 0;
    HRESULT _hr = raw_InsertPageFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPageFooterPtr(_result, false);
}

#pragma implementation_key(1454)
inline HRESULT IGridppReport::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1455)
inline HRESULT IGridppReport::DeleteDetailGrid ( ) {
    HRESULT _hr = raw_DeleteDetailGrid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1456)
inline HRESULT IGridppReport::DeletePageHeader ( ) {
    HRESULT _hr = raw_DeletePageHeader();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1457)
inline HRESULT IGridppReport::DeletePageFooter ( ) {
    HRESULT _hr = raw_DeletePageFooter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1458)
inline HRESULT IGridppReport::Print ( VARIANT_BOOL ShowPrintDialog ) {
    HRESULT _hr = raw_Print(ShowPrintDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1459)
inline HRESULT IGridppReport::PrintEx ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowPrintDialog ) {
    HRESULT _hr = raw_PrintEx(GenerateStyle, ShowPrintDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1460)
inline HRESULT IGridppReport::PrintPreview ( VARIANT_BOOL ShowModal ) {
    HRESULT _hr = raw_PrintPreview(ShowModal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1461)
inline HRESULT IGridppReport::PrintPreviewEx ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowModal, VARIANT_BOOL MaximizeWindow ) {
    HRESULT _hr = raw_PrintPreviewEx(GenerateStyle, ShowModal, MaximizeWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1462)
inline VARIANT_BOOL IGridppReport::BeginLoopPrint ( GRPrintGenerateStyle GenerateStyle, VARIANT_BOOL ShowPrintDialog ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_BeginLoopPrint(GenerateStyle, ShowPrintDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline HRESULT IGridppReport::EndLoopPrint ( ) {
    HRESULT _hr = raw_EndLoopPrint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1464)
inline HRESULT IGridppReport::LoopPrint ( ) {
    HRESULT _hr = raw_LoopPrint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1465)
inline HRESULT IGridppReport::AbortPrint ( ) {
    HRESULT _hr = raw_AbortPrint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1466)
inline VARIANT_BOOL IGridppReport::ExportDirect ( GRExportType ExportType, _bstr_t FileName, VARIANT_BOOL ShowOptionDlg, VARIANT_BOOL DoneOpen ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExportDirect(ExportType, FileName, ShowOptionDlg, DoneOpen, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline HRESULT IGridppReport::AbortExport ( ) {
    HRESULT _hr = raw_AbortExport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1468)
inline HRESULT IGridppReport::GenerateDocumentFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_GenerateDocumentFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1469)
inline HRESULT IGridppReport::ForceNewPage ( ) {
    HRESULT _hr = raw_ForceNewPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1470)
inline HRESULT IGridppReport::Design ( VARIANT_BOOL ShowModal, VARIANT_BOOL MaximizeWindow ) {
    HRESULT _hr = raw_Design(ShowModal, MaximizeWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1471)
inline VARIANT_BOOL IGridppReport::LoadFromFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1472)
inline VARIANT_BOOL IGridppReport::SaveToFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveToFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline VARIANT_BOOL IGridppReport::LoadFromURL ( _bstr_t URL ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromURL(URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1474)
inline VARIANT_BOOL IGridppReport::SaveToURL ( _bstr_t URL ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveToURL(URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline VARIANT_BOOL IGridppReport::LoadFromStr ( _bstr_t data ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromStr(data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline _bstr_t IGridppReport::SaveToStr ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveToStr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1477)
inline VARIANT_BOOL IGridppReport::LoadFromVariant ( const _variant_t & Buf ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromVariant(Buf, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline _variant_t IGridppReport::SaveToVariant ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1479)
inline VARIANT_BOOL IGridppReport::LoadDataFromURL ( _bstr_t URL ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadDataFromURL(URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline VARIANT_BOOL IGridppReport::LoadDataFromURLEx ( _bstr_t DataURL, _bstr_t DataParam ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadDataFromURLEx(DataURL, DataParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1481)
inline VARIANT_BOOL IGridppReport::LoadDataFromXML ( _bstr_t XMLData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadDataFromXML(XMLData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1482)
inline _bstr_t IGridppReport::ExtractXMLFromURL ( _bstr_t URL ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ExtractXMLFromURL(URL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1483)
inline _bstr_t IGridppReport::ExtractXMLFromURLEx ( _bstr_t DataURL, _bstr_t DataParam ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ExtractXMLFromURLEx(DataURL, DataParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1484)
inline HRESULT IGridppReport::LoadBackImageFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadBackImageFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1485)
inline HRESULT IGridppReport::LoadWatermarkFromFile ( _bstr_t PathFile ) {
    HRESULT _hr = raw_LoadWatermarkFromFile(PathFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1486)
inline HRESULT IGridppReport::PrepareLoadData ( ) {
    HRESULT _hr = raw_PrepareLoadData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1487)
inline HRESULT IGridppReport::CancelLoadData ( ) {
    HRESULT _hr = raw_CancelLoadData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1488)
inline VARIANT_BOOL IGridppReport::LoadFromMemory ( unsigned char * pData, long ByteCount ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromMemory(pData, ByteCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline VARIANT_BOOL IGridppReport::SaveToMemory ( OLE_HANDLE * ppData, long * pBytesCount ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SaveToMemory(ppData, pBytesCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1490)
inline HRESULT IGridppReport::LoadBackImageFromMemory ( unsigned char * pBuffer, long BytesCount ) {
    HRESULT _hr = raw_LoadBackImageFromMemory(pBuffer, BytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1491)
inline HRESULT IGridppReport::LoadWatermarkFromMemory ( unsigned char * pBuffer, long BytesCount ) {
    HRESULT _hr = raw_LoadWatermarkFromMemory(pBuffer, BytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1492)
inline VARIANT_BOOL IGridppReport::Register ( _bstr_t SerialNo ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Register(SerialNo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline long IGridppReport::GetSharePrintSetupOptions ( ) {
    long _result = 0;
    HRESULT _hr = get_SharePrintSetupOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline void IGridppReport::PutSharePrintSetupOptions ( long pVal ) {
    HRESULT _hr = put_SharePrintSetupOptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline IGRSharePrintSetupObjectPtr IGridppReport::GetSharePrintSetupObject ( ) {
    struct IGRSharePrintSetupObject * _result = 0;
    HRESULT _hr = get_SharePrintSetupObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRSharePrintSetupObjectPtr(_result, false);
}

#pragma implementation_key(1496)
inline HRESULT IGridppReport::SharePrintSetupSetOptionEnabled ( GRSharePrintSetupOption Option, VARIANT_BOOL Enabled ) {
    HRESULT _hr = raw_SharePrintSetupSetOptionEnabled(Option, Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1497)
inline HRESULT IGridppReport::SharePrintSetupEnableAllOptions ( ) {
    HRESULT _hr = raw_SharePrintSetupEnableAllOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1498)
inline HRESULT IGridppReport::SharePrintSetupDisableAllOptions ( ) {
    HRESULT _hr = raw_SharePrintSetupDisableAllOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1499)
inline VARIANT_BOOL IGridppReport::SharePrintSetupGetOptionEnabled ( GRSharePrintSetupOption Option ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SharePrintSetupGetOptionEnabled(Option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline double IGridppReport::GetDesignLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignLeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline void IGridppReport::PutDesignLeftMargin ( double pVal ) {
    HRESULT _hr = put_DesignLeftMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline double IGridppReport::GetDesignRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignRightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1503)
inline void IGridppReport::PutDesignRightMargin ( double pVal ) {
    HRESULT _hr = put_DesignRightMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1504)
inline double IGridppReport::GetDesignTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignTopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1505)
inline void IGridppReport::PutDesignTopMargin ( double pVal ) {
    HRESULT _hr = put_DesignTopMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1506)
inline double IGridppReport::GetDesignBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignBottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1507)
inline void IGridppReport::PutDesignBottomMargin ( double pVal ) {
    HRESULT _hr = put_DesignBottomMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline double IGridppReport::GetDesignPaperWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignPaperWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline void IGridppReport::PutDesignPaperWidth ( double pVal ) {
    HRESULT _hr = put_DesignPaperWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1510)
inline double IGridppReport::GetDesignPaperLength ( ) {
    double _result = 0;
    HRESULT _hr = get_DesignPaperLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline void IGridppReport::PutDesignPaperLength ( double pVal ) {
    HRESULT _hr = put_DesignPaperLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline GRPaperOrientation IGridppReport::GetDesignPaperOrientation ( ) {
    GRPaperOrientation _result;
    HRESULT _hr = get_DesignPaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline void IGridppReport::PutDesignPaperOrientation ( GRPaperOrientation pVal ) {
    HRESULT _hr = put_DesignPaperOrientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1514)
inline _bstr_t IGridppReport::GetDesignPaperName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DesignPaperName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1515)
inline void IGridppReport::PutDesignPaperName ( _bstr_t pVal ) {
    HRESULT _hr = put_DesignPaperName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1516)
inline long IGridppReport::GetDesignPaperSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DesignPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline void IGridppReport::PutDesignPaperSize ( long pVal ) {
    HRESULT _hr = put_DesignPaperSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline IGRReportHeaderPtr IGridppReport::GetReportHeader ( const _variant_t & Index ) {
    struct IGRReportHeader * _result = 0;
    HRESULT _hr = get_ReportHeader(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeaderPtr(_result, false);
}

#pragma implementation_key(1519)
inline IGRReportFooterPtr IGridppReport::GetReportFooter ( const _variant_t & Index ) {
    struct IGRReportFooter * _result = 0;
    HRESULT _hr = get_ReportFooter(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFooterPtr(_result, false);
}

#pragma implementation_key(1520)
inline long IGridppReport::GetReportHeaderCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ReportHeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1521)
inline long IGridppReport::GetReportFooterCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ReportFooterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline IGRReportHeaderPtr IGridppReport::InsertReportHeader ( ) {
    struct IGRReportHeader * _result = 0;
    HRESULT _hr = raw_InsertReportHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportHeaderPtr(_result, false);
}

#pragma implementation_key(1523)
inline IGRReportFooterPtr IGridppReport::InsertReportFooter ( ) {
    struct IGRReportFooter * _result = 0;
    HRESULT _hr = raw_InsertReportFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRReportFooterPtr(_result, false);
}

#pragma implementation_key(1524)
inline HRESULT IGridppReport::DeleteReportHeader ( const _variant_t & Index ) {
    HRESULT _hr = raw_DeleteReportHeader(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1525)
inline HRESULT IGridppReport::DeleteReportFooter ( const _variant_t & Index ) {
    HRESULT _hr = raw_DeleteReportFooter(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1526)
inline VARIANT_BOOL IGridppReport::Export ( VARIANT_BOOL DoneOpen ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(DoneOpen, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1527)
inline IGRExportOptionPtr IGridppReport::PrepareExport ( GRExportType ExportType ) {
    struct IGRExportOption * _result = 0;
    HRESULT _hr = raw_PrepareExport(ExportType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRExportOptionPtr(_result, false);
}

#pragma implementation_key(1528)
inline HRESULT IGridppReport::UnprepareExport ( ) {
    HRESULT _hr = raw_UnprepareExport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1529)
inline VARIANT_BOOL IGridppReport::PrepareRecordset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrepareRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline HRESULT IGridppReport::CancelRecordset ( ) {
    HRESULT _hr = raw_CancelRecordset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1531)
inline OLE_HANDLE IGridppReport::Get_SystemImage ( GRSystemImage SystemImage ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__SystemImage(SystemImage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline OLE_HANDLE IGridppReport::Get_ResHinst ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = get__ResHinst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1533)
inline HRESULT IGridppReport::_AttachDesigner ( IDispatch * pDesigner ) {
    HRESULT _hr = raw__AttachDesigner(pDesigner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1534)
inline HRESULT IGridppReport::_ObjSaveBegin ( ) {
    HRESULT _hr = raw__ObjSaveBegin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1535)
inline HRESULT IGridppReport::_ObjSaveEnd ( OLE_HANDLE * ppData, unsigned long * pBytesCount ) {
    HRESULT _hr = raw__ObjSaveEnd(ppData, pBytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1536)
inline HRESULT IGridppReport::_ObjLoadBegin ( unsigned char * pData, unsigned long BytesCount ) {
    HRESULT _hr = raw__ObjLoadBegin(pData, BytesCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1537)
inline HRESULT IGridppReport::_ObjLoadEnd ( ) {
    HRESULT _hr = raw__ObjLoadEnd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1538)
inline VARIANT_BOOL IGridppReport::_ObjLoadEof ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw__ObjLoadEof(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline IGridppReportPtr IGridppReport::_CreateProxyReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = raw__CreateProxyReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1540)
inline HRESULT IGridppReport::_DestroyProxyReport ( ) {
    HRESULT _hr = raw__DestroyProxyReport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1541)
inline HRESULT IGridppReport::_RefreshPrinter ( ) {
    HRESULT _hr = raw__RefreshPrinter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1542)
inline HRESULT IGridppReport::_PullData ( ) {
    HRESULT _hr = raw__PullData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1543)
inline OLE_HANDLE IGridppReport::_GetMoneyLabelVarHandle ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = raw__GetMoneyLabelVarHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline GRDocType IGridppReport::GetDocType ( ) {
    GRDocType _result;
    HRESULT _hr = get_DocType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline void IGridppReport::PutDocType ( GRDocType pVal ) {
    HRESULT _hr = put_DocType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline VARIANT_BOOL IGridppReport::PrintDocumentData ( struct IGRBinaryObject * pBinaryObject ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PrintDocumentData(pBinaryObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1547)
inline IGRBinaryObjectPtr IGridppReport::GenerateDocumentData ( ) {
    struct IGRBinaryObject * _result = 0;
    HRESULT _hr = raw_GenerateDocumentData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRBinaryObjectPtr(_result, false);
}

#pragma implementation_key(1548)
inline GRLockType IGridppReport::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1549)
inline void IGridppReport::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1550)
inline long IGridppReport::WebRegisterStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_WebRegisterStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGRPrintViewer wrapper method implementations
//

#pragma implementation_key(1551)
inline IGridppReportPtr IGRPrintViewer::GetReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1552)
inline void IGRPrintViewer::PutReport ( struct IGridppReport * pVal ) {
    HRESULT _hr = put_Report(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1553)
inline long IGRPrintViewer::GetCurPageNo ( ) {
    long _result = 0;
    HRESULT _hr = get_CurPageNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1554)
inline void IGRPrintViewer::PutCurPageNo ( long pVal ) {
    HRESULT _hr = put_CurPageNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1555)
inline long IGRPrintViewer::GetPageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline VARIANT_BOOL IGRPrintViewer::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void IGRPrintViewer::PutDefaultToolbarCommand ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_DefaultToolbarCommand(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline void IGRPrintViewer::PutBorderStyle ( GRViewerBorderStyle pstyle ) {
    HRESULT _hr = put_BorderStyle(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1559)
inline GRViewerBorderStyle IGRPrintViewer::GetBorderStyle ( ) {
    GRViewerBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1560)
inline GRPreviewEditMode IGRPrintViewer::GetEditMode ( ) {
    GRPreviewEditMode _result;
    HRESULT _hr = get_EditMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void IGRPrintViewer::PutEditMode ( GRPreviewEditMode pVal ) {
    HRESULT _hr = put_EditMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline long IGRPrintViewer::GetRowPages ( ) {
    long _result = 0;
    HRESULT _hr = get_RowPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void IGRPrintViewer::PutRowPages ( long pVal ) {
    HRESULT _hr = put_RowPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline long IGRPrintViewer::GetColPages ( ) {
    long _result = 0;
    HRESULT _hr = get_ColPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline void IGRPrintViewer::PutColPages ( long pVal ) {
    HRESULT _hr = put_ColPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1566)
inline long IGRPrintViewer::GetZoomPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ZoomPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1567)
inline void IGRPrintViewer::PutZoomPercent ( long pVal ) {
    HRESULT _hr = put_ZoomPercent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline GRPrintViewMode IGRPrintViewer::GetViewMode ( ) {
    GRPrintViewMode _result;
    HRESULT _hr = get_ViewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline void IGRPrintViewer::PutViewMode ( GRPrintViewMode pVal ) {
    HRESULT _hr = put_ViewMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1570)
inline VARIANT_BOOL IGRPrintViewer::GetShowRuler ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRuler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline void IGRPrintViewer::PutShowRuler ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowRuler(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline VARIANT_BOOL IGRPrintViewer::GetShowToolbar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1573)
inline void IGRPrintViewer::PutShowToolbar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToolbar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline GRPrintGenerateStyle IGRPrintViewer::GetGenerateStyle ( ) {
    GRPrintGenerateStyle _result;
    HRESULT _hr = get_GenerateStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline void IGRPrintViewer::PutGenerateStyle ( GRPrintGenerateStyle pVal ) {
    HRESULT _hr = put_GenerateStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline VARIANT_BOOL IGRPrintViewer::GetShowMarginCorner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMarginCorner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline void IGRPrintViewer::PutShowMarginCorner ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMarginCorner(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline VARIANT_BOOL IGRPrintViewer::GetSearchable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Searchable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1579)
inline void IGRPrintViewer::PutSearchable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Searchable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline VARIANT_BOOL IGRPrintViewer::GetShowBookmark ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline void IGRPrintViewer::PutShowBookmark ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowBookmark(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1582)
inline VARIANT_BOOL IGRPrintViewer::GetShowPrintDlg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPrintDlg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline void IGRPrintViewer::PutShowPrintDlg ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowPrintDlg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline HRESULT IGRPrintViewer::NextPage ( ) {
    HRESULT _hr = raw_NextPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1585)
inline HRESULT IGRPrintViewer::PriorPage ( ) {
    HRESULT _hr = raw_PriorPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1586)
inline HRESULT IGRPrintViewer::FirstPage ( ) {
    HRESULT _hr = raw_FirstPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1587)
inline HRESULT IGRPrintViewer::LastPage ( ) {
    HRESULT _hr = raw_LastPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1588)
inline HRESULT IGRPrintViewer::Print ( VARIANT_BOOL ShowPrintDialog ) {
    HRESULT _hr = raw_Print(ShowPrintDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1589)
inline HRESULT IGRPrintViewer::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1590)
inline HRESULT IGRPrintViewer::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1591)
inline HRESULT IGRPrintViewer::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1592)
inline HRESULT IGRPrintViewer::ZoomToHeight ( ) {
    HRESULT _hr = raw_ZoomToHeight();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1593)
inline HRESULT IGRPrintViewer::ZoomIn ( ) {
    HRESULT _hr = raw_ZoomIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1594)
inline HRESULT IGRPrintViewer::ZoomOut ( ) {
    HRESULT _hr = raw_ZoomOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1595)
inline HRESULT IGRPrintViewer::ZoomToFit ( ) {
    HRESULT _hr = raw_ZoomToFit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1596)
inline HRESULT IGRPrintViewer::ZoomToWidth ( ) {
    HRESULT _hr = raw_ZoomToWidth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1597)
inline HRESULT IGRPrintViewer::AddToolbarControl ( GRToolControlType ControlType ) {
    HRESULT _hr = raw_AddToolbarControl(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1598)
inline HRESULT IGRPrintViewer::AddToolbarCustomButton ( long BtnID, _bstr_t BtnFileName, _bstr_t TooltipText ) {
    HRESULT _hr = raw_AddToolbarCustomButton(BtnID, BtnFileName, TooltipText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1599)
inline HRESULT IGRPrintViewer::RemoveToolbarControl ( GRToolControlType ControlType ) {
    HRESULT _hr = raw_RemoveToolbarControl(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1600)
inline HRESULT IGRPrintViewer::ResetToolbarContent ( ) {
    HRESULT _hr = raw_ResetToolbarContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1601)
inline HRESULT IGRPrintViewer::UpdateToolbar ( ) {
    HRESULT _hr = raw_UpdateToolbar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1602)
inline VARIANT_BOOL IGRPrintViewer::LoadFromDocumentFile ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadFromDocumentFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline HRESULT IGRPrintViewer::QuickRefresh ( ) {
    HRESULT _hr = raw_QuickRefresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1604)
inline VARIANT_BOOL IGRPrintViewer::Search ( _bstr_t Text, VARIANT_BOOL CaseSensitive, VARIANT_BOOL WholeWord, VARIANT_BOOL ToUp, VARIANT_BOOL FromSelection, VARIANT_BOOL ShowDlg, VARIANT_BOOL ShowMsg ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Search(Text, CaseSensitive, WholeWord, ToUp, FromSelection, ShowDlg, ShowMsg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline VARIANT_BOOL IGRPrintViewer::SearchAgain ( VARIANT_BOOL ShowMsg ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SearchAgain(ShowMsg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline HRESULT IGRPrintViewer::DoToolbarCommand ( GRToolControlType ControlType ) {
    HRESULT _hr = raw_DoToolbarCommand(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1607)
inline HRESULT IGRPrintViewer::UpdateLanguage ( ) {
    HRESULT _hr = raw_UpdateLanguage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1608)
inline HRESULT IGRPrintViewer::UpdateUI ( ) {
    HRESULT _hr = raw_UpdateUI();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1609)
inline VARIANT_BOOL IGRPrintViewer::GetOptionValue ( GRPrintViewerOption Option ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionValue(Option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline HRESULT IGRPrintViewer::SetOptionValue ( GRPrintViewerOption Option, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetOptionValue(Option, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRColumn wrapper method implementations
//

#pragma implementation_key(1611)
inline IGRColumnTitleCellPtr IGRColumn::GetTitleCell ( ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = get_TitleCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1612)
inline IGRColumnContentCellPtr IGRColumn::GetContentCell ( ) {
    struct IGRColumnContentCell * _result = 0;
    HRESULT _hr = get_ContentCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentCellPtr(_result, false);
}

#pragma implementation_key(1613)
inline IGRDetailGridPtr IGRColumn::GetParent ( ) {
    struct IGRDetailGrid * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRDetailGridPtr(_result, false);
}

#pragma implementation_key(1614)
inline _bstr_t IGRColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1615)
inline void IGRColumn::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline VARIANT_BOOL IGRColumn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void IGRColumn::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline double IGRColumn::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void IGRColumn::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline VARIANT_BOOL IGRColumn::GetFixedWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline void IGRColumn::PutFixedWidth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FixedWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline GRLockType IGRColumn::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline void IGRColumn::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRColumnCell wrapper method implementations
//

#pragma implementation_key(1624)
inline IGRColumnPtr IGRColumnCell::GetColumn ( ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(1625)
inline _bstr_t IGRColumnCell::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1626)
inline void IGRColumnCell::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline VARIANT_BOOL IGRColumnCell::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1628)
inline void IGRColumnCell::PutWordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1629)
inline VARIANT_BOOL IGRColumnCell::GetEndEllipsis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EndEllipsis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline void IGRColumnCell::PutEndEllipsis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EndEllipsis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1631)
inline GRTextAlign IGRColumnCell::GetTextAlign ( ) {
    GRTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1632)
inline void IGRColumnCell::PutTextAlign ( GRTextAlign pVal ) {
    HRESULT _hr = put_TextAlign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRColumnContentCell wrapper method implementations
//

#pragma implementation_key(1633)
inline IGRColumnContentPtr IGRColumnContentCell::GetParent ( ) {
    struct IGRColumnContent * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentPtr(_result, false);
}

#pragma implementation_key(1634)
inline _bstr_t IGRColumnContentCell::GetDataField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1635)
inline void IGRColumnContentCell::PutDataField ( _bstr_t pVal ) {
    HRESULT _hr = put_DataField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1636)
inline GRLockType IGRColumnContentCell::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline void IGRColumnContentCell::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRColumnContentCells wrapper method implementations
//

#pragma implementation_key(1638)
inline IGRColumnContentCellPtr IGRColumnContentCells::GetItem ( const _variant_t & Index ) {
    struct IGRColumnContentCell * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentCellPtr(_result, false);
}

#pragma implementation_key(1639)
inline IUnknownPtr IGRColumnContentCells::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1640)
inline long IGRColumnContentCells::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline long IGRColumnContentCells::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1642)
inline IGRColumnContentCellPtr IGRColumnContentCells::ItemAt ( long Index ) {
    struct IGRColumnContentCell * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentCellPtr(_result, false);
}

//
// interface IGRColumns wrapper method implementations
//

#pragma implementation_key(1643)
inline IGRColumnPtr IGRColumns::GetItem ( const _variant_t & Index ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(1644)
inline IUnknownPtr IGRColumns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1645)
inline long IGRColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline IGRColumnPtr IGRColumns::Add ( ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(1647)
inline HRESULT IGRColumns::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1648)
inline HRESULT IGRColumns::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline long IGRColumns::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline IGRColumnPtr IGRColumns::ItemAt ( long Index ) {
    struct IGRColumn * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnPtr(_result, false);
}

#pragma implementation_key(1651)
inline HRESULT IGRColumns::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRColumnTitleCell wrapper method implementations
//

#pragma implementation_key(1652)
inline VARIANT_BOOL IGRColumnTitleCell::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline void IGRColumnTitleCell::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1654)
inline VARIANT_BOOL IGRColumnTitleCell::GetGroupTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GroupTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1655)
inline _bstr_t IGRColumnTitleCell::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1656)
inline void IGRColumnTitleCell::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1657)
inline double IGRColumnTitleCell::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1658)
inline void IGRColumnTitleCell::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1659)
inline IGRColumnTitlePtr IGRColumnTitleCell::GetParent ( ) {
    struct IGRColumnTitle * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitlePtr(_result, false);
}

#pragma implementation_key(1660)
inline IGRColumnTitleCellsPtr IGRColumnTitleCell::GetSubTitles ( ) {
    struct IGRColumnTitleCells * _result = 0;
    HRESULT _hr = get_SubTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellsPtr(_result, false);
}

#pragma implementation_key(1661)
inline IGRColumnTitleCellPtr IGRColumnTitleCell::GetSupCell ( ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = get_SupCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1662)
inline HRESULT IGRColumnTitleCell::EncloseColumn ( const _variant_t & ColumnIndex ) {
    HRESULT _hr = raw_EncloseColumn(ColumnIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1663)
inline IGRColumnTitleCellPtr IGRColumnTitleCell::AddSubGroupTitle ( _bstr_t Name, _bstr_t Title ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_AddSubGroupTitle(Name, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1664)
inline GRLockType IGRColumnTitleCell::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline void IGRColumnTitleCell::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRColumnTitleCells wrapper method implementations
//

#pragma implementation_key(1666)
inline long IGRColumnTitleCells::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline IGRColumnTitleCellPtr IGRColumnTitleCells::GetItem ( const _variant_t & Index ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1668)
inline IUnknownPtr IGRColumnTitleCells::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1669)
inline IGRColumnTitleCellPtr IGRColumnTitleCells::AddGroup ( _bstr_t Name, _bstr_t Title ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_AddGroup(Name, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1670)
inline HRESULT IGRColumnTitleCells::RemoveGroup ( const _variant_t & Index ) {
    HRESULT _hr = raw_RemoveGroup(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1671)
inline long IGRColumnTitleCells::IndexByName ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_IndexByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline IGRColumnTitleCellPtr IGRColumnTitleCells::ItemAt ( long Index ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_ItemAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1673)
inline HRESULT IGRColumnTitleCells::ChangeItemOrder ( const _variant_t & Index, long NewOrder ) {
    HRESULT _hr = raw_ChangeItemOrder(Index, NewOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRColumnTitle wrapper method implementations
//

#pragma implementation_key(1674)
inline IGRColumnTitleCellsPtr IGRColumnTitle::GetTitleCells ( ) {
    struct IGRColumnTitleCells * _result = 0;
    HRESULT _hr = get_TitleCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellsPtr(_result, false);
}

#pragma implementation_key(1675)
inline GRRepeatStyle IGRColumnTitle::GetRepeatStyle ( ) {
    GRRepeatStyle _result;
    HRESULT _hr = get_RepeatStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void IGRColumnTitle::PutRepeatStyle ( GRRepeatStyle pVal ) {
    HRESULT _hr = put_RepeatStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline GRLockType IGRColumnTitle::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void IGRColumnTitle::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRDisplayViewer wrapper method implementations
//

#pragma implementation_key(1679)
inline void IGRDisplayViewer::PutBorderStyle ( GRViewerBorderStyle pstyle ) {
    HRESULT _hr = put_BorderStyle(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1680)
inline GRViewerBorderStyle IGRDisplayViewer::GetBorderStyle ( ) {
    GRViewerBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1681)
inline long IGRDisplayViewer::GetLeftGap ( ) {
    long _result = 0;
    HRESULT _hr = get_LeftGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void IGRDisplayViewer::PutLeftGap ( long pVal ) {
    HRESULT _hr = put_LeftGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline long IGRDisplayViewer::GetRightGap ( ) {
    long _result = 0;
    HRESULT _hr = get_RightGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void IGRDisplayViewer::PutRightGap ( long pVal ) {
    HRESULT _hr = put_RightGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline long IGRDisplayViewer::GetTopGap ( ) {
    long _result = 0;
    HRESULT _hr = get_TopGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void IGRDisplayViewer::PutTopGap ( long pVal ) {
    HRESULT _hr = put_TopGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline long IGRDisplayViewer::GetBottomGap ( ) {
    long _result = 0;
    HRESULT _hr = get_BottomGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline void IGRDisplayViewer::PutBottomGap ( long pVal ) {
    HRESULT _hr = put_BottomGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline long IGRDisplayViewer::GetRowsPerPage ( ) {
    long _result = 0;
    HRESULT _hr = get_RowsPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void IGRDisplayViewer::PutRowsPerPage ( long pVal ) {
    HRESULT _hr = put_RowsPerPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline VARIANT_BOOL IGRDisplayViewer::GetShowHeader ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline void IGRDisplayViewer::PutShowHeader ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowHeader(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline VARIANT_BOOL IGRDisplayViewer::GetShowFooter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void IGRDisplayViewer::PutShowFooter ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowFooter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline VARIANT_BOOL IGRDisplayViewer::GetShowToolbar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline void IGRDisplayViewer::PutShowToolbar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowToolbar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline VARIANT_BOOL IGRDisplayViewer::GetResortable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Resortable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void IGRDisplayViewer::PutResortable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Resortable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline VARIANT_BOOL IGRDisplayViewer::GetResortCaseSensitive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResortCaseSensitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1700)
inline void IGRDisplayViewer::PutResortCaseSensitive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResortCaseSensitive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline VARIANT_BOOL IGRDisplayViewer::GetResortDefaultAsc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResortDefaultAsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline void IGRDisplayViewer::PutResortDefaultAsc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResortDefaultAsc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1703)
inline VARIANT_BOOL IGRDisplayViewer::GetGridTitle3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridTitle3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline void IGRDisplayViewer::PutGridTitle3D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GridTitle3D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1705)
inline VARIANT_BOOL IGRDisplayViewer::GetSearchable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Searchable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline void IGRDisplayViewer::PutSearchable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Searchable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1707)
inline VARIANT_BOOL IGRDisplayViewer::GetGridCenterView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridCenterView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline void IGRDisplayViewer::PutGridCenterView ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GridCenterView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline VARIANT_BOOL IGRDisplayViewer::GetGridCanShrink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridCanShrink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline void IGRDisplayViewer::PutGridCanShrink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GridCanShrink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1711)
inline VARIANT_BOOL IGRDisplayViewer::GetResizeToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1712)
inline void IGRDisplayViewer::PutResizeToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ResizeToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1713)
inline OLE_COLOR IGRDisplayViewer::GetSelectionBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SelectionBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline void IGRDisplayViewer::PutSelectionBackColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_SelectionBackColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1715)
inline OLE_COLOR IGRDisplayViewer::GetSelectionForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SelectionForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1716)
inline void IGRDisplayViewer::PutSelectionForeColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_SelectionForeColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline VARIANT_BOOL IGRDisplayViewer::GetSelectionFollowScroll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectionFollowScroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void IGRDisplayViewer::PutSelectionFollowScroll ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SelectionFollowScroll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowHScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysShowHScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline void IGRDisplayViewer::PutAlwaysShowHScrollBar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlwaysShowHScrollBar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowVScrollBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysShowVScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1722)
inline void IGRDisplayViewer::PutAlwaysShowVScrollBar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlwaysShowVScrollBar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1723)
inline OLE_COLOR IGRDisplayViewer::GetBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline void IGRDisplayViewer::PutBackgroundColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1725)
inline VARIANT_BOOL IGRDisplayViewer::GetColumnMove ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnMove(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1726)
inline void IGRDisplayViewer::PutColumnMove ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ColumnMove(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1727)
inline VARIANT_BOOL IGRDisplayViewer::GetColumnResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1728)
inline void IGRDisplayViewer::PutColumnResize ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ColumnResize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1729)
inline VARIANT_BOOL IGRDisplayViewer::GetRowSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RowSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1730)
inline void IGRDisplayViewer::PutRowSelection ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RowSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1731)
inline VARIANT_BOOL IGRDisplayViewer::GetBatchGetRecord ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BatchGetRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1732)
inline void IGRDisplayViewer::PutBatchGetRecord ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BatchGetRecord(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1733)
inline long IGRDisplayViewer::GetBatchWantRecords ( ) {
    long _result = 0;
    HRESULT _hr = get_BatchWantRecords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1734)
inline void IGRDisplayViewer::PutBatchWantRecords ( long pVal ) {
    HRESULT _hr = put_BatchWantRecords(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1735)
inline long IGRDisplayViewer::GetTotalRecord ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1736)
inline void IGRDisplayViewer::PutTotalRecord ( long pVal ) {
    HRESULT _hr = put_TotalRecord(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1737)
inline VARIANT_BOOL IGRDisplayViewer::GetBatchFinished ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BatchFinished(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1738)
inline void IGRDisplayViewer::PutBatchFinished ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BatchFinished(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1739)
inline long IGRDisplayViewer::GetBatchNo ( ) {
    long _result = 0;
    HRESULT _hr = get_BatchNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline long IGRDisplayViewer::GetBatchStartRecNo ( ) {
    long _result = 0;
    HRESULT _hr = get_BatchStartRecNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline VARIANT_BOOL IGRDisplayViewer::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline long IGRDisplayViewer::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline long IGRDisplayViewer::GetPageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline void IGRDisplayViewer::PutDefaultToolbarCommand ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_DefaultToolbarCommand(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline IGridppReportPtr IGRDisplayViewer::GetReport ( ) {
    struct IGridppReport * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGridppReportPtr(_result, false);
}

#pragma implementation_key(1746)
inline void IGRDisplayViewer::PutReport ( struct IGridppReport * pVal ) {
    HRESULT _hr = put_Report(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline VARIANT_BOOL IGRDisplayViewer::GetShowPreviewLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPreviewLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline void IGRDisplayViewer::PutShowPreviewLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowPreviewLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline long IGRDisplayViewer::GetSelRowNo ( ) {
    long _result = 0;
    HRESULT _hr = get_SelRowNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1750)
inline void IGRDisplayViewer::PutSelRowNo ( long pVal ) {
    HRESULT _hr = put_SelRowNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline long IGRDisplayViewer::GetSelColumnNo ( ) {
    long _result = 0;
    HRESULT _hr = get_SelColumnNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1752)
inline void IGRDisplayViewer::PutSelColumnNo ( long pVal ) {
    HRESULT _hr = put_SelColumnNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1753)
inline _bstr_t IGRDisplayViewer::GetSelColumnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelColumnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1754)
inline void IGRDisplayViewer::PutSelColumnName ( _bstr_t pVal ) {
    HRESULT _hr = put_SelColumnName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1755)
inline long IGRDisplayViewer::GetVScrollPos ( ) {
    long _result = 0;
    HRESULT _hr = get_VScrollPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1756)
inline void IGRDisplayViewer::PutVScrollPos ( long pVal ) {
    HRESULT _hr = put_VScrollPos(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1757)
inline long IGRDisplayViewer::GetHScrollPos ( ) {
    long _result = 0;
    HRESULT _hr = get_HScrollPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void IGRDisplayViewer::PutHScrollPos ( long pVal ) {
    HRESULT _hr = put_HScrollPos(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline _bstr_t IGRDisplayViewer::GetSortColumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SortColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1760)
inline void IGRDisplayViewer::PutSortColumns ( _bstr_t pVal ) {
    HRESULT _hr = put_SortColumns(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1761)
inline VARIANT_BOOL IGRDisplayViewer::GetAlwaysShowSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysShowSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline void IGRDisplayViewer::PutAlwaysShowSelection ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlwaysShowSelection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline VARIANT_BOOL IGRDisplayViewer::GetToPostColumnLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ToPostColumnLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline void IGRDisplayViewer::PutToPostColumnLayout ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ToPostColumnLayout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline long IGRDisplayViewer::GetCurPageNo ( ) {
    long _result = 0;
    HRESULT _hr = get_CurPageNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline void IGRDisplayViewer::PutCurPageNo ( long pVal ) {
    HRESULT _hr = put_CurPageNo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline HRESULT IGRDisplayViewer::QuickRefresh ( ) {
    HRESULT _hr = raw_QuickRefresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1768)
inline HRESULT IGRDisplayViewer::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1769)
inline HRESULT IGRDisplayViewer::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1770)
inline HRESULT IGRDisplayViewer::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1771)
inline IGRControlPtr IGRDisplayViewer::GetControlFromPos ( long xPos, long yPos ) {
    struct IGRControl * _result = 0;
    HRESULT _hr = raw_GetControlFromPos(xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRControlPtr(_result, false);
}

#pragma implementation_key(1772)
inline IGRSectionPtr IGRDisplayViewer::GetSectionFromPos ( long xPos, long yPos ) {
    struct IGRSection * _result = 0;
    HRESULT _hr = raw_GetSectionFromPos(xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRSectionPtr(_result, false);
}

#pragma implementation_key(1773)
inline IGRColumnContentCellPtr IGRDisplayViewer::GetContentCellFromPos ( long xPos, long yPos ) {
    struct IGRColumnContentCell * _result = 0;
    HRESULT _hr = raw_GetContentCellFromPos(xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnContentCellPtr(_result, false);
}

#pragma implementation_key(1774)
inline IGRColumnTitleCellPtr IGRDisplayViewer::GetTitleCellFromPos ( long xPos, long yPos ) {
    struct IGRColumnTitleCell * _result = 0;
    HRESULT _hr = raw_GetTitleCellFromPos(xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRColumnTitleCellPtr(_result, false);
}

#pragma implementation_key(1775)
inline HRESULT IGRDisplayViewer::PostColumnLayout ( ) {
    HRESULT _hr = raw_PostColumnLayout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1776)
inline HRESULT IGRDisplayViewer::ResizeColumnToFitPage ( ) {
    HRESULT _hr = raw_ResizeColumnToFitPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1777)
inline HRESULT IGRDisplayViewer::ResizeColumnToFit ( ) {
    HRESULT _hr = raw_ResizeColumnToFit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1778)
inline HRESULT IGRDisplayViewer::ResizeColumnToFitText ( ) {
    HRESULT _hr = raw_ResizeColumnToFitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1779)
inline HRESULT IGRDisplayViewer::NextPage ( ) {
    HRESULT _hr = raw_NextPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1780)
inline HRESULT IGRDisplayViewer::PriorPage ( ) {
    HRESULT _hr = raw_PriorPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1781)
inline HRESULT IGRDisplayViewer::FirstPage ( ) {
    HRESULT _hr = raw_FirstPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1782)
inline HRESULT IGRDisplayViewer::LastPage ( ) {
    HRESULT _hr = raw_LastPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1783)
inline VARIANT_BOOL IGRDisplayViewer::GetColumnVisible ( _bstr_t ColumnName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetColumnVisible(ColumnName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline HRESULT IGRDisplayViewer::SetColumnVisible ( _bstr_t ColumnName, VARIANT_BOOL Visible ) {
    HRESULT _hr = raw_SetColumnVisible(ColumnName, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1785)
inline HRESULT IGRDisplayViewer::UpdateColumnView ( ) {
    HRESULT _hr = raw_UpdateColumnView();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1786)
inline HRESULT IGRDisplayViewer::UpdateSelCell ( ) {
    HRESULT _hr = raw_UpdateSelCell();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1787)
inline HRESULT IGRDisplayViewer::UpdateSelRow ( ) {
    HRESULT _hr = raw_UpdateSelRow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1788)
inline HRESULT IGRDisplayViewer::UpdateControl ( struct IGRControl * pControl ) {
    HRESULT _hr = raw_UpdateControl(pControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1789)
inline HRESULT IGRDisplayViewer::UpdateViewer ( ) {
    HRESULT _hr = raw_UpdateViewer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1790)
inline HRESULT IGRDisplayViewer::LockUpdate ( ) {
    HRESULT _hr = raw_LockUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1791)
inline HRESULT IGRDisplayViewer::UnlockUpdate ( ) {
    HRESULT _hr = raw_UnlockUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1792)
inline _bstr_t IGRDisplayViewer::GetSelRowCellText ( long ColumnIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSelRowCellText(ColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1793)
inline VARIANT_BOOL IGRDisplayViewer::Search ( _bstr_t Text, VARIANT_BOOL CaseSensitive, VARIANT_BOOL WholeWord, VARIANT_BOOL ToUp, VARIANT_BOOL FromSelection, VARIANT_BOOL ShowDlg, VARIANT_BOOL ShowMsg ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Search(Text, CaseSensitive, WholeWord, ToUp, FromSelection, ShowDlg, ShowMsg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1794)
inline VARIANT_BOOL IGRDisplayViewer::SearchAgain ( VARIANT_BOOL ShowMsg ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SearchAgain(ShowMsg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1795)
inline HRESULT IGRDisplayViewer::ShowColumnVisibleDlg ( ) {
    HRESULT _hr = raw_ShowColumnVisibleDlg();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1796)
inline HRESULT IGRDisplayViewer::UpdateLanguage ( ) {
    HRESULT _hr = raw_UpdateLanguage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1797)
inline HRESULT IGRDisplayViewer::UpdateUI ( ) {
    HRESULT _hr = raw_UpdateUI();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1798)
inline HRESULT IGRDisplayViewer::AddToolbarControl ( GRToolControlType2 ControlType ) {
    HRESULT _hr = raw_AddToolbarControl(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1799)
inline HRESULT IGRDisplayViewer::AddToolbarCustomButton ( long BtnID, _bstr_t BtnFileName, _bstr_t TooltipText ) {
    HRESULT _hr = raw_AddToolbarCustomButton(BtnID, BtnFileName, TooltipText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1800)
inline HRESULT IGRDisplayViewer::RemoveToolbarControl ( GRToolControlType2 ControlType ) {
    HRESULT _hr = raw_RemoveToolbarControl(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1801)
inline HRESULT IGRDisplayViewer::ResetToolbarContent ( ) {
    HRESULT _hr = raw_ResetToolbarContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1802)
inline HRESULT IGRDisplayViewer::UpdateToolbar ( ) {
    HRESULT _hr = raw_UpdateToolbar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1803)
inline HRESULT IGRDisplayViewer::DoToolbarCommand ( GRToolControlType2 ControlType ) {
    HRESULT _hr = raw_DoToolbarCommand(ControlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1804)
inline VARIANT_BOOL IGRDisplayViewer::GetOptionValue ( GRDisplayViewerOption Option ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionValue(Option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1805)
inline HRESULT IGRDisplayViewer::SetOptionValue ( GRDisplayViewerOption Option, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetOptionValue(Option, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRExportOption wrapper method implementations
//

#pragma implementation_key(1806)
inline _bstr_t IGRExportOption::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1807)
inline void IGRExportOption::PutFileName ( _bstr_t pVal ) {
    HRESULT _hr = put_FileName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1808)
inline GRExportType IGRExportOption::GetExportType ( ) {
    GRExportType _result;
    HRESULT _hr = get_ExportType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline VARIANT_BOOL IGRExportOption::GetMailExportFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MailExportFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline void IGRExportOption::PutMailExportFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MailExportFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1811)
inline _bstr_t IGRExportOption::GetMailTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1812)
inline void IGRExportOption::PutMailTo ( _bstr_t pVal ) {
    HRESULT _hr = put_MailTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1813)
inline _bstr_t IGRExportOption::GetMailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1814)
inline void IGRExportOption::PutMailSubject ( _bstr_t pVal ) {
    HRESULT _hr = put_MailSubject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1815)
inline _bstr_t IGRExportOption::GetMailText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1816)
inline void IGRExportOption::PutMailText ( _bstr_t pVal ) {
    HRESULT _hr = put_MailText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1817)
inline VARIANT_BOOL IGRExportOption::GetAbortShowOptionDlg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AbortShowOptionDlg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1818)
inline void IGRExportOption::PutAbortShowOptionDlg ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AbortShowOptionDlg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1819)
inline VARIANT_BOOL IGRExportOption::GetAbortOpenFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AbortOpenFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1820)
inline void IGRExportOption::PutAbortOpenFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AbortOpenFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1821)
inline IGRE2CellOptionPtr IGRExportOption::GetAsE2CellOption ( ) {
    struct IGRE2CellOption * _result = 0;
    HRESULT _hr = get_AsE2CellOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2CellOptionPtr(_result, false);
}

#pragma implementation_key(1822)
inline IGRE2XLSOptionPtr IGRExportOption::GetAsE2XLSOption ( ) {
    struct IGRE2XLSOption * _result = 0;
    HRESULT _hr = get_AsE2XLSOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2XLSOptionPtr(_result, false);
}

#pragma implementation_key(1823)
inline IGRE2TXTOptionPtr IGRExportOption::GetAsE2TXTOption ( ) {
    struct IGRE2TXTOption * _result = 0;
    HRESULT _hr = get_AsE2TXTOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2TXTOptionPtr(_result, false);
}

#pragma implementation_key(1824)
inline IGRE2HTMOptionPtr IGRExportOption::GetAsE2HTMOption ( ) {
    struct IGRE2HTMOption * _result = 0;
    HRESULT _hr = get_AsE2HTMOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2HTMOptionPtr(_result, false);
}

#pragma implementation_key(1825)
inline IGRE2RTFOptionPtr IGRExportOption::GetAsE2RTFOption ( ) {
    struct IGRE2RTFOption * _result = 0;
    HRESULT _hr = get_AsE2RTFOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2RTFOptionPtr(_result, false);
}

#pragma implementation_key(1826)
inline IGRE2PDFOptionPtr IGRExportOption::GetAsE2PDFOption ( ) {
    struct IGRE2PDFOption * _result = 0;
    HRESULT _hr = get_AsE2PDFOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2PDFOptionPtr(_result, false);
}

#pragma implementation_key(1827)
inline IGRE2CSVOptionPtr IGRExportOption::GetAsE2CSVOption ( ) {
    struct IGRE2CSVOption * _result = 0;
    HRESULT _hr = get_AsE2CSVOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2CSVOptionPtr(_result, false);
}

#pragma implementation_key(1828)
inline IGRE2IMGOptionPtr IGRExportOption::GetAsE2IMGOption ( ) {
    struct IGRE2IMGOption * _result = 0;
    HRESULT _hr = get_AsE2IMGOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRE2IMGOptionPtr(_result, false);
}

#pragma implementation_key(1829)
inline VARIANT_BOOL IGRExportOption::ShowOptionDlg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ShowOptionDlg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline HRESULT IGRExportOption::_GetFileTextResID ( unsigned long * pExtFileNameID, unsigned long * pExtFileDescID ) {
    HRESULT _hr = raw__GetFileTextResID(pExtFileNameID, pExtFileDescID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRE2CellOption wrapper method implementations
//

#pragma implementation_key(1831)
inline VARIANT_BOOL IGRE2CellOption::GetExportPageBreak ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExportPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1832)
inline void IGRE2CellOption::PutExportPageBreak ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExportPageBreak(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1833)
inline VARIANT_BOOL IGRE2CellOption::GetExportPageHeaderFooter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExportPageHeaderFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline void IGRE2CellOption::PutExportPageHeaderFooter ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExportPageHeaderFooter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1835)
inline VARIANT_BOOL IGRE2CellOption::GetOnlyExportDetailGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnlyExportDetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline void IGRE2CellOption::PutOnlyExportDetailGrid ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OnlyExportDetailGrid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1837)
inline VARIANT_BOOL IGRE2CellOption::GetSupressEmptyLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupressEmptyLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline void IGRE2CellOption::PutSupressEmptyLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SupressEmptyLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline VARIANT_BOOL IGRE2CellOption::GetColumnAsDetailGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnAsDetailGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1840)
inline void IGRE2CellOption::PutColumnAsDetailGrid ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ColumnAsDetailGrid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1841)
inline VARIANT_BOOL IGRE2CellOption::GetOnlyExportPureText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnlyExportPureText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline void IGRE2CellOption::PutOnlyExportPureText ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OnlyExportPureText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1843)
inline VARIANT_BOOL IGRE2CellOption::GetSameAsPrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SameAsPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline void IGRE2CellOption::PutSameAsPrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SameAsPrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2XLSOption wrapper method implementations
//

#pragma implementation_key(1845)
inline long IGRE2XLSOption::GetMinColumnWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_MinColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline void IGRE2XLSOption::PutMinColumnWidth ( long pVal ) {
    HRESULT _hr = put_MinColumnWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1847)
inline long IGRE2XLSOption::GetMinRowHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_MinRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline void IGRE2XLSOption::PutMinRowHeight ( long pVal ) {
    HRESULT _hr = put_MinRowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1849)
inline VARIANT_BOOL IGRE2XLSOption::GetExpandRowHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExpandRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1850)
inline void IGRE2XLSOption::PutExpandRowHeight ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExpandRowHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1851)
inline long IGRE2XLSOption::GetNewSheetRows ( ) {
    long _result = 0;
    HRESULT _hr = get_NewSheetRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1852)
inline void IGRE2XLSOption::PutNewSheetRows ( long pVal ) {
    HRESULT _hr = put_NewSheetRows(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline VARIANT_BOOL IGRE2XLSOption::GetColumnTitleForbidRepeat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnTitleForbidRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1854)
inline void IGRE2XLSOption::PutColumnTitleForbidRepeat ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ColumnTitleForbidRepeat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1855)
inline double IGRE2XLSOption::GetPageLeftMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_PageLeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1856)
inline void IGRE2XLSOption::PutPageLeftMargin ( double pVal ) {
    HRESULT _hr = put_PageLeftMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1857)
inline double IGRE2XLSOption::GetPageRightMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_PageRightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1858)
inline void IGRE2XLSOption::PutPageRightMargin ( double pVal ) {
    HRESULT _hr = put_PageRightMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1859)
inline double IGRE2XLSOption::GetPageTopMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_PageTopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1860)
inline void IGRE2XLSOption::PutPageTopMargin ( double pVal ) {
    HRESULT _hr = put_PageTopMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1861)
inline double IGRE2XLSOption::GetPageBottomMargin ( ) {
    double _result = 0;
    HRESULT _hr = get_PageBottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1862)
inline void IGRE2XLSOption::PutPageBottomMargin ( double pVal ) {
    HRESULT _hr = put_PageBottomMargin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2TXTOption wrapper method implementations
//

#pragma implementation_key(1863)
inline VARIANT_BOOL IGRE2TXTOption::GetUsingTabChar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsingTabChar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1864)
inline void IGRE2TXTOption::PutUsingTabChar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsingTabChar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1865)
inline GRTextEncodeMode IGRE2TXTOption::GetTextEncode ( ) {
    GRTextEncodeMode _result;
    HRESULT _hr = get_TextEncode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1866)
inline void IGRE2TXTOption::PutTextEncode ( GRTextEncodeMode pVal ) {
    HRESULT _hr = put_TextEncode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2HTMOption wrapper method implementations
//

#pragma implementation_key(1867)
inline VARIANT_BOOL IGRE2HTMOption::GetMultiPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1868)
inline void IGRE2HTMOption::PutMultiPage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MultiPage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1869)
inline _bstr_t IGRE2HTMOption::GetPicturePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PicturePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1870)
inline void IGRE2HTMOption::PutPicturePath ( _bstr_t pVal ) {
    HRESULT _hr = put_PicturePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1871)
inline VARIANT_BOOL IGRE2HTMOption::GetShowNavLink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNavLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1872)
inline void IGRE2HTMOption::PutShowNavLink ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowNavLink(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1873)
inline _bstr_t IGRE2HTMOption::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1874)
inline void IGRE2HTMOption::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2RTFOption wrapper method implementations
//

#pragma implementation_key(1875)
inline _bstr_t IGRE2RTFOption::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1876)
inline void IGRE2RTFOption::PutAuthor ( _bstr_t pVal ) {
    HRESULT _hr = put_Author(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1877)
inline _bstr_t IGRE2RTFOption::GetCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1878)
inline void IGRE2RTFOption::PutCreator ( _bstr_t pVal ) {
    HRESULT _hr = put_Creator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2PDFOption wrapper method implementations
//

#pragma implementation_key(1879)
inline _bstr_t IGRE2PDFOption::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1880)
inline void IGRE2PDFOption::PutAuthor ( _bstr_t pVal ) {
    HRESULT _hr = put_Author(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1881)
inline _bstr_t IGRE2PDFOption::GetCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1882)
inline void IGRE2PDFOption::PutCreator ( _bstr_t pVal ) {
    HRESULT _hr = put_Creator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1883)
inline _bstr_t IGRE2PDFOption::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1884)
inline void IGRE2PDFOption::PutSubject ( _bstr_t pVal ) {
    HRESULT _hr = put_Subject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1885)
inline VARIANT_BOOL IGRE2PDFOption::GetAnsiTextMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnsiTextMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1886)
inline void IGRE2PDFOption::PutAnsiTextMode ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AnsiTextMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1887)
inline VARIANT_BOOL IGRE2PDFOption::GetAutoShrinkFont ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoShrinkFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline void IGRE2PDFOption::PutAutoShrinkFont ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoShrinkFont(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1889)
inline VARIANT_BOOL IGRE2PDFOption::GetCompressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Compressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1890)
inline void IGRE2PDFOption::PutCompressed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Compressed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1891)
inline _bstr_t IGRE2PDFOption::GetProducer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Producer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1892)
inline void IGRE2PDFOption::PutProducer ( _bstr_t pVal ) {
    HRESULT _hr = put_Producer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1893)
inline _bstr_t IGRE2PDFOption::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1894)
inline void IGRE2PDFOption::PutKeywords ( _bstr_t pVal ) {
    HRESULT _hr = put_Keywords(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1895)
inline _bstr_t IGRE2PDFOption::GetOwnerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OwnerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1896)
inline void IGRE2PDFOption::PutOwnerPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_OwnerPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1897)
inline _bstr_t IGRE2PDFOption::GetUserPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1898)
inline void IGRE2PDFOption::PutUserPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_UserPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1899)
inline VARIANT_BOOL IGRE2PDFOption::GetDocPermission ( GRPDFDocPermission Permission ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDocPermission(Permission, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1900)
inline HRESULT IGRE2PDFOption::SetDocPermission ( GRPDFDocPermission Permission, VARIANT_BOOL Enabled ) {
    HRESULT _hr = raw_SetDocPermission(Permission, Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGRE2CSVOption wrapper method implementations
//

#pragma implementation_key(1901)
inline char IGRE2CSVOption::GetDelimiterChar ( ) {
    char _result = 0;
    HRESULT _hr = get_DelimiterChar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1902)
inline void IGRE2CSVOption::PutDelimiterChar ( char pVal ) {
    HRESULT _hr = put_DelimiterChar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1903)
inline _bstr_t IGRE2CSVOption::GetQuoteText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_QuoteText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1904)
inline void IGRE2CSVOption::PutQuoteText ( _bstr_t pVal ) {
    HRESULT _hr = put_QuoteText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1905)
inline GRTextEncodeMode IGRE2CSVOption::GetTextEncode ( ) {
    GRTextEncodeMode _result;
    HRESULT _hr = get_TextEncode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1906)
inline void IGRE2CSVOption::PutTextEncode ( GRTextEncodeMode pVal ) {
    HRESULT _hr = put_TextEncode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRE2IMGOption wrapper method implementations
//

#pragma implementation_key(1907)
inline GRExportImageType IGRE2IMGOption::GetImageType ( ) {
    GRExportImageType _result;
    HRESULT _hr = get_ImageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1908)
inline void IGRE2IMGOption::PutImageType ( GRExportImageType pVal ) {
    HRESULT _hr = put_ImageType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1909)
inline long IGRE2IMGOption::GetDPI ( ) {
    long _result = 0;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1910)
inline void IGRE2IMGOption::PutDPI ( long pVal ) {
    HRESULT _hr = put_DPI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1911)
inline VARIANT_BOOL IGRE2IMGOption::GetDrawPageBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawPageBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1912)
inline void IGRE2IMGOption::PutDrawPageBox ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawPageBox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1913)
inline VARIANT_BOOL IGRE2IMGOption::GetAllInOne ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllInOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1914)
inline void IGRE2IMGOption::PutAllInOne ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllInOne(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1915)
inline long IGRE2IMGOption::GetVertGap ( ) {
    long _result = 0;
    HRESULT _hr = get_VertGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline void IGRE2IMGOption::PutVertGap ( long pVal ) {
    HRESULT _hr = put_VertGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFreeGrid wrapper method implementations
//

#pragma implementation_key(1917)
inline long IGRFreeGrid::GetColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline void IGRFreeGrid::PutColumnCount ( long pVal ) {
    HRESULT _hr = put_ColumnCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1919)
inline long IGRFreeGrid::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline void IGRFreeGrid::PutRowCount ( long pVal ) {
    HRESULT _hr = put_RowCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1921)
inline IGRPenPtr IGRFreeGrid::GetColLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_ColLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(1922)
inline IGRPenPtr IGRFreeGrid::GetRowLinePen ( ) {
    struct IGRPen * _result = 0;
    HRESULT _hr = get_RowLinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRPenPtr(_result, false);
}

#pragma implementation_key(1923)
inline VARIANT_BOOL IGRFreeGrid::GetShowColLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline void IGRFreeGrid::PutShowColLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowColLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1925)
inline VARIANT_BOOL IGRFreeGrid::GetShowRowLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRowLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1926)
inline void IGRFreeGrid::PutShowRowLine ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowRowLine(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1927)
inline VARIANT_BOOL IGRFreeGrid::GetGrowToBottom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GrowToBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1928)
inline void IGRFreeGrid::PutGrowToBottom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GrowToBottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1929)
inline long IGRFreeGrid::GetTitleRows ( ) {
    long _result = 0;
    HRESULT _hr = get_TitleRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1930)
inline void IGRFreeGrid::PutTitleRows ( long pVal ) {
    HRESULT _hr = put_TitleRows(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1931)
inline VARIANT_BOOL IGRFreeGrid::GetTitleRepeat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TitleRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1932)
inline void IGRFreeGrid::PutTitleRepeat ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TitleRepeat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1933)
inline IGRFreeGridColumnPtr IGRFreeGrid::ColumnAt ( long ColumnIndex ) {
    struct IGRFreeGridColumn * _result = 0;
    HRESULT _hr = raw_ColumnAt(ColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridColumnPtr(_result, false);
}

#pragma implementation_key(1934)
inline IGRFreeGridRowPtr IGRFreeGrid::RowAt ( long RowIndex ) {
    struct IGRFreeGridRow * _result = 0;
    HRESULT _hr = raw_RowAt(RowIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridRowPtr(_result, false);
}

#pragma implementation_key(1935)
inline IGRFreeGridCellPtr IGRFreeGrid::CellAt ( long RowIndex, long ColumnIndex ) {
    struct IGRFreeGridCell * _result = 0;
    HRESULT _hr = raw_CellAt(RowIndex, ColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridCellPtr(_result, false);
}

#pragma implementation_key(1936)
inline IGRFreeGridCellPtr IGRFreeGrid::CellByDataName ( _bstr_t DataName ) {
    struct IGRFreeGridCell * _result = 0;
    HRESULT _hr = raw_CellByDataName(DataName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridCellPtr(_result, false);
}

#pragma implementation_key(1937)
inline IGRFreeGridCellPtr IGRFreeGrid::_Cell ( long RowIndex, long ColumnIndex ) {
    struct IGRFreeGridCell * _result = 0;
    HRESULT _hr = raw__Cell(RowIndex, ColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridCellPtr(_result, false);
}

#pragma implementation_key(1938)
inline IGRFreeGridColumnPtr IGRFreeGrid::_Column ( long ColumnIndex ) {
    struct IGRFreeGridColumn * _result = 0;
    HRESULT _hr = raw__Column(ColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridColumnPtr(_result, false);
}

#pragma implementation_key(1939)
inline IGRFreeGridRowPtr IGRFreeGrid::_Row ( long RowIndex ) {
    struct IGRFreeGridRow * _result = 0;
    HRESULT _hr = raw__Row(RowIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridRowPtr(_result, false);
}

#pragma implementation_key(1940)
inline GRLockType IGRFreeGrid::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline void IGRFreeGrid::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFreeGridColumn wrapper method implementations
//

#pragma implementation_key(1942)
inline double IGRFreeGridColumn::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1943)
inline void IGRFreeGridColumn::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1944)
inline VARIANT_BOOL IGRFreeGridColumn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline void IGRFreeGridColumn::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1946)
inline _bstr_t IGRFreeGridColumn::GetAlignColumn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1947)
inline void IGRFreeGridColumn::PutAlignColumn ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1948)
inline _bstr_t IGRFreeGridColumn::GetAlignColumnEx ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlignColumnEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1949)
inline void IGRFreeGridColumn::PutAlignColumnEx ( _bstr_t pVal ) {
    HRESULT _hr = put_AlignColumnEx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1950)
inline GRAlignColumnStyle IGRFreeGridColumn::GetAlignColumnSide ( ) {
    GRAlignColumnStyle _result;
    HRESULT _hr = get_AlignColumnSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline void IGRFreeGridColumn::PutAlignColumnSide ( GRAlignColumnStyle pVal ) {
    HRESULT _hr = put_AlignColumnSide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1952)
inline VARIANT_BOOL IGRFreeGridColumn::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline void IGRFreeGridColumn::PutLocked ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Locked(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1954)
inline VARIANT_BOOL IGRFreeGridColumn::GetFixedWidth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FixedWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline void IGRFreeGridColumn::PutFixedWidth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FixedWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1956)
inline IGRFreeGridPtr IGRFreeGridColumn::GetFreeGrid ( ) {
    struct IGRFreeGrid * _result = 0;
    HRESULT _hr = get_FreeGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridPtr(_result, false);
}

#pragma implementation_key(1957)
inline GRLockType IGRFreeGridColumn::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1958)
inline void IGRFreeGridColumn::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGRFreeGridRow wrapper method implementations
//

#pragma implementation_key(1959)
inline double IGRFreeGridRow::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline void IGRFreeGridRow::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1961)
inline VARIANT_BOOL IGRFreeGridRow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1962)
inline void IGRFreeGridRow::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1963)
inline VARIANT_BOOL IGRFreeGridRow::GetKeepTogether ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline void IGRFreeGridRow::PutKeepTogether ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_KeepTogether(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1965)
inline VARIANT_BOOL IGRFreeGridRow::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline void IGRFreeGridRow::PutLocked ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Locked(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1967)
inline IGRFreeGridPtr IGRFreeGridRow::GetFreeGrid ( ) {
    struct IGRFreeGrid * _result = 0;
    HRESULT _hr = get_FreeGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGRFreeGridPtr(_result, false);
}

#pragma implementation_key(1968)
inline GRLockType IGRFreeGridRow::GetLock ( ) {
    GRLockType _result;
    HRESULT _hr = get_Lock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline void IGRFreeGridRow::PutLock ( GRLockType pVal ) {
    HRESULT _hr = put_Lock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
